
STM32H7TempSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c14  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006ee4  08006ee4  00016ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006f1c  08006f1c  00016f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006f24  08006f24  00016f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006f28  08006f28  00016f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08006f2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  08006f3c  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  08006f9c  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  240000d0  08006ffc  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240002d0  08006ffc  000202d0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001767e  00000000  00000000  00020141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002674  00000000  00000000  000377bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f78  00000000  00000000  00039e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c15  00000000  00000000  0003adb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00032c24  00000000  00000000  0003b9c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014c94  00000000  00000000  0006e5e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00146656  00000000  00000000  0008327d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004194  00000000  00000000  001c98d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001cda68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240000d0 	.word	0x240000d0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08006ecc 	.word	0x08006ecc

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240000d4 	.word	0x240000d4
 800030c:	08006ecc 	.word	0x08006ecc

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000320:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000324:	f000 b970 	b.w	8000608 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	460d      	mov	r5, r1
 8000348:	4604      	mov	r4, r0
 800034a:	460f      	mov	r7, r1
 800034c:	2b00      	cmp	r3, #0
 800034e:	d14a      	bne.n	80003e6 <__udivmoddi4+0xa6>
 8000350:	428a      	cmp	r2, r1
 8000352:	4694      	mov	ip, r2
 8000354:	d965      	bls.n	8000422 <__udivmoddi4+0xe2>
 8000356:	fab2 f382 	clz	r3, r2
 800035a:	b143      	cbz	r3, 800036e <__udivmoddi4+0x2e>
 800035c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000360:	f1c3 0220 	rsb	r2, r3, #32
 8000364:	409f      	lsls	r7, r3
 8000366:	fa20 f202 	lsr.w	r2, r0, r2
 800036a:	4317      	orrs	r7, r2
 800036c:	409c      	lsls	r4, r3
 800036e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000372:	fa1f f58c 	uxth.w	r5, ip
 8000376:	fbb7 f1fe 	udiv	r1, r7, lr
 800037a:	0c22      	lsrs	r2, r4, #16
 800037c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000380:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000384:	fb01 f005 	mul.w	r0, r1, r5
 8000388:	4290      	cmp	r0, r2
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x62>
 800038c:	eb1c 0202 	adds.w	r2, ip, r2
 8000390:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000394:	f080 811c 	bcs.w	80005d0 <__udivmoddi4+0x290>
 8000398:	4290      	cmp	r0, r2
 800039a:	f240 8119 	bls.w	80005d0 <__udivmoddi4+0x290>
 800039e:	3902      	subs	r1, #2
 80003a0:	4462      	add	r2, ip
 80003a2:	1a12      	subs	r2, r2, r0
 80003a4:	b2a4      	uxth	r4, r4
 80003a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003b2:	fb00 f505 	mul.w	r5, r0, r5
 80003b6:	42a5      	cmp	r5, r4
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x90>
 80003ba:	eb1c 0404 	adds.w	r4, ip, r4
 80003be:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003c2:	f080 8107 	bcs.w	80005d4 <__udivmoddi4+0x294>
 80003c6:	42a5      	cmp	r5, r4
 80003c8:	f240 8104 	bls.w	80005d4 <__udivmoddi4+0x294>
 80003cc:	4464      	add	r4, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d4:	1b64      	subs	r4, r4, r5
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11e      	cbz	r6, 80003e2 <__udivmoddi4+0xa2>
 80003da:	40dc      	lsrs	r4, r3
 80003dc:	2300      	movs	r3, #0
 80003de:	e9c6 4300 	strd	r4, r3, [r6]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0xbc>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80ed 	beq.w	80005ca <__udivmoddi4+0x28a>
 80003f0:	2100      	movs	r1, #0
 80003f2:	e9c6 0500 	strd	r0, r5, [r6]
 80003f6:	4608      	mov	r0, r1
 80003f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fc:	fab3 f183 	clz	r1, r3
 8000400:	2900      	cmp	r1, #0
 8000402:	d149      	bne.n	8000498 <__udivmoddi4+0x158>
 8000404:	42ab      	cmp	r3, r5
 8000406:	d302      	bcc.n	800040e <__udivmoddi4+0xce>
 8000408:	4282      	cmp	r2, r0
 800040a:	f200 80f8 	bhi.w	80005fe <__udivmoddi4+0x2be>
 800040e:	1a84      	subs	r4, r0, r2
 8000410:	eb65 0203 	sbc.w	r2, r5, r3
 8000414:	2001      	movs	r0, #1
 8000416:	4617      	mov	r7, r2
 8000418:	2e00      	cmp	r6, #0
 800041a:	d0e2      	beq.n	80003e2 <__udivmoddi4+0xa2>
 800041c:	e9c6 4700 	strd	r4, r7, [r6]
 8000420:	e7df      	b.n	80003e2 <__udivmoddi4+0xa2>
 8000422:	b902      	cbnz	r2, 8000426 <__udivmoddi4+0xe6>
 8000424:	deff      	udf	#255	; 0xff
 8000426:	fab2 f382 	clz	r3, r2
 800042a:	2b00      	cmp	r3, #0
 800042c:	f040 8090 	bne.w	8000550 <__udivmoddi4+0x210>
 8000430:	1a8a      	subs	r2, r1, r2
 8000432:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000436:	fa1f fe8c 	uxth.w	lr, ip
 800043a:	2101      	movs	r1, #1
 800043c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000440:	fb07 2015 	mls	r0, r7, r5, r2
 8000444:	0c22      	lsrs	r2, r4, #16
 8000446:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800044a:	fb0e f005 	mul.w	r0, lr, r5
 800044e:	4290      	cmp	r0, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x124>
 8000452:	eb1c 0202 	adds.w	r2, ip, r2
 8000456:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4290      	cmp	r0, r2
 800045e:	f200 80cb 	bhi.w	80005f8 <__udivmoddi4+0x2b8>
 8000462:	4645      	mov	r5, r8
 8000464:	1a12      	subs	r2, r2, r0
 8000466:	b2a4      	uxth	r4, r4
 8000468:	fbb2 f0f7 	udiv	r0, r2, r7
 800046c:	fb07 2210 	mls	r2, r7, r0, r2
 8000470:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000474:	fb0e fe00 	mul.w	lr, lr, r0
 8000478:	45a6      	cmp	lr, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x14e>
 800047c:	eb1c 0404 	adds.w	r4, ip, r4
 8000480:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000484:	d202      	bcs.n	800048c <__udivmoddi4+0x14c>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f200 80bb 	bhi.w	8000602 <__udivmoddi4+0x2c2>
 800048c:	4610      	mov	r0, r2
 800048e:	eba4 040e 	sub.w	r4, r4, lr
 8000492:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000496:	e79f      	b.n	80003d8 <__udivmoddi4+0x98>
 8000498:	f1c1 0720 	rsb	r7, r1, #32
 800049c:	408b      	lsls	r3, r1
 800049e:	fa22 fc07 	lsr.w	ip, r2, r7
 80004a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004a6:	fa05 f401 	lsl.w	r4, r5, r1
 80004aa:	fa20 f307 	lsr.w	r3, r0, r7
 80004ae:	40fd      	lsrs	r5, r7
 80004b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004b4:	4323      	orrs	r3, r4
 80004b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004ba:	fa1f fe8c 	uxth.w	lr, ip
 80004be:	fb09 5518 	mls	r5, r9, r8, r5
 80004c2:	0c1c      	lsrs	r4, r3, #16
 80004c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004c8:	fb08 f50e 	mul.w	r5, r8, lr
 80004cc:	42a5      	cmp	r5, r4
 80004ce:	fa02 f201 	lsl.w	r2, r2, r1
 80004d2:	fa00 f001 	lsl.w	r0, r0, r1
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004e0:	f080 8088 	bcs.w	80005f4 <__udivmoddi4+0x2b4>
 80004e4:	42a5      	cmp	r5, r4
 80004e6:	f240 8085 	bls.w	80005f4 <__udivmoddi4+0x2b4>
 80004ea:	f1a8 0802 	sub.w	r8, r8, #2
 80004ee:	4464      	add	r4, ip
 80004f0:	1b64      	subs	r4, r4, r5
 80004f2:	b29d      	uxth	r5, r3
 80004f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004f8:	fb09 4413 	mls	r4, r9, r3, r4
 80004fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000500:	fb03 fe0e 	mul.w	lr, r3, lr
 8000504:	45a6      	cmp	lr, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1c 0404 	adds.w	r4, ip, r4
 800050c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000510:	d26c      	bcs.n	80005ec <__udivmoddi4+0x2ac>
 8000512:	45a6      	cmp	lr, r4
 8000514:	d96a      	bls.n	80005ec <__udivmoddi4+0x2ac>
 8000516:	3b02      	subs	r3, #2
 8000518:	4464      	add	r4, ip
 800051a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800051e:	fba3 9502 	umull	r9, r5, r3, r2
 8000522:	eba4 040e 	sub.w	r4, r4, lr
 8000526:	42ac      	cmp	r4, r5
 8000528:	46c8      	mov	r8, r9
 800052a:	46ae      	mov	lr, r5
 800052c:	d356      	bcc.n	80005dc <__udivmoddi4+0x29c>
 800052e:	d053      	beq.n	80005d8 <__udivmoddi4+0x298>
 8000530:	b156      	cbz	r6, 8000548 <__udivmoddi4+0x208>
 8000532:	ebb0 0208 	subs.w	r2, r0, r8
 8000536:	eb64 040e 	sbc.w	r4, r4, lr
 800053a:	fa04 f707 	lsl.w	r7, r4, r7
 800053e:	40ca      	lsrs	r2, r1
 8000540:	40cc      	lsrs	r4, r1
 8000542:	4317      	orrs	r7, r2
 8000544:	e9c6 7400 	strd	r7, r4, [r6]
 8000548:	4618      	mov	r0, r3
 800054a:	2100      	movs	r1, #0
 800054c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000550:	f1c3 0120 	rsb	r1, r3, #32
 8000554:	fa02 fc03 	lsl.w	ip, r2, r3
 8000558:	fa20 f201 	lsr.w	r2, r0, r1
 800055c:	fa25 f101 	lsr.w	r1, r5, r1
 8000560:	409d      	lsls	r5, r3
 8000562:	432a      	orrs	r2, r5
 8000564:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000568:	fa1f fe8c 	uxth.w	lr, ip
 800056c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000570:	fb07 1510 	mls	r5, r7, r0, r1
 8000574:	0c11      	lsrs	r1, r2, #16
 8000576:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800057a:	fb00 f50e 	mul.w	r5, r0, lr
 800057e:	428d      	cmp	r5, r1
 8000580:	fa04 f403 	lsl.w	r4, r4, r3
 8000584:	d908      	bls.n	8000598 <__udivmoddi4+0x258>
 8000586:	eb1c 0101 	adds.w	r1, ip, r1
 800058a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800058e:	d22f      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 8000590:	428d      	cmp	r5, r1
 8000592:	d92d      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 8000594:	3802      	subs	r0, #2
 8000596:	4461      	add	r1, ip
 8000598:	1b49      	subs	r1, r1, r5
 800059a:	b292      	uxth	r2, r2
 800059c:	fbb1 f5f7 	udiv	r5, r1, r7
 80005a0:	fb07 1115 	mls	r1, r7, r5, r1
 80005a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005a8:	fb05 f10e 	mul.w	r1, r5, lr
 80005ac:	4291      	cmp	r1, r2
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x282>
 80005b0:	eb1c 0202 	adds.w	r2, ip, r2
 80005b4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80005b8:	d216      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 80005ba:	4291      	cmp	r1, r2
 80005bc:	d914      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 80005be:	3d02      	subs	r5, #2
 80005c0:	4462      	add	r2, ip
 80005c2:	1a52      	subs	r2, r2, r1
 80005c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005c8:	e738      	b.n	800043c <__udivmoddi4+0xfc>
 80005ca:	4631      	mov	r1, r6
 80005cc:	4630      	mov	r0, r6
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xa2>
 80005d0:	4639      	mov	r1, r7
 80005d2:	e6e6      	b.n	80003a2 <__udivmoddi4+0x62>
 80005d4:	4610      	mov	r0, r2
 80005d6:	e6fb      	b.n	80003d0 <__udivmoddi4+0x90>
 80005d8:	4548      	cmp	r0, r9
 80005da:	d2a9      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005dc:	ebb9 0802 	subs.w	r8, r9, r2
 80005e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005e4:	3b01      	subs	r3, #1
 80005e6:	e7a3      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e8:	4645      	mov	r5, r8
 80005ea:	e7ea      	b.n	80005c2 <__udivmoddi4+0x282>
 80005ec:	462b      	mov	r3, r5
 80005ee:	e794      	b.n	800051a <__udivmoddi4+0x1da>
 80005f0:	4640      	mov	r0, r8
 80005f2:	e7d1      	b.n	8000598 <__udivmoddi4+0x258>
 80005f4:	46d0      	mov	r8, sl
 80005f6:	e77b      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f8:	3d02      	subs	r5, #2
 80005fa:	4462      	add	r2, ip
 80005fc:	e732      	b.n	8000464 <__udivmoddi4+0x124>
 80005fe:	4608      	mov	r0, r1
 8000600:	e70a      	b.n	8000418 <__udivmoddi4+0xd8>
 8000602:	4464      	add	r4, ip
 8000604:	3802      	subs	r0, #2
 8000606:	e742      	b.n	800048e <__udivmoddi4+0x14e>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <SHTC3_Init>:
 */

#include "SHTC3.h"
#include "main.h"

HAL_StatusTypeDef SHTC3_Init(SHTC3* dev, I2C_HandleTypeDef* i2cHandle) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b088      	sub	sp, #32
 8000610:	af02      	add	r7, sp, #8
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	6039      	str	r1, [r7, #0]
    dev->i2cHandle = i2cHandle;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	683a      	ldr	r2, [r7, #0]
 800061a:	601a      	str	r2, [r3, #0]
    HAL_StatusTypeDef ret;
    uint8_t wakeup_cmd[2] = { SHTC3_WAKEUP >> 8, SHTC3_WAKEUP & 0xFF };
 800061c:	f241 7335 	movw	r3, #5941	; 0x1735
 8000620:	82bb      	strh	r3, [r7, #20]

    ret = HAL_I2C_Master_Transmit(dev->i2cHandle, SHTC3_I2C_ADDR, wakeup_cmd, 2, HAL_MAX_DELAY);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	6818      	ldr	r0, [r3, #0]
 8000626:	f107 0214 	add.w	r2, r7, #20
 800062a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800062e:	9300      	str	r3, [sp, #0]
 8000630:	2302      	movs	r3, #2
 8000632:	21e0      	movs	r1, #224	; 0xe0
 8000634:	f001 ff90 	bl	8002558 <HAL_I2C_Master_Transmit>
 8000638:	4603      	mov	r3, r0
 800063a:	75fb      	strb	r3, [r7, #23]
    if (ret != HAL_OK) {
 800063c:	7dfb      	ldrb	r3, [r7, #23]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SHTC3_Init+0x3a>
        return ret;
 8000642:	7dfb      	ldrb	r3, [r7, #23]
 8000644:	e027      	b.n	8000696 <SHTC3_Init+0x8a>
    }

    uint8_t read_id_cmd[2] = { SHTC3_READID >> 8, SHTC3_READID & 0xFF };
 8000646:	f64c 03ef 	movw	r3, #51439	; 0xc8ef
 800064a:	823b      	strh	r3, [r7, #16]
    ret = HAL_I2C_Master_Transmit(dev->i2cHandle, SHTC3_I2C_ADDR, read_id_cmd, 2, HAL_MAX_DELAY);
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	6818      	ldr	r0, [r3, #0]
 8000650:	f107 0210 	add.w	r2, r7, #16
 8000654:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000658:	9300      	str	r3, [sp, #0]
 800065a:	2302      	movs	r3, #2
 800065c:	21e0      	movs	r1, #224	; 0xe0
 800065e:	f001 ff7b 	bl	8002558 <HAL_I2C_Master_Transmit>
 8000662:	4603      	mov	r3, r0
 8000664:	75fb      	strb	r3, [r7, #23]
    if (ret != HAL_OK) {
 8000666:	7dfb      	ldrb	r3, [r7, #23]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SHTC3_Init+0x64>
        return ret;
 800066c:	7dfb      	ldrb	r3, [r7, #23]
 800066e:	e012      	b.n	8000696 <SHTC3_Init+0x8a>
    }

    uint8_t id[3]; // 2 bytes for ID, 1 byte for CRC
    ret = HAL_I2C_Master_Receive(dev->i2cHandle, SHTC3_I2C_ADDR, id, 3, HAL_MAX_DELAY);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	6818      	ldr	r0, [r3, #0]
 8000674:	f107 020c 	add.w	r2, r7, #12
 8000678:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	2303      	movs	r3, #3
 8000680:	21e0      	movs	r1, #224	; 0xe0
 8000682:	f002 f881 	bl	8002788 <HAL_I2C_Master_Receive>
 8000686:	4603      	mov	r3, r0
 8000688:	75fb      	strb	r3, [r7, #23]
    if (ret != HAL_OK) {
 800068a:	7dfb      	ldrb	r3, [r7, #23]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SHTC3_Init+0x88>
        return ret;
 8000690:	7dfb      	ldrb	r3, [r7, #23]
 8000692:	e000      	b.n	8000696 <SHTC3_Init+0x8a>
    }

    // Optional: Add CRC check here if necessary
    return HAL_OK;
 8000694:	2300      	movs	r3, #0
}
 8000696:	4618      	mov	r0, r3
 8000698:	3718      	adds	r7, #24
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
	...

080006a0 <SHTC3_Read_Temperature_Humidity>:

HAL_StatusTypeDef SHTC3_Read_Temperature_Humidity(SHTC3* dev) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08a      	sub	sp, #40	; 0x28
 80006a4:	af02      	add	r7, sp, #8
 80006a6:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef ret;
    uint8_t wakeup_cmd[2] = { SHTC3_WAKEUP >> 8, SHTC3_WAKEUP & 0xFF };
 80006a8:	f241 7335 	movw	r3, #5941	; 0x1735
 80006ac:	82bb      	strh	r3, [r7, #20]
    uint8_t temp_hum_cmd[2] = { SHTC3_REG_TF_NMCSE >> 8, SHTC3_REG_TF_NMCSE & 0xFF };
 80006ae:	f24a 237c 	movw	r3, #41596	; 0xa27c
 80006b2:	823b      	strh	r3, [r7, #16]
    uint8_t data[6];

    // Wake up the sensor
    ret = HAL_I2C_Master_Transmit(dev->i2cHandle, SHTC3_I2C_ADDR, wakeup_cmd, 2, HAL_MAX_DELAY);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	6818      	ldr	r0, [r3, #0]
 80006b8:	f107 0214 	add.w	r2, r7, #20
 80006bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006c0:	9300      	str	r3, [sp, #0]
 80006c2:	2302      	movs	r3, #2
 80006c4:	21e0      	movs	r1, #224	; 0xe0
 80006c6:	f001 ff47 	bl	8002558 <HAL_I2C_Master_Transmit>
 80006ca:	4603      	mov	r3, r0
 80006cc:	77fb      	strb	r3, [r7, #31]
    if (ret != HAL_OK) {
 80006ce:	7ffb      	ldrb	r3, [r7, #31]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SHTC3_Read_Temperature_Humidity+0x38>
        return ret;
 80006d4:	7ffb      	ldrb	r3, [r7, #31]
 80006d6:	e082      	b.n	80007de <SHTC3_Read_Temperature_Humidity+0x13e>
    }

    // Send the temperature and humidity measurement command
    ret = HAL_I2C_Master_Transmit(dev->i2cHandle, SHTC3_I2C_ADDR, temp_hum_cmd, 2, HAL_MAX_DELAY);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	6818      	ldr	r0, [r3, #0]
 80006dc:	f107 0210 	add.w	r2, r7, #16
 80006e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006e4:	9300      	str	r3, [sp, #0]
 80006e6:	2302      	movs	r3, #2
 80006e8:	21e0      	movs	r1, #224	; 0xe0
 80006ea:	f001 ff35 	bl	8002558 <HAL_I2C_Master_Transmit>
 80006ee:	4603      	mov	r3, r0
 80006f0:	77fb      	strb	r3, [r7, #31]
    if (ret != HAL_OK) {
 80006f2:	7ffb      	ldrb	r3, [r7, #31]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SHTC3_Read_Temperature_Humidity+0x5c>
        return ret;
 80006f8:	7ffb      	ldrb	r3, [r7, #31]
 80006fa:	e070      	b.n	80007de <SHTC3_Read_Temperature_Humidity+0x13e>
    }

    // Wait for the measurement to complete
    HAL_Delay(15);
 80006fc:	200f      	movs	r0, #15
 80006fe:	f000 ff7d 	bl	80015fc <HAL_Delay>

    // Receive the data from the sensor
    ret = HAL_I2C_Master_Receive(dev->i2cHandle, SHTC3_I2C_ADDR, data, 6, HAL_MAX_DELAY);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	6818      	ldr	r0, [r3, #0]
 8000706:	f107 0208 	add.w	r2, r7, #8
 800070a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800070e:	9300      	str	r3, [sp, #0]
 8000710:	2306      	movs	r3, #6
 8000712:	21e0      	movs	r1, #224	; 0xe0
 8000714:	f002 f838 	bl	8002788 <HAL_I2C_Master_Receive>
 8000718:	4603      	mov	r3, r0
 800071a:	77fb      	strb	r3, [r7, #31]
    if (ret != HAL_OK) {
 800071c:	7ffb      	ldrb	r3, [r7, #31]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SHTC3_Read_Temperature_Humidity+0x86>
        return ret;
 8000722:	7ffb      	ldrb	r3, [r7, #31]
 8000724:	e05b      	b.n	80007de <SHTC3_Read_Temperature_Humidity+0x13e>
    }

    // Extract the raw temperature and humidity values and their CRCs
    uint16_t raw_temperature = (data[0] << 8) | data[1];
 8000726:	7a3b      	ldrb	r3, [r7, #8]
 8000728:	021b      	lsls	r3, r3, #8
 800072a:	b21a      	sxth	r2, r3
 800072c:	7a7b      	ldrb	r3, [r7, #9]
 800072e:	b21b      	sxth	r3, r3
 8000730:	4313      	orrs	r3, r2
 8000732:	b21b      	sxth	r3, r3
 8000734:	83bb      	strh	r3, [r7, #28]
    uint8_t crc_temperature = data[2];
 8000736:	7abb      	ldrb	r3, [r7, #10]
 8000738:	76fb      	strb	r3, [r7, #27]
    uint16_t raw_humidity = (data[3] << 8) | data[4];
 800073a:	7afb      	ldrb	r3, [r7, #11]
 800073c:	021b      	lsls	r3, r3, #8
 800073e:	b21a      	sxth	r2, r3
 8000740:	7b3b      	ldrb	r3, [r7, #12]
 8000742:	b21b      	sxth	r3, r3
 8000744:	4313      	orrs	r3, r2
 8000746:	b21b      	sxth	r3, r3
 8000748:	833b      	strh	r3, [r7, #24]
    uint8_t crc_humidity = data[5];
 800074a:	7b7b      	ldrb	r3, [r7, #13]
 800074c:	75fb      	strb	r3, [r7, #23]

    // Verify the CRC of the temperature data
    if (CalculateCRC(&data[0], 2) != crc_temperature) {
 800074e:	f107 0308 	add.w	r3, r7, #8
 8000752:	2102      	movs	r1, #2
 8000754:	4618      	mov	r0, r3
 8000756:	f000 f957 	bl	8000a08 <CalculateCRC>
 800075a:	4603      	mov	r3, r0
 800075c:	461a      	mov	r2, r3
 800075e:	7efb      	ldrb	r3, [r7, #27]
 8000760:	4293      	cmp	r3, r2
 8000762:	d001      	beq.n	8000768 <SHTC3_Read_Temperature_Humidity+0xc8>
        return HAL_ERROR;
 8000764:	2301      	movs	r3, #1
 8000766:	e03a      	b.n	80007de <SHTC3_Read_Temperature_Humidity+0x13e>
    }

    // Verify the CRC of the humidity data
    if (CalculateCRC(&data[3], 2) != crc_humidity) {
 8000768:	f107 0308 	add.w	r3, r7, #8
 800076c:	3303      	adds	r3, #3
 800076e:	2102      	movs	r1, #2
 8000770:	4618      	mov	r0, r3
 8000772:	f000 f949 	bl	8000a08 <CalculateCRC>
 8000776:	4603      	mov	r3, r0
 8000778:	461a      	mov	r2, r3
 800077a:	7dfb      	ldrb	r3, [r7, #23]
 800077c:	4293      	cmp	r3, r2
 800077e:	d001      	beq.n	8000784 <SHTC3_Read_Temperature_Humidity+0xe4>
        return HAL_ERROR;
 8000780:	2301      	movs	r3, #1
 8000782:	e02c      	b.n	80007de <SHTC3_Read_Temperature_Humidity+0x13e>
    }

    // Convert the raw temperature to degrees Celsius
    dev->temp = -45 + 175 * ((float)raw_temperature / 65535.0);
 8000784:	8bbb      	ldrh	r3, [r7, #28]
 8000786:	ee07 3a90 	vmov	s15, r3
 800078a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800078e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000792:	ed9f 5b15 	vldr	d5, [pc, #84]	; 80007e8 <SHTC3_Read_Temperature_Humidity+0x148>
 8000796:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800079a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 80007f0 <SHTC3_Read_Temperature_Humidity+0x150>
 800079e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80007a2:	ed9f 6b15 	vldr	d6, [pc, #84]	; 80007f8 <SHTC3_Read_Temperature_Humidity+0x158>
 80007a6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80007aa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	edc3 7a01 	vstr	s15, [r3, #4]

    // Convert the raw humidity to percentage
    dev->rh = 100 * ((float)raw_humidity / 65535.0);
 80007b4:	8b3b      	ldrh	r3, [r7, #24]
 80007b6:	ee07 3a90 	vmov	s15, r3
 80007ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007be:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80007c2:	ed9f 5b09 	vldr	d5, [pc, #36]	; 80007e8 <SHTC3_Read_Temperature_Humidity+0x148>
 80007c6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80007ca:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8000800 <SHTC3_Read_Temperature_Humidity+0x160>
 80007ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 80007d2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	edc3 7a02 	vstr	s15, [r3, #8]

    return HAL_OK;
 80007dc:	2300      	movs	r3, #0
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3720      	adds	r7, #32
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	00000000 	.word	0x00000000
 80007ec:	40efffe0 	.word	0x40efffe0
 80007f0:	00000000 	.word	0x00000000
 80007f4:	4065e000 	.word	0x4065e000
 80007f8:	00000000 	.word	0x00000000
 80007fc:	40468000 	.word	0x40468000
 8000800:	00000000 	.word	0x00000000
 8000804:	40590000 	.word	0x40590000

08000808 <SHTC3_Read_Temperature>:




HAL_StatusTypeDef SHTC3_Read_Temperature(SHTC3* dev) {
 8000808:	b580      	push	{r7, lr}
 800080a:	b08a      	sub	sp, #40	; 0x28
 800080c:	af02      	add	r7, sp, #8
 800080e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef ret;
    uint8_t wakeup_cmd[2] = { SHTC3_WAKEUP >> 8, SHTC3_WAKEUP & 0xFF };
 8000810:	f241 7335 	movw	r3, #5941	; 0x1735
 8000814:	833b      	strh	r3, [r7, #24]
    uint8_t temp_cmd[2] = { SHTC3_REG_TF_NMCSE >> 8, SHTC3_REG_TF_NMCSE & 0xFF };
 8000816:	f24a 237c 	movw	r3, #41596	; 0xa27c
 800081a:	82bb      	strh	r3, [r7, #20]
    uint8_t data[6];

    ret = HAL_I2C_Master_Transmit(dev->i2cHandle, SHTC3_I2C_ADDR, wakeup_cmd, 2, HAL_MAX_DELAY);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	6818      	ldr	r0, [r3, #0]
 8000820:	f107 0218 	add.w	r2, r7, #24
 8000824:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000828:	9300      	str	r3, [sp, #0]
 800082a:	2302      	movs	r3, #2
 800082c:	21e0      	movs	r1, #224	; 0xe0
 800082e:	f001 fe93 	bl	8002558 <HAL_I2C_Master_Transmit>
 8000832:	4603      	mov	r3, r0
 8000834:	77fb      	strb	r3, [r7, #31]
    if (ret != HAL_OK) {
 8000836:	7ffb      	ldrb	r3, [r7, #31]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <SHTC3_Read_Temperature+0x38>
        return ret;
 800083c:	7ffb      	ldrb	r3, [r7, #31]
 800083e:	e056      	b.n	80008ee <SHTC3_Read_Temperature+0xe6>
    }

    ret = HAL_I2C_Master_Transmit(dev->i2cHandle, SHTC3_I2C_ADDR, temp_cmd, 2, HAL_MAX_DELAY);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	6818      	ldr	r0, [r3, #0]
 8000844:	f107 0214 	add.w	r2, r7, #20
 8000848:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800084c:	9300      	str	r3, [sp, #0]
 800084e:	2302      	movs	r3, #2
 8000850:	21e0      	movs	r1, #224	; 0xe0
 8000852:	f001 fe81 	bl	8002558 <HAL_I2C_Master_Transmit>
 8000856:	4603      	mov	r3, r0
 8000858:	77fb      	strb	r3, [r7, #31]
    if (ret != HAL_OK) {
 800085a:	7ffb      	ldrb	r3, [r7, #31]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <SHTC3_Read_Temperature+0x5c>
        return ret;
 8000860:	7ffb      	ldrb	r3, [r7, #31]
 8000862:	e044      	b.n	80008ee <SHTC3_Read_Temperature+0xe6>
    }

    HAL_Delay(15);
 8000864:	200f      	movs	r0, #15
 8000866:	f000 fec9 	bl	80015fc <HAL_Delay>

    ret = HAL_I2C_Master_Receive(dev->i2cHandle, SHTC3_I2C_ADDR, data, 6, HAL_MAX_DELAY);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	6818      	ldr	r0, [r3, #0]
 800086e:	f107 020c 	add.w	r2, r7, #12
 8000872:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000876:	9300      	str	r3, [sp, #0]
 8000878:	2306      	movs	r3, #6
 800087a:	21e0      	movs	r1, #224	; 0xe0
 800087c:	f001 ff84 	bl	8002788 <HAL_I2C_Master_Receive>
 8000880:	4603      	mov	r3, r0
 8000882:	77fb      	strb	r3, [r7, #31]
    if (ret != HAL_OK) {
 8000884:	7ffb      	ldrb	r3, [r7, #31]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <SHTC3_Read_Temperature+0x86>
        return ret;
 800088a:	7ffb      	ldrb	r3, [r7, #31]
 800088c:	e02f      	b.n	80008ee <SHTC3_Read_Temperature+0xe6>
    }

    uint16_t raw_temperature = (data[0] << 8) | data[1];
 800088e:	7b3b      	ldrb	r3, [r7, #12]
 8000890:	021b      	lsls	r3, r3, #8
 8000892:	b21a      	sxth	r2, r3
 8000894:	7b7b      	ldrb	r3, [r7, #13]
 8000896:	b21b      	sxth	r3, r3
 8000898:	4313      	orrs	r3, r2
 800089a:	b21b      	sxth	r3, r3
 800089c:	83bb      	strh	r3, [r7, #28]
    uint8_t crc_temperature = data[2];
 800089e:	7bbb      	ldrb	r3, [r7, #14]
 80008a0:	76fb      	strb	r3, [r7, #27]

    if (CalculateCRC(data, 2) != crc_temperature) {
 80008a2:	f107 030c 	add.w	r3, r7, #12
 80008a6:	2102      	movs	r1, #2
 80008a8:	4618      	mov	r0, r3
 80008aa:	f000 f8ad 	bl	8000a08 <CalculateCRC>
 80008ae:	4603      	mov	r3, r0
 80008b0:	461a      	mov	r2, r3
 80008b2:	7efb      	ldrb	r3, [r7, #27]
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d001      	beq.n	80008bc <SHTC3_Read_Temperature+0xb4>
        return HAL_ERROR;
 80008b8:	2301      	movs	r3, #1
 80008ba:	e018      	b.n	80008ee <SHTC3_Read_Temperature+0xe6>
    }

    dev->temp = -45 + 175 * ((float)raw_temperature / 65535.0);
 80008bc:	8bbb      	ldrh	r3, [r7, #28]
 80008be:	ee07 3a90 	vmov	s15, r3
 80008c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008c6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80008ca:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80008f8 <SHTC3_Read_Temperature+0xf0>
 80008ce:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80008d2:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000900 <SHTC3_Read_Temperature+0xf8>
 80008d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008da:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000908 <SHTC3_Read_Temperature+0x100>
 80008de:	ee37 7b46 	vsub.f64	d7, d7, d6
 80008e2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	edc3 7a01 	vstr	s15, [r3, #4]
    return HAL_OK;
 80008ec:	2300      	movs	r3, #0
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3720      	adds	r7, #32
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	00000000 	.word	0x00000000
 80008fc:	40efffe0 	.word	0x40efffe0
 8000900:	00000000 	.word	0x00000000
 8000904:	4065e000 	.word	0x4065e000
 8000908:	00000000 	.word	0x00000000
 800090c:	40468000 	.word	0x40468000

08000910 <SHTC3_Read_Humidity>:

HAL_StatusTypeDef SHTC3_Read_Humidity(SHTC3* dev) {
 8000910:	b580      	push	{r7, lr}
 8000912:	b08a      	sub	sp, #40	; 0x28
 8000914:	af02      	add	r7, sp, #8
 8000916:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef ret;
    uint8_t wakeup_cmd[2] = { SHTC3_WAKEUP >> 8, SHTC3_WAKEUP & 0xFF };
 8000918:	f241 7335 	movw	r3, #5941	; 0x1735
 800091c:	833b      	strh	r3, [r7, #24]
    uint8_t hum_cmd[2] = { SHTC3_REG_RHF_NMCSE >> 8, SHTC3_REG_RHF_NMCSE & 0xFF };
 800091e:	f242 435c 	movw	r3, #9308	; 0x245c
 8000922:	82bb      	strh	r3, [r7, #20]
    uint8_t data[6];

    ret = HAL_I2C_Master_Transmit(dev->i2cHandle, SHTC3_I2C_ADDR, wakeup_cmd, 2, HAL_MAX_DELAY);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	6818      	ldr	r0, [r3, #0]
 8000928:	f107 0218 	add.w	r2, r7, #24
 800092c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000930:	9300      	str	r3, [sp, #0]
 8000932:	2302      	movs	r3, #2
 8000934:	21e0      	movs	r1, #224	; 0xe0
 8000936:	f001 fe0f 	bl	8002558 <HAL_I2C_Master_Transmit>
 800093a:	4603      	mov	r3, r0
 800093c:	77fb      	strb	r3, [r7, #31]
    if (ret != HAL_OK) {
 800093e:	7ffb      	ldrb	r3, [r7, #31]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <SHTC3_Read_Humidity+0x38>
        return ret;
 8000944:	7ffb      	ldrb	r3, [r7, #31]
 8000946:	e053      	b.n	80009f0 <SHTC3_Read_Humidity+0xe0>
    }

    ret = HAL_I2C_Master_Transmit(dev->i2cHandle, SHTC3_I2C_ADDR, hum_cmd, 2, HAL_MAX_DELAY);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	6818      	ldr	r0, [r3, #0]
 800094c:	f107 0214 	add.w	r2, r7, #20
 8000950:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000954:	9300      	str	r3, [sp, #0]
 8000956:	2302      	movs	r3, #2
 8000958:	21e0      	movs	r1, #224	; 0xe0
 800095a:	f001 fdfd 	bl	8002558 <HAL_I2C_Master_Transmit>
 800095e:	4603      	mov	r3, r0
 8000960:	77fb      	strb	r3, [r7, #31]
    if (ret != HAL_OK) {
 8000962:	7ffb      	ldrb	r3, [r7, #31]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <SHTC3_Read_Humidity+0x5c>
        return ret;
 8000968:	7ffb      	ldrb	r3, [r7, #31]
 800096a:	e041      	b.n	80009f0 <SHTC3_Read_Humidity+0xe0>
    }

    HAL_Delay(15);
 800096c:	200f      	movs	r0, #15
 800096e:	f000 fe45 	bl	80015fc <HAL_Delay>

    ret = HAL_I2C_Master_Receive(dev->i2cHandle, SHTC3_I2C_ADDR, data, 6, HAL_MAX_DELAY);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	6818      	ldr	r0, [r3, #0]
 8000976:	f107 020c 	add.w	r2, r7, #12
 800097a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800097e:	9300      	str	r3, [sp, #0]
 8000980:	2306      	movs	r3, #6
 8000982:	21e0      	movs	r1, #224	; 0xe0
 8000984:	f001 ff00 	bl	8002788 <HAL_I2C_Master_Receive>
 8000988:	4603      	mov	r3, r0
 800098a:	77fb      	strb	r3, [r7, #31]
    if (ret != HAL_OK) {
 800098c:	7ffb      	ldrb	r3, [r7, #31]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <SHTC3_Read_Humidity+0x86>
        return ret;
 8000992:	7ffb      	ldrb	r3, [r7, #31]
 8000994:	e02c      	b.n	80009f0 <SHTC3_Read_Humidity+0xe0>
    }

    uint16_t raw_humidity = (data[3] << 8) | data[4];
 8000996:	7bfb      	ldrb	r3, [r7, #15]
 8000998:	021b      	lsls	r3, r3, #8
 800099a:	b21a      	sxth	r2, r3
 800099c:	7c3b      	ldrb	r3, [r7, #16]
 800099e:	b21b      	sxth	r3, r3
 80009a0:	4313      	orrs	r3, r2
 80009a2:	b21b      	sxth	r3, r3
 80009a4:	83bb      	strh	r3, [r7, #28]
    uint8_t crc_humidity = data[5];
 80009a6:	7c7b      	ldrb	r3, [r7, #17]
 80009a8:	76fb      	strb	r3, [r7, #27]

    if (CalculateCRC(&data[3], 2) != crc_humidity) {
 80009aa:	f107 030c 	add.w	r3, r7, #12
 80009ae:	3303      	adds	r3, #3
 80009b0:	2102      	movs	r1, #2
 80009b2:	4618      	mov	r0, r3
 80009b4:	f000 f828 	bl	8000a08 <CalculateCRC>
 80009b8:	4603      	mov	r3, r0
 80009ba:	461a      	mov	r2, r3
 80009bc:	7efb      	ldrb	r3, [r7, #27]
 80009be:	4293      	cmp	r3, r2
 80009c0:	d001      	beq.n	80009c6 <SHTC3_Read_Humidity+0xb6>
        return HAL_ERROR;
 80009c2:	2301      	movs	r3, #1
 80009c4:	e014      	b.n	80009f0 <SHTC3_Read_Humidity+0xe0>
    }

    dev->rh = 100 * ((float)raw_humidity / 65535.0);
 80009c6:	8bbb      	ldrh	r3, [r7, #28]
 80009c8:	ee07 3a90 	vmov	s15, r3
 80009cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009d0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80009d4:	ed9f 5b08 	vldr	d5, [pc, #32]	; 80009f8 <SHTC3_Read_Humidity+0xe8>
 80009d8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80009dc:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8000a00 <SHTC3_Read_Humidity+0xf0>
 80009e0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80009e4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	edc3 7a02 	vstr	s15, [r3, #8]
    return HAL_OK;
 80009ee:	2300      	movs	r3, #0
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3720      	adds	r7, #32
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	00000000 	.word	0x00000000
 80009fc:	40efffe0 	.word	0x40efffe0
 8000a00:	00000000 	.word	0x00000000
 8000a04:	40590000 	.word	0x40590000

08000a08 <CalculateCRC>:
HAL_StatusTypeDef SHTC3_WriteRegister(SHTC3* dev, uint8_t reg, uint8_t* data) {
    return HAL_I2C_Mem_Write(dev->i2cHandle, SHTC3_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
}


uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 8000a08:	b480      	push	{r7}
 8000a0a:	b085      	sub	sp, #20
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	460b      	mov	r3, r1
 8000a12:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0xFF;
 8000a14:	23ff      	movs	r3, #255	; 0xff
 8000a16:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < length; i++) {
 8000a18:	2300      	movs	r3, #0
 8000a1a:	73bb      	strb	r3, [r7, #14]
 8000a1c:	e021      	b.n	8000a62 <CalculateCRC+0x5a>
        crc ^= data[i];
 8000a1e:	7bbb      	ldrb	r3, [r7, #14]
 8000a20:	687a      	ldr	r2, [r7, #4]
 8000a22:	4413      	add	r3, r2
 8000a24:	781a      	ldrb	r2, [r3, #0]
 8000a26:	7bfb      	ldrb	r3, [r7, #15]
 8000a28:	4053      	eors	r3, r2
 8000a2a:	73fb      	strb	r3, [r7, #15]
        for (uint8_t j = 0; j < 8; j++) {
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	737b      	strb	r3, [r7, #13]
 8000a30:	e011      	b.n	8000a56 <CalculateCRC+0x4e>
            if (crc & 0x80) {
 8000a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	da07      	bge.n	8000a4a <CalculateCRC+0x42>
                crc = (crc << 1) ^ 0x31;
 8000a3a:	7bfb      	ldrb	r3, [r7, #15]
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	b25b      	sxtb	r3, r3
 8000a40:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8000a44:	b25b      	sxtb	r3, r3
 8000a46:	73fb      	strb	r3, [r7, #15]
 8000a48:	e002      	b.n	8000a50 <CalculateCRC+0x48>
            } else {
                crc <<= 1;
 8000a4a:	7bfb      	ldrb	r3, [r7, #15]
 8000a4c:	005b      	lsls	r3, r3, #1
 8000a4e:	73fb      	strb	r3, [r7, #15]
        for (uint8_t j = 0; j < 8; j++) {
 8000a50:	7b7b      	ldrb	r3, [r7, #13]
 8000a52:	3301      	adds	r3, #1
 8000a54:	737b      	strb	r3, [r7, #13]
 8000a56:	7b7b      	ldrb	r3, [r7, #13]
 8000a58:	2b07      	cmp	r3, #7
 8000a5a:	d9ea      	bls.n	8000a32 <CalculateCRC+0x2a>
    for (uint8_t i = 0; i < length; i++) {
 8000a5c:	7bbb      	ldrb	r3, [r7, #14]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	73bb      	strb	r3, [r7, #14]
 8000a62:	7bba      	ldrb	r2, [r7, #14]
 8000a64:	78fb      	ldrb	r3, [r7, #3]
 8000a66:	429a      	cmp	r2, r3
 8000a68:	d3d9      	bcc.n	8000a1e <CalculateCRC+0x16>
            }
        }
    }
    return crc;
 8000a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3714      	adds	r7, #20
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a7e:	f000 fd2b 	bl	80014d8 <HAL_Init>
  /* Configure the system clock */
  SystemClock_Config();
 8000a82:	f000 f851 	bl	8000b28 <SystemClock_Config>



  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a86:	f000 f99f 	bl	8000dc8 <MX_GPIO_Init>
  MX_ETH_Init();
 8000a8a:	f000 f8bd 	bl	8000c08 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000a8e:	f000 f947 	bl	8000d20 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000a92:	f000 f991 	bl	8000db8 <MX_USB_OTG_HS_USB_Init>
  MX_I2C1_Init();
 8000a96:	f000 f903 	bl	8000ca0 <MX_I2C1_Init>



  SHTC3 shtc3 = {
 8000a9a:	4b20      	ldr	r3, [pc, #128]	; (8000b1c <main+0xa4>)
 8000a9c:	603b      	str	r3, [r7, #0]
 8000a9e:	f04f 0300 	mov.w	r3, #0
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	f04f 0300 	mov.w	r3, #0
 8000aa8:	60bb      	str	r3, [r7, #8]
      .temp = 0.0f,
      .rh = 0.0f
  };

  // Initialize the SHTC3 sensor
  if (SHTC3_Init(&shtc3, shtc3.i2cHandle) != HAL_OK) {
 8000aaa:	683a      	ldr	r2, [r7, #0]
 8000aac:	463b      	mov	r3, r7
 8000aae:	4611      	mov	r1, r2
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff fdab 	bl	800060c <SHTC3_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <main+0x48>
      // Initialization error
      Error_Handler();
 8000abc:	f000 fa80 	bl	8000fc0 <Error_Handler>
  }

  if (SHTC3_Read_Temperature(&shtc3) != HAL_OK) {
 8000ac0:	463b      	mov	r3, r7
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff fea0 	bl	8000808 <SHTC3_Read_Temperature>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <main+0x5a>
      Error_Handler();
 8000ace:	f000 fa77 	bl	8000fc0 <Error_Handler>
  }

  if (SHTC3_Read_Humidity(&shtc3) != HAL_OK) {
 8000ad2:	463b      	mov	r3, r7
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff ff1b 	bl	8000910 <SHTC3_Read_Humidity>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <main+0x6c>
      Error_Handler();
 8000ae0:	f000 fa6e 	bl	8000fc0 <Error_Handler>
  }

  temperature = shtc3.temp;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	4a0e      	ldr	r2, [pc, #56]	; (8000b20 <main+0xa8>)
 8000ae8:	6013      	str	r3, [r2, #0]
  rh = shtc3.rh;
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	4a0d      	ldr	r2, [pc, #52]	; (8000b24 <main+0xac>)
 8000aee:	6013      	str	r3, [r2, #0]

  /* Infinite loop */

  while (1) {

      HAL_StatusTypeDef ret = SHTC3_Read_Temperature_Humidity(&shtc3);
 8000af0:	463b      	mov	r3, r7
 8000af2:	4618      	mov	r0, r3
 8000af4:	f7ff fdd4 	bl	80006a0 <SHTC3_Read_Temperature_Humidity>
 8000af8:	4603      	mov	r3, r0
 8000afa:	73fb      	strb	r3, [r7, #15]
      if (ret == HAL_OK) {
 8000afc:	7bfb      	ldrb	r3, [r7, #15]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d106      	bne.n	8000b10 <main+0x98>
          // Use the temperature and humidity values
          temperature = shtc3.temp;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4a06      	ldr	r2, [pc, #24]	; (8000b20 <main+0xa8>)
 8000b06:	6013      	str	r3, [r2, #0]
          rh = shtc3.rh;
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	4a06      	ldr	r2, [pc, #24]	; (8000b24 <main+0xac>)
 8000b0c:	6013      	str	r3, [r2, #0]
 8000b0e:	e001      	b.n	8000b14 <main+0x9c>

      } else {
    	  Error_Handler();
 8000b10:	f000 fa56 	bl	8000fc0 <Error_Handler>

      }
	  HAL_Delay(100);
 8000b14:	2064      	movs	r0, #100	; 0x64
 8000b16:	f000 fd71 	bl	80015fc <HAL_Delay>
  while (1) {
 8000b1a:	e7e9      	b.n	8000af0 <main+0x78>
 8000b1c:	240001d4 	.word	0x240001d4
 8000b20:	240002bc 	.word	0x240002bc
 8000b24:	240002c0 	.word	0x240002c0

08000b28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b09c      	sub	sp, #112	; 0x70
 8000b2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b32:	224c      	movs	r2, #76	; 0x4c
 8000b34:	2100      	movs	r1, #0
 8000b36:	4618      	mov	r0, r3
 8000b38:	f006 f99c 	bl	8006e74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	2220      	movs	r2, #32
 8000b40:	2100      	movs	r1, #0
 8000b42:	4618      	mov	r0, r3
 8000b44:	f006 f996 	bl	8006e74 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b48:	2002      	movs	r0, #2
 8000b4a:	f002 fa51 	bl	8002ff0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b4e:	2300      	movs	r3, #0
 8000b50:	603b      	str	r3, [r7, #0]
 8000b52:	4b2c      	ldr	r3, [pc, #176]	; (8000c04 <SystemClock_Config+0xdc>)
 8000b54:	699b      	ldr	r3, [r3, #24]
 8000b56:	4a2b      	ldr	r2, [pc, #172]	; (8000c04 <SystemClock_Config+0xdc>)
 8000b58:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b5c:	6193      	str	r3, [r2, #24]
 8000b5e:	4b29      	ldr	r3, [pc, #164]	; (8000c04 <SystemClock_Config+0xdc>)
 8000b60:	699b      	ldr	r3, [r3, #24]
 8000b62:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b66:	603b      	str	r3, [r7, #0]
 8000b68:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b6a:	bf00      	nop
 8000b6c:	4b25      	ldr	r3, [pc, #148]	; (8000c04 <SystemClock_Config+0xdc>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b78:	d1f8      	bne.n	8000b6c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000b7a:	2321      	movs	r3, #33	; 0x21
 8000b7c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b7e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b82:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b84:	2301      	movs	r3, #1
 8000b86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b90:	2304      	movs	r3, #4
 8000b92:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000b94:	f240 1313 	movw	r3, #275	; 0x113
 8000b98:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b9e:	2304      	movs	r3, #4
 8000ba0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000ba6:	2304      	movs	r3, #4
 8000ba8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000baa:	2300      	movs	r3, #0
 8000bac:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f002 fa54 	bl	8003064 <HAL_RCC_OscConfig>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000bc2:	f000 f9fd 	bl	8000fc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bc6:	233f      	movs	r3, #63	; 0x3f
 8000bc8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000bd2:	2308      	movs	r3, #8
 8000bd4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000bd6:	2340      	movs	r3, #64	; 0x40
 8000bd8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000bda:	2340      	movs	r3, #64	; 0x40
 8000bdc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000bde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000be2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000be4:	2340      	movs	r3, #64	; 0x40
 8000be6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000be8:	1d3b      	adds	r3, r7, #4
 8000bea:	2103      	movs	r1, #3
 8000bec:	4618      	mov	r0, r3
 8000bee:	f002 fe13 	bl	8003818 <HAL_RCC_ClockConfig>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000bf8:	f000 f9e2 	bl	8000fc0 <Error_Handler>
  }
}
 8000bfc:	bf00      	nop
 8000bfe:	3770      	adds	r7, #112	; 0x70
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	58024800 	.word	0x58024800

08000c08 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000c0c:	4b1e      	ldr	r3, [pc, #120]	; (8000c88 <MX_ETH_Init+0x80>)
 8000c0e:	4a1f      	ldr	r2, [pc, #124]	; (8000c8c <MX_ETH_Init+0x84>)
 8000c10:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000c12:	4b1f      	ldr	r3, [pc, #124]	; (8000c90 <MX_ETH_Init+0x88>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000c18:	4b1d      	ldr	r3, [pc, #116]	; (8000c90 <MX_ETH_Init+0x88>)
 8000c1a:	2280      	movs	r2, #128	; 0x80
 8000c1c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000c1e:	4b1c      	ldr	r3, [pc, #112]	; (8000c90 <MX_ETH_Init+0x88>)
 8000c20:	22e1      	movs	r2, #225	; 0xe1
 8000c22:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000c24:	4b1a      	ldr	r3, [pc, #104]	; (8000c90 <MX_ETH_Init+0x88>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000c2a:	4b19      	ldr	r3, [pc, #100]	; (8000c90 <MX_ETH_Init+0x88>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000c30:	4b17      	ldr	r3, [pc, #92]	; (8000c90 <MX_ETH_Init+0x88>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000c36:	4b14      	ldr	r3, [pc, #80]	; (8000c88 <MX_ETH_Init+0x80>)
 8000c38:	4a15      	ldr	r2, [pc, #84]	; (8000c90 <MX_ETH_Init+0x88>)
 8000c3a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000c3c:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <MX_ETH_Init+0x80>)
 8000c3e:	2201      	movs	r2, #1
 8000c40:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000c42:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <MX_ETH_Init+0x80>)
 8000c44:	4a13      	ldr	r2, [pc, #76]	; (8000c94 <MX_ETH_Init+0x8c>)
 8000c46:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000c48:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <MX_ETH_Init+0x80>)
 8000c4a:	4a13      	ldr	r2, [pc, #76]	; (8000c98 <MX_ETH_Init+0x90>)
 8000c4c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <MX_ETH_Init+0x80>)
 8000c50:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000c54:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000c56:	480c      	ldr	r0, [pc, #48]	; (8000c88 <MX_ETH_Init+0x80>)
 8000c58:	f000 fdec 	bl	8001834 <HAL_ETH_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000c62:	f000 f9ad 	bl	8000fc0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000c66:	2238      	movs	r2, #56	; 0x38
 8000c68:	2100      	movs	r1, #0
 8000c6a:	480c      	ldr	r0, [pc, #48]	; (8000c9c <MX_ETH_Init+0x94>)
 8000c6c:	f006 f902 	bl	8006e74 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000c70:	4b0a      	ldr	r3, [pc, #40]	; (8000c9c <MX_ETH_Init+0x94>)
 8000c72:	2221      	movs	r2, #33	; 0x21
 8000c74:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000c76:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <MX_ETH_Init+0x94>)
 8000c78:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000c7c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000c7e:	4b07      	ldr	r3, [pc, #28]	; (8000c9c <MX_ETH_Init+0x94>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	24000124 	.word	0x24000124
 8000c8c:	40028000 	.word	0x40028000
 8000c90:	240002c4 	.word	0x240002c4
 8000c94:	24000070 	.word	0x24000070
 8000c98:	24000010 	.word	0x24000010
 8000c9c:	240000ec 	.word	0x240000ec

08000ca0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ca4:	4b1b      	ldr	r3, [pc, #108]	; (8000d14 <MX_I2C1_Init+0x74>)
 8000ca6:	4a1c      	ldr	r2, [pc, #112]	; (8000d18 <MX_I2C1_Init+0x78>)
 8000ca8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60404E72;
 8000caa:	4b1a      	ldr	r3, [pc, #104]	; (8000d14 <MX_I2C1_Init+0x74>)
 8000cac:	4a1b      	ldr	r2, [pc, #108]	; (8000d1c <MX_I2C1_Init+0x7c>)
 8000cae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cb0:	4b18      	ldr	r3, [pc, #96]	; (8000d14 <MX_I2C1_Init+0x74>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cb6:	4b17      	ldr	r3, [pc, #92]	; (8000d14 <MX_I2C1_Init+0x74>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cbc:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <MX_I2C1_Init+0x74>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cc2:	4b14      	ldr	r3, [pc, #80]	; (8000d14 <MX_I2C1_Init+0x74>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cc8:	4b12      	ldr	r3, [pc, #72]	; (8000d14 <MX_I2C1_Init+0x74>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cce:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <MX_I2C1_Init+0x74>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cd4:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <MX_I2C1_Init+0x74>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cda:	480e      	ldr	r0, [pc, #56]	; (8000d14 <MX_I2C1_Init+0x74>)
 8000cdc:	f001 fba0 	bl	8002420 <HAL_I2C_Init>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ce6:	f000 f96b 	bl	8000fc0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cea:	2100      	movs	r1, #0
 8000cec:	4809      	ldr	r0, [pc, #36]	; (8000d14 <MX_I2C1_Init+0x74>)
 8000cee:	f002 f8e7 	bl	8002ec0 <HAL_I2CEx_ConfigAnalogFilter>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000cf8:	f000 f962 	bl	8000fc0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4805      	ldr	r0, [pc, #20]	; (8000d14 <MX_I2C1_Init+0x74>)
 8000d00:	f002 f929 	bl	8002f56 <HAL_I2CEx_ConfigDigitalFilter>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d0a:	f000 f959 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	240001d4 	.word	0x240001d4
 8000d18:	40005400 	.word	0x40005400
 8000d1c:	60404e72 	.word	0x60404e72

08000d20 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d24:	4b22      	ldr	r3, [pc, #136]	; (8000db0 <MX_USART3_UART_Init+0x90>)
 8000d26:	4a23      	ldr	r2, [pc, #140]	; (8000db4 <MX_USART3_UART_Init+0x94>)
 8000d28:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d2a:	4b21      	ldr	r3, [pc, #132]	; (8000db0 <MX_USART3_UART_Init+0x90>)
 8000d2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d30:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d32:	4b1f      	ldr	r3, [pc, #124]	; (8000db0 <MX_USART3_UART_Init+0x90>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d38:	4b1d      	ldr	r3, [pc, #116]	; (8000db0 <MX_USART3_UART_Init+0x90>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d3e:	4b1c      	ldr	r3, [pc, #112]	; (8000db0 <MX_USART3_UART_Init+0x90>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d44:	4b1a      	ldr	r3, [pc, #104]	; (8000db0 <MX_USART3_UART_Init+0x90>)
 8000d46:	220c      	movs	r2, #12
 8000d48:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d4a:	4b19      	ldr	r3, [pc, #100]	; (8000db0 <MX_USART3_UART_Init+0x90>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d50:	4b17      	ldr	r3, [pc, #92]	; (8000db0 <MX_USART3_UART_Init+0x90>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d56:	4b16      	ldr	r3, [pc, #88]	; (8000db0 <MX_USART3_UART_Init+0x90>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d5c:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <MX_USART3_UART_Init+0x90>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d62:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <MX_USART3_UART_Init+0x90>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d68:	4811      	ldr	r0, [pc, #68]	; (8000db0 <MX_USART3_UART_Init+0x90>)
 8000d6a:	f004 fea3 	bl	8005ab4 <HAL_UART_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d74:	f000 f924 	bl	8000fc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d78:	2100      	movs	r1, #0
 8000d7a:	480d      	ldr	r0, [pc, #52]	; (8000db0 <MX_USART3_UART_Init+0x90>)
 8000d7c:	f005 ffaf 	bl	8006cde <HAL_UARTEx_SetTxFifoThreshold>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d86:	f000 f91b 	bl	8000fc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4808      	ldr	r0, [pc, #32]	; (8000db0 <MX_USART3_UART_Init+0x90>)
 8000d8e:	f005 ffe4 	bl	8006d5a <HAL_UARTEx_SetRxFifoThreshold>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d98:	f000 f912 	bl	8000fc0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d9c:	4804      	ldr	r0, [pc, #16]	; (8000db0 <MX_USART3_UART_Init+0x90>)
 8000d9e:	f005 ff65 	bl	8006c6c <HAL_UARTEx_DisableFifoMode>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000da8:	f000 f90a 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	24000228 	.word	0x24000228
 8000db4:	40004800 	.word	0x40004800

08000db8 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
	...

08000dc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08c      	sub	sp, #48	; 0x30
 8000dcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dce:	f107 031c 	add.w	r3, r7, #28
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	605a      	str	r2, [r3, #4]
 8000dd8:	609a      	str	r2, [r3, #8]
 8000dda:	60da      	str	r2, [r3, #12]
 8000ddc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dde:	4b71      	ldr	r3, [pc, #452]	; (8000fa4 <MX_GPIO_Init+0x1dc>)
 8000de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de4:	4a6f      	ldr	r2, [pc, #444]	; (8000fa4 <MX_GPIO_Init+0x1dc>)
 8000de6:	f043 0304 	orr.w	r3, r3, #4
 8000dea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dee:	4b6d      	ldr	r3, [pc, #436]	; (8000fa4 <MX_GPIO_Init+0x1dc>)
 8000df0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df4:	f003 0304 	and.w	r3, r3, #4
 8000df8:	61bb      	str	r3, [r7, #24]
 8000dfa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dfc:	4b69      	ldr	r3, [pc, #420]	; (8000fa4 <MX_GPIO_Init+0x1dc>)
 8000dfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e02:	4a68      	ldr	r2, [pc, #416]	; (8000fa4 <MX_GPIO_Init+0x1dc>)
 8000e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e0c:	4b65      	ldr	r3, [pc, #404]	; (8000fa4 <MX_GPIO_Init+0x1dc>)
 8000e0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e16:	617b      	str	r3, [r7, #20]
 8000e18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1a:	4b62      	ldr	r3, [pc, #392]	; (8000fa4 <MX_GPIO_Init+0x1dc>)
 8000e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e20:	4a60      	ldr	r2, [pc, #384]	; (8000fa4 <MX_GPIO_Init+0x1dc>)
 8000e22:	f043 0301 	orr.w	r3, r3, #1
 8000e26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e2a:	4b5e      	ldr	r3, [pc, #376]	; (8000fa4 <MX_GPIO_Init+0x1dc>)
 8000e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e30:	f003 0301 	and.w	r3, r3, #1
 8000e34:	613b      	str	r3, [r7, #16]
 8000e36:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e38:	4b5a      	ldr	r3, [pc, #360]	; (8000fa4 <MX_GPIO_Init+0x1dc>)
 8000e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e3e:	4a59      	ldr	r2, [pc, #356]	; (8000fa4 <MX_GPIO_Init+0x1dc>)
 8000e40:	f043 0302 	orr.w	r3, r3, #2
 8000e44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e48:	4b56      	ldr	r3, [pc, #344]	; (8000fa4 <MX_GPIO_Init+0x1dc>)
 8000e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e4e:	f003 0302 	and.w	r3, r3, #2
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e56:	4b53      	ldr	r3, [pc, #332]	; (8000fa4 <MX_GPIO_Init+0x1dc>)
 8000e58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e5c:	4a51      	ldr	r2, [pc, #324]	; (8000fa4 <MX_GPIO_Init+0x1dc>)
 8000e5e:	f043 0308 	orr.w	r3, r3, #8
 8000e62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e66:	4b4f      	ldr	r3, [pc, #316]	; (8000fa4 <MX_GPIO_Init+0x1dc>)
 8000e68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e6c:	f003 0308 	and.w	r3, r3, #8
 8000e70:	60bb      	str	r3, [r7, #8]
 8000e72:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e74:	4b4b      	ldr	r3, [pc, #300]	; (8000fa4 <MX_GPIO_Init+0x1dc>)
 8000e76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e7a:	4a4a      	ldr	r2, [pc, #296]	; (8000fa4 <MX_GPIO_Init+0x1dc>)
 8000e7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e84:	4b47      	ldr	r3, [pc, #284]	; (8000fa4 <MX_GPIO_Init+0x1dc>)
 8000e86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e8e:	607b      	str	r3, [r7, #4]
 8000e90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e92:	4b44      	ldr	r3, [pc, #272]	; (8000fa4 <MX_GPIO_Init+0x1dc>)
 8000e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e98:	4a42      	ldr	r2, [pc, #264]	; (8000fa4 <MX_GPIO_Init+0x1dc>)
 8000e9a:	f043 0310 	orr.w	r3, r3, #16
 8000e9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ea2:	4b40      	ldr	r3, [pc, #256]	; (8000fa4 <MX_GPIO_Init+0x1dc>)
 8000ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea8:	f003 0310 	and.w	r3, r3, #16
 8000eac:	603b      	str	r3, [r7, #0]
 8000eae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f244 0101 	movw	r1, #16385	; 0x4001
 8000eb6:	483c      	ldr	r0, [pc, #240]	; (8000fa8 <MX_GPIO_Init+0x1e0>)
 8000eb8:	f001 fa98 	bl	80023ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ec2:	483a      	ldr	r0, [pc, #232]	; (8000fac <MX_GPIO_Init+0x1e4>)
 8000ec4:	f001 fa92 	bl	80023ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2102      	movs	r1, #2
 8000ecc:	4838      	ldr	r0, [pc, #224]	; (8000fb0 <MX_GPIO_Init+0x1e8>)
 8000ece:	f001 fa8d 	bl	80023ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ed2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ed6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ee0:	f107 031c 	add.w	r3, r7, #28
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4833      	ldr	r0, [pc, #204]	; (8000fb4 <MX_GPIO_Init+0x1ec>)
 8000ee8:	f001 f8d8 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000eec:	f244 0301 	movw	r3, #16385	; 0x4001
 8000ef0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efa:	2300      	movs	r3, #0
 8000efc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000efe:	f107 031c 	add.w	r3, r7, #28
 8000f02:	4619      	mov	r1, r3
 8000f04:	4828      	ldr	r0, [pc, #160]	; (8000fa8 <MX_GPIO_Init+0x1e0>)
 8000f06:	f001 f8c9 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000f0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f10:	2301      	movs	r3, #1
 8000f12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000f1c:	f107 031c 	add.w	r3, r7, #28
 8000f20:	4619      	mov	r1, r3
 8000f22:	4822      	ldr	r0, [pc, #136]	; (8000fac <MX_GPIO_Init+0x1e4>)
 8000f24:	f001 f8ba 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000f28:	2380      	movs	r3, #128	; 0x80
 8000f2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f2c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000f36:	f107 031c 	add.w	r3, r7, #28
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	481e      	ldr	r0, [pc, #120]	; (8000fb8 <MX_GPIO_Init+0x1f0>)
 8000f3e:	f001 f8ad 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000f42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f50:	f107 031c 	add.w	r3, r7, #28
 8000f54:	4619      	mov	r1, r3
 8000f56:	4819      	ldr	r0, [pc, #100]	; (8000fbc <MX_GPIO_Init+0x1f4>)
 8000f58:	f001 f8a0 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000f5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f62:	2302      	movs	r3, #2
 8000f64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000f6e:	230a      	movs	r3, #10
 8000f70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000f72:	f107 031c 	add.w	r3, r7, #28
 8000f76:	4619      	mov	r1, r3
 8000f78:	4810      	ldr	r0, [pc, #64]	; (8000fbc <MX_GPIO_Init+0x1f4>)
 8000f7a:	f001 f88f 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f82:	2301      	movs	r3, #1
 8000f84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000f8e:	f107 031c 	add.w	r3, r7, #28
 8000f92:	4619      	mov	r1, r3
 8000f94:	4806      	ldr	r0, [pc, #24]	; (8000fb0 <MX_GPIO_Init+0x1e8>)
 8000f96:	f001 f881 	bl	800209c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f9a:	bf00      	nop
 8000f9c:	3730      	adds	r7, #48	; 0x30
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	58024400 	.word	0x58024400
 8000fa8:	58020400 	.word	0x58020400
 8000fac:	58020c00 	.word	0x58020c00
 8000fb0:	58021000 	.word	0x58021000
 8000fb4:	58020800 	.word	0x58020800
 8000fb8:	58021800 	.word	0x58021800
 8000fbc:	58020000 	.word	0x58020000

08000fc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc4:	b672      	cpsid	i
}
 8000fc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <Error_Handler+0x8>
	...

08000fcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	; (8000ffc <HAL_MspInit+0x30>)
 8000fd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fd8:	4a08      	ldr	r2, [pc, #32]	; (8000ffc <HAL_MspInit+0x30>)
 8000fda:	f043 0302 	orr.w	r3, r3, #2
 8000fde:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000fe2:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_MspInit+0x30>)
 8000fe4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fe8:	f003 0302 	and.w	r3, r3, #2
 8000fec:	607b      	str	r3, [r7, #4]
 8000fee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	58024400 	.word	0x58024400

08001000 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08e      	sub	sp, #56	; 0x38
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a59      	ldr	r2, [pc, #356]	; (8001184 <HAL_ETH_MspInit+0x184>)
 800101e:	4293      	cmp	r3, r2
 8001020:	f040 80ab 	bne.w	800117a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001024:	4b58      	ldr	r3, [pc, #352]	; (8001188 <HAL_ETH_MspInit+0x188>)
 8001026:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800102a:	4a57      	ldr	r2, [pc, #348]	; (8001188 <HAL_ETH_MspInit+0x188>)
 800102c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001030:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001034:	4b54      	ldr	r3, [pc, #336]	; (8001188 <HAL_ETH_MspInit+0x188>)
 8001036:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800103a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800103e:	623b      	str	r3, [r7, #32]
 8001040:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001042:	4b51      	ldr	r3, [pc, #324]	; (8001188 <HAL_ETH_MspInit+0x188>)
 8001044:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001048:	4a4f      	ldr	r2, [pc, #316]	; (8001188 <HAL_ETH_MspInit+0x188>)
 800104a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800104e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001052:	4b4d      	ldr	r3, [pc, #308]	; (8001188 <HAL_ETH_MspInit+0x188>)
 8001054:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001058:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800105c:	61fb      	str	r3, [r7, #28]
 800105e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001060:	4b49      	ldr	r3, [pc, #292]	; (8001188 <HAL_ETH_MspInit+0x188>)
 8001062:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001066:	4a48      	ldr	r2, [pc, #288]	; (8001188 <HAL_ETH_MspInit+0x188>)
 8001068:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800106c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001070:	4b45      	ldr	r3, [pc, #276]	; (8001188 <HAL_ETH_MspInit+0x188>)
 8001072:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107a:	61bb      	str	r3, [r7, #24]
 800107c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800107e:	4b42      	ldr	r3, [pc, #264]	; (8001188 <HAL_ETH_MspInit+0x188>)
 8001080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001084:	4a40      	ldr	r2, [pc, #256]	; (8001188 <HAL_ETH_MspInit+0x188>)
 8001086:	f043 0304 	orr.w	r3, r3, #4
 800108a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800108e:	4b3e      	ldr	r3, [pc, #248]	; (8001188 <HAL_ETH_MspInit+0x188>)
 8001090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001094:	f003 0304 	and.w	r3, r3, #4
 8001098:	617b      	str	r3, [r7, #20]
 800109a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800109c:	4b3a      	ldr	r3, [pc, #232]	; (8001188 <HAL_ETH_MspInit+0x188>)
 800109e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a2:	4a39      	ldr	r2, [pc, #228]	; (8001188 <HAL_ETH_MspInit+0x188>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ac:	4b36      	ldr	r3, [pc, #216]	; (8001188 <HAL_ETH_MspInit+0x188>)
 80010ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ba:	4b33      	ldr	r3, [pc, #204]	; (8001188 <HAL_ETH_MspInit+0x188>)
 80010bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c0:	4a31      	ldr	r2, [pc, #196]	; (8001188 <HAL_ETH_MspInit+0x188>)
 80010c2:	f043 0302 	orr.w	r3, r3, #2
 80010c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ca:	4b2f      	ldr	r3, [pc, #188]	; (8001188 <HAL_ETH_MspInit+0x188>)
 80010cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d0:	f003 0302 	and.w	r3, r3, #2
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80010d8:	4b2b      	ldr	r3, [pc, #172]	; (8001188 <HAL_ETH_MspInit+0x188>)
 80010da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010de:	4a2a      	ldr	r2, [pc, #168]	; (8001188 <HAL_ETH_MspInit+0x188>)
 80010e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010e8:	4b27      	ldr	r3, [pc, #156]	; (8001188 <HAL_ETH_MspInit+0x188>)
 80010ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80010f6:	2332      	movs	r3, #50	; 0x32
 80010f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fa:	2302      	movs	r3, #2
 80010fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001102:	2300      	movs	r3, #0
 8001104:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001106:	230b      	movs	r3, #11
 8001108:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800110a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800110e:	4619      	mov	r1, r3
 8001110:	481e      	ldr	r0, [pc, #120]	; (800118c <HAL_ETH_MspInit+0x18c>)
 8001112:	f000 ffc3 	bl	800209c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001116:	2386      	movs	r3, #134	; 0x86
 8001118:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111a:	2302      	movs	r3, #2
 800111c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001122:	2300      	movs	r3, #0
 8001124:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001126:	230b      	movs	r3, #11
 8001128:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800112e:	4619      	mov	r1, r3
 8001130:	4817      	ldr	r0, [pc, #92]	; (8001190 <HAL_ETH_MspInit+0x190>)
 8001132:	f000 ffb3 	bl	800209c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001136:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800113a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113c:	2302      	movs	r3, #2
 800113e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2300      	movs	r3, #0
 8001146:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001148:	230b      	movs	r3, #11
 800114a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800114c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001150:	4619      	mov	r1, r3
 8001152:	4810      	ldr	r0, [pc, #64]	; (8001194 <HAL_ETH_MspInit+0x194>)
 8001154:	f000 ffa2 	bl	800209c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001158:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800115c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115e:	2302      	movs	r3, #2
 8001160:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001166:	2300      	movs	r3, #0
 8001168:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800116a:	230b      	movs	r3, #11
 800116c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800116e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001172:	4619      	mov	r1, r3
 8001174:	4808      	ldr	r0, [pc, #32]	; (8001198 <HAL_ETH_MspInit+0x198>)
 8001176:	f000 ff91 	bl	800209c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800117a:	bf00      	nop
 800117c:	3738      	adds	r7, #56	; 0x38
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40028000 	.word	0x40028000
 8001188:	58024400 	.word	0x58024400
 800118c:	58020800 	.word	0x58020800
 8001190:	58020000 	.word	0x58020000
 8001194:	58020400 	.word	0x58020400
 8001198:	58021800 	.word	0x58021800

0800119c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b0b8      	sub	sp, #224	; 0xe0
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011b4:	f107 0310 	add.w	r3, r7, #16
 80011b8:	22b8      	movs	r2, #184	; 0xb8
 80011ba:	2100      	movs	r1, #0
 80011bc:	4618      	mov	r0, r3
 80011be:	f005 fe59 	bl	8006e74 <memset>
  if(hi2c->Instance==I2C1)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a26      	ldr	r2, [pc, #152]	; (8001260 <HAL_I2C_MspInit+0xc4>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d145      	bne.n	8001258 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80011cc:	f04f 0208 	mov.w	r2, #8
 80011d0:	f04f 0300 	mov.w	r3, #0
 80011d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80011d8:	2300      	movs	r3, #0
 80011da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011de:	f107 0310 	add.w	r3, r7, #16
 80011e2:	4618      	mov	r0, r3
 80011e4:	f002 fea4 	bl	8003f30 <HAL_RCCEx_PeriphCLKConfig>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80011ee:	f7ff fee7 	bl	8000fc0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f2:	4b1c      	ldr	r3, [pc, #112]	; (8001264 <HAL_I2C_MspInit+0xc8>)
 80011f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011f8:	4a1a      	ldr	r2, [pc, #104]	; (8001264 <HAL_I2C_MspInit+0xc8>)
 80011fa:	f043 0302 	orr.w	r3, r3, #2
 80011fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001202:	4b18      	ldr	r3, [pc, #96]	; (8001264 <HAL_I2C_MspInit+0xc8>)
 8001204:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001208:	f003 0302 	and.w	r3, r3, #2
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001210:	23c0      	movs	r3, #192	; 0xc0
 8001212:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001216:	2312      	movs	r3, #18
 8001218:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001222:	2300      	movs	r3, #0
 8001224:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001228:	2304      	movs	r3, #4
 800122a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001232:	4619      	mov	r1, r3
 8001234:	480c      	ldr	r0, [pc, #48]	; (8001268 <HAL_I2C_MspInit+0xcc>)
 8001236:	f000 ff31 	bl	800209c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800123a:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <HAL_I2C_MspInit+0xc8>)
 800123c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001240:	4a08      	ldr	r2, [pc, #32]	; (8001264 <HAL_I2C_MspInit+0xc8>)
 8001242:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001246:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <HAL_I2C_MspInit+0xc8>)
 800124c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001250:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001254:	60bb      	str	r3, [r7, #8]
 8001256:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001258:	bf00      	nop
 800125a:	37e0      	adds	r7, #224	; 0xe0
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40005400 	.word	0x40005400
 8001264:	58024400 	.word	0x58024400
 8001268:	58020400 	.word	0x58020400

0800126c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b0b8      	sub	sp, #224	; 0xe0
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001284:	f107 0310 	add.w	r3, r7, #16
 8001288:	22b8      	movs	r2, #184	; 0xb8
 800128a:	2100      	movs	r1, #0
 800128c:	4618      	mov	r0, r3
 800128e:	f005 fdf1 	bl	8006e74 <memset>
  if(huart->Instance==USART3)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a27      	ldr	r2, [pc, #156]	; (8001334 <HAL_UART_MspInit+0xc8>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d146      	bne.n	800132a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800129c:	f04f 0202 	mov.w	r2, #2
 80012a0:	f04f 0300 	mov.w	r3, #0
 80012a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80012a8:	2300      	movs	r3, #0
 80012aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ae:	f107 0310 	add.w	r3, r7, #16
 80012b2:	4618      	mov	r0, r3
 80012b4:	f002 fe3c 	bl	8003f30 <HAL_RCCEx_PeriphCLKConfig>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80012be:	f7ff fe7f 	bl	8000fc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012c2:	4b1d      	ldr	r3, [pc, #116]	; (8001338 <HAL_UART_MspInit+0xcc>)
 80012c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012c8:	4a1b      	ldr	r2, [pc, #108]	; (8001338 <HAL_UART_MspInit+0xcc>)
 80012ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012ce:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80012d2:	4b19      	ldr	r3, [pc, #100]	; (8001338 <HAL_UART_MspInit+0xcc>)
 80012d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012e0:	4b15      	ldr	r3, [pc, #84]	; (8001338 <HAL_UART_MspInit+0xcc>)
 80012e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012e6:	4a14      	ldr	r2, [pc, #80]	; (8001338 <HAL_UART_MspInit+0xcc>)
 80012e8:	f043 0308 	orr.w	r3, r3, #8
 80012ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012f0:	4b11      	ldr	r3, [pc, #68]	; (8001338 <HAL_UART_MspInit+0xcc>)
 80012f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012f6:	f003 0308 	and.w	r3, r3, #8
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 80012fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001302:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001306:	2302      	movs	r3, #2
 8001308:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001312:	2300      	movs	r3, #0
 8001314:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001318:	2307      	movs	r3, #7
 800131a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800131e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001322:	4619      	mov	r1, r3
 8001324:	4805      	ldr	r0, [pc, #20]	; (800133c <HAL_UART_MspInit+0xd0>)
 8001326:	f000 feb9 	bl	800209c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800132a:	bf00      	nop
 800132c:	37e0      	adds	r7, #224	; 0xe0
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40004800 	.word	0x40004800
 8001338:	58024400 	.word	0x58024400
 800133c:	58020c00 	.word	0x58020c00

08001340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001344:	e7fe      	b.n	8001344 <NMI_Handler+0x4>

08001346 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800134a:	e7fe      	b.n	800134a <HardFault_Handler+0x4>

0800134c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <MemManage_Handler+0x4>

08001352 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001356:	e7fe      	b.n	8001356 <BusFault_Handler+0x4>

08001358 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800135c:	e7fe      	b.n	800135c <UsageFault_Handler+0x4>

0800135e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800138c:	f000 f916 	bl	80015bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}

08001394 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001398:	4b32      	ldr	r3, [pc, #200]	; (8001464 <SystemInit+0xd0>)
 800139a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800139e:	4a31      	ldr	r2, [pc, #196]	; (8001464 <SystemInit+0xd0>)
 80013a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013a8:	4b2f      	ldr	r3, [pc, #188]	; (8001468 <SystemInit+0xd4>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 030f 	and.w	r3, r3, #15
 80013b0:	2b06      	cmp	r3, #6
 80013b2:	d807      	bhi.n	80013c4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013b4:	4b2c      	ldr	r3, [pc, #176]	; (8001468 <SystemInit+0xd4>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f023 030f 	bic.w	r3, r3, #15
 80013bc:	4a2a      	ldr	r2, [pc, #168]	; (8001468 <SystemInit+0xd4>)
 80013be:	f043 0307 	orr.w	r3, r3, #7
 80013c2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80013c4:	4b29      	ldr	r3, [pc, #164]	; (800146c <SystemInit+0xd8>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a28      	ldr	r2, [pc, #160]	; (800146c <SystemInit+0xd8>)
 80013ca:	f043 0301 	orr.w	r3, r3, #1
 80013ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80013d0:	4b26      	ldr	r3, [pc, #152]	; (800146c <SystemInit+0xd8>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80013d6:	4b25      	ldr	r3, [pc, #148]	; (800146c <SystemInit+0xd8>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	4924      	ldr	r1, [pc, #144]	; (800146c <SystemInit+0xd8>)
 80013dc:	4b24      	ldr	r3, [pc, #144]	; (8001470 <SystemInit+0xdc>)
 80013de:	4013      	ands	r3, r2
 80013e0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013e2:	4b21      	ldr	r3, [pc, #132]	; (8001468 <SystemInit+0xd4>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0308 	and.w	r3, r3, #8
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d007      	beq.n	80013fe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013ee:	4b1e      	ldr	r3, [pc, #120]	; (8001468 <SystemInit+0xd4>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f023 030f 	bic.w	r3, r3, #15
 80013f6:	4a1c      	ldr	r2, [pc, #112]	; (8001468 <SystemInit+0xd4>)
 80013f8:	f043 0307 	orr.w	r3, r3, #7
 80013fc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80013fe:	4b1b      	ldr	r3, [pc, #108]	; (800146c <SystemInit+0xd8>)
 8001400:	2200      	movs	r2, #0
 8001402:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001404:	4b19      	ldr	r3, [pc, #100]	; (800146c <SystemInit+0xd8>)
 8001406:	2200      	movs	r2, #0
 8001408:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800140a:	4b18      	ldr	r3, [pc, #96]	; (800146c <SystemInit+0xd8>)
 800140c:	2200      	movs	r2, #0
 800140e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001410:	4b16      	ldr	r3, [pc, #88]	; (800146c <SystemInit+0xd8>)
 8001412:	4a18      	ldr	r2, [pc, #96]	; (8001474 <SystemInit+0xe0>)
 8001414:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001416:	4b15      	ldr	r3, [pc, #84]	; (800146c <SystemInit+0xd8>)
 8001418:	4a17      	ldr	r2, [pc, #92]	; (8001478 <SystemInit+0xe4>)
 800141a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800141c:	4b13      	ldr	r3, [pc, #76]	; (800146c <SystemInit+0xd8>)
 800141e:	4a17      	ldr	r2, [pc, #92]	; (800147c <SystemInit+0xe8>)
 8001420:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001422:	4b12      	ldr	r3, [pc, #72]	; (800146c <SystemInit+0xd8>)
 8001424:	2200      	movs	r2, #0
 8001426:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001428:	4b10      	ldr	r3, [pc, #64]	; (800146c <SystemInit+0xd8>)
 800142a:	4a14      	ldr	r2, [pc, #80]	; (800147c <SystemInit+0xe8>)
 800142c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800142e:	4b0f      	ldr	r3, [pc, #60]	; (800146c <SystemInit+0xd8>)
 8001430:	2200      	movs	r2, #0
 8001432:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001434:	4b0d      	ldr	r3, [pc, #52]	; (800146c <SystemInit+0xd8>)
 8001436:	4a11      	ldr	r2, [pc, #68]	; (800147c <SystemInit+0xe8>)
 8001438:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800143a:	4b0c      	ldr	r3, [pc, #48]	; (800146c <SystemInit+0xd8>)
 800143c:	2200      	movs	r2, #0
 800143e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001440:	4b0a      	ldr	r3, [pc, #40]	; (800146c <SystemInit+0xd8>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a09      	ldr	r2, [pc, #36]	; (800146c <SystemInit+0xd8>)
 8001446:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800144a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800144c:	4b07      	ldr	r3, [pc, #28]	; (800146c <SystemInit+0xd8>)
 800144e:	2200      	movs	r2, #0
 8001450:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001452:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <SystemInit+0xec>)
 8001454:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001458:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800145a:	bf00      	nop
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	e000ed00 	.word	0xe000ed00
 8001468:	52002000 	.word	0x52002000
 800146c:	58024400 	.word	0x58024400
 8001470:	eaf6ed7f 	.word	0xeaf6ed7f
 8001474:	02020200 	.word	0x02020200
 8001478:	01ff0000 	.word	0x01ff0000
 800147c:	01010280 	.word	0x01010280
 8001480:	52004000 	.word	0x52004000

08001484 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001484:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001488:	f7ff ff84 	bl	8001394 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800148c:	480c      	ldr	r0, [pc, #48]	; (80014c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800148e:	490d      	ldr	r1, [pc, #52]	; (80014c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001490:	4a0d      	ldr	r2, [pc, #52]	; (80014c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001492:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001494:	e002      	b.n	800149c <LoopCopyDataInit>

08001496 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001496:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001498:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800149a:	3304      	adds	r3, #4

0800149c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800149c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800149e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014a0:	d3f9      	bcc.n	8001496 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014a2:	4a0a      	ldr	r2, [pc, #40]	; (80014cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014a4:	4c0a      	ldr	r4, [pc, #40]	; (80014d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014a8:	e001      	b.n	80014ae <LoopFillZerobss>

080014aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014ac:	3204      	adds	r2, #4

080014ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014b0:	d3fb      	bcc.n	80014aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014b2:	f005 fce7 	bl	8006e84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014b6:	f7ff fadf 	bl	8000a78 <main>
  bx  lr
 80014ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014bc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80014c0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80014c4:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80014c8:	08006f2c 	.word	0x08006f2c
  ldr r2, =_sbss
 80014cc:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 80014d0:	240002d0 	.word	0x240002d0

080014d4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014d4:	e7fe      	b.n	80014d4 <ADC3_IRQHandler>
	...

080014d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014de:	2003      	movs	r0, #3
 80014e0:	f000 f976 	bl	80017d0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80014e4:	f002 fb4e 	bl	8003b84 <HAL_RCC_GetSysClockFreq>
 80014e8:	4602      	mov	r2, r0
 80014ea:	4b15      	ldr	r3, [pc, #84]	; (8001540 <HAL_Init+0x68>)
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	0a1b      	lsrs	r3, r3, #8
 80014f0:	f003 030f 	and.w	r3, r3, #15
 80014f4:	4913      	ldr	r1, [pc, #76]	; (8001544 <HAL_Init+0x6c>)
 80014f6:	5ccb      	ldrb	r3, [r1, r3]
 80014f8:	f003 031f 	and.w	r3, r3, #31
 80014fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001500:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001502:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <HAL_Init+0x68>)
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	f003 030f 	and.w	r3, r3, #15
 800150a:	4a0e      	ldr	r2, [pc, #56]	; (8001544 <HAL_Init+0x6c>)
 800150c:	5cd3      	ldrb	r3, [r2, r3]
 800150e:	f003 031f 	and.w	r3, r3, #31
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	fa22 f303 	lsr.w	r3, r2, r3
 8001518:	4a0b      	ldr	r2, [pc, #44]	; (8001548 <HAL_Init+0x70>)
 800151a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800151c:	4a0b      	ldr	r2, [pc, #44]	; (800154c <HAL_Init+0x74>)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001522:	2000      	movs	r0, #0
 8001524:	f000 f814 	bl	8001550 <HAL_InitTick>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e002      	b.n	8001538 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001532:	f7ff fd4b 	bl	8000fcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001536:	2300      	movs	r3, #0
}
 8001538:	4618      	mov	r0, r3
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	58024400 	.word	0x58024400
 8001544:	08006ee4 	.word	0x08006ee4
 8001548:	24000004 	.word	0x24000004
 800154c:	24000000 	.word	0x24000000

08001550 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001558:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <HAL_InitTick+0x60>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d101      	bne.n	8001564 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e021      	b.n	80015a8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001564:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <HAL_InitTick+0x64>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <HAL_InitTick+0x60>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	4619      	mov	r1, r3
 800156e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001572:	fbb3 f3f1 	udiv	r3, r3, r1
 8001576:	fbb2 f3f3 	udiv	r3, r2, r3
 800157a:	4618      	mov	r0, r3
 800157c:	f000 f94d 	bl	800181a <HAL_SYSTICK_Config>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e00e      	b.n	80015a8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2b0f      	cmp	r3, #15
 800158e:	d80a      	bhi.n	80015a6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001590:	2200      	movs	r2, #0
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001598:	f000 f925 	bl	80017e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800159c:	4a06      	ldr	r2, [pc, #24]	; (80015b8 <HAL_InitTick+0x68>)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015a2:	2300      	movs	r3, #0
 80015a4:	e000      	b.n	80015a8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	2400000c 	.word	0x2400000c
 80015b4:	24000000 	.word	0x24000000
 80015b8:	24000008 	.word	0x24000008

080015bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015c0:	4b06      	ldr	r3, [pc, #24]	; (80015dc <HAL_IncTick+0x20>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	461a      	mov	r2, r3
 80015c6:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <HAL_IncTick+0x24>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4413      	add	r3, r2
 80015cc:	4a04      	ldr	r2, [pc, #16]	; (80015e0 <HAL_IncTick+0x24>)
 80015ce:	6013      	str	r3, [r2, #0]
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	2400000c 	.word	0x2400000c
 80015e0:	240002cc 	.word	0x240002cc

080015e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  return uwTick;
 80015e8:	4b03      	ldr	r3, [pc, #12]	; (80015f8 <HAL_GetTick+0x14>)
 80015ea:	681b      	ldr	r3, [r3, #0]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	240002cc 	.word	0x240002cc

080015fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001604:	f7ff ffee 	bl	80015e4 <HAL_GetTick>
 8001608:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001614:	d005      	beq.n	8001622 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001616:	4b0a      	ldr	r3, [pc, #40]	; (8001640 <HAL_Delay+0x44>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	461a      	mov	r2, r3
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	4413      	add	r3, r2
 8001620:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001622:	bf00      	nop
 8001624:	f7ff ffde 	bl	80015e4 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	429a      	cmp	r2, r3
 8001632:	d8f7      	bhi.n	8001624 <HAL_Delay+0x28>
  {
  }
}
 8001634:	bf00      	nop
 8001636:	bf00      	nop
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	2400000c 	.word	0x2400000c

08001644 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001654:	4904      	ldr	r1, [pc, #16]	; (8001668 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4313      	orrs	r3, r2
 800165a:	604b      	str	r3, [r1, #4]
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	58000400 	.word	0x58000400

0800166c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800167c:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <__NVIC_SetPriorityGrouping+0x40>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001682:	68ba      	ldr	r2, [r7, #8]
 8001684:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001688:	4013      	ands	r3, r2
 800168a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <__NVIC_SetPriorityGrouping+0x44>)
 8001696:	4313      	orrs	r3, r2
 8001698:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800169a:	4a04      	ldr	r2, [pc, #16]	; (80016ac <__NVIC_SetPriorityGrouping+0x40>)
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	60d3      	str	r3, [r2, #12]
}
 80016a0:	bf00      	nop
 80016a2:	3714      	adds	r7, #20
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	e000ed00 	.word	0xe000ed00
 80016b0:	05fa0000 	.word	0x05fa0000

080016b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016b8:	4b04      	ldr	r3, [pc, #16]	; (80016cc <__NVIC_GetPriorityGrouping+0x18>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	0a1b      	lsrs	r3, r3, #8
 80016be:	f003 0307 	and.w	r3, r3, #7
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	6039      	str	r1, [r7, #0]
 80016da:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	db0a      	blt.n	80016fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	490c      	ldr	r1, [pc, #48]	; (800171c <__NVIC_SetPriority+0x4c>)
 80016ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ee:	0112      	lsls	r2, r2, #4
 80016f0:	b2d2      	uxtb	r2, r2
 80016f2:	440b      	add	r3, r1
 80016f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016f8:	e00a      	b.n	8001710 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	4908      	ldr	r1, [pc, #32]	; (8001720 <__NVIC_SetPriority+0x50>)
 8001700:	88fb      	ldrh	r3, [r7, #6]
 8001702:	f003 030f 	and.w	r3, r3, #15
 8001706:	3b04      	subs	r3, #4
 8001708:	0112      	lsls	r2, r2, #4
 800170a:	b2d2      	uxtb	r2, r2
 800170c:	440b      	add	r3, r1
 800170e:	761a      	strb	r2, [r3, #24]
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	e000e100 	.word	0xe000e100
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001724:	b480      	push	{r7}
 8001726:	b089      	sub	sp, #36	; 0x24
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	f1c3 0307 	rsb	r3, r3, #7
 800173e:	2b04      	cmp	r3, #4
 8001740:	bf28      	it	cs
 8001742:	2304      	movcs	r3, #4
 8001744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	3304      	adds	r3, #4
 800174a:	2b06      	cmp	r3, #6
 800174c:	d902      	bls.n	8001754 <NVIC_EncodePriority+0x30>
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	3b03      	subs	r3, #3
 8001752:	e000      	b.n	8001756 <NVIC_EncodePriority+0x32>
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001758:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	43da      	mvns	r2, r3
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	401a      	ands	r2, r3
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800176c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	fa01 f303 	lsl.w	r3, r1, r3
 8001776:	43d9      	mvns	r1, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800177c:	4313      	orrs	r3, r2
         );
}
 800177e:	4618      	mov	r0, r3
 8001780:	3724      	adds	r7, #36	; 0x24
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
	...

0800178c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3b01      	subs	r3, #1
 8001798:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800179c:	d301      	bcc.n	80017a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800179e:	2301      	movs	r3, #1
 80017a0:	e00f      	b.n	80017c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017a2:	4a0a      	ldr	r2, [pc, #40]	; (80017cc <SysTick_Config+0x40>)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3b01      	subs	r3, #1
 80017a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017aa:	210f      	movs	r1, #15
 80017ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017b0:	f7ff ff8e 	bl	80016d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017b4:	4b05      	ldr	r3, [pc, #20]	; (80017cc <SysTick_Config+0x40>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ba:	4b04      	ldr	r3, [pc, #16]	; (80017cc <SysTick_Config+0x40>)
 80017bc:	2207      	movs	r2, #7
 80017be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	e000e010 	.word	0xe000e010

080017d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7ff ff47 	bl	800166c <__NVIC_SetPriorityGrouping>
}
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b086      	sub	sp, #24
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	4603      	mov	r3, r0
 80017ee:	60b9      	str	r1, [r7, #8]
 80017f0:	607a      	str	r2, [r7, #4]
 80017f2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017f4:	f7ff ff5e 	bl	80016b4 <__NVIC_GetPriorityGrouping>
 80017f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	68b9      	ldr	r1, [r7, #8]
 80017fe:	6978      	ldr	r0, [r7, #20]
 8001800:	f7ff ff90 	bl	8001724 <NVIC_EncodePriority>
 8001804:	4602      	mov	r2, r0
 8001806:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800180a:	4611      	mov	r1, r2
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff ff5f 	bl	80016d0 <__NVIC_SetPriority>
}
 8001812:	bf00      	nop
 8001814:	3718      	adds	r7, #24
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b082      	sub	sp, #8
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7ff ffb2 	bl	800178c <SysTick_Config>
 8001828:	4603      	mov	r3, r0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
	...

08001834 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e0e3      	b.n	8001a0e <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800184c:	2b00      	cmp	r3, #0
 800184e:	d106      	bne.n	800185e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2223      	movs	r2, #35	; 0x23
 8001854:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f7ff fbd1 	bl	8001000 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800185e:	4b6e      	ldr	r3, [pc, #440]	; (8001a18 <HAL_ETH_Init+0x1e4>)
 8001860:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001864:	4a6c      	ldr	r2, [pc, #432]	; (8001a18 <HAL_ETH_Init+0x1e4>)
 8001866:	f043 0302 	orr.w	r3, r3, #2
 800186a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800186e:	4b6a      	ldr	r3, [pc, #424]	; (8001a18 <HAL_ETH_Init+0x1e4>)
 8001870:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001874:	f003 0302 	and.w	r3, r3, #2
 8001878:	60bb      	str	r3, [r7, #8]
 800187a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	7a1b      	ldrb	r3, [r3, #8]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d103      	bne.n	800188c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001884:	2000      	movs	r0, #0
 8001886:	f7ff fedd 	bl	8001644 <HAL_SYSCFG_ETHInterfaceSelect>
 800188a:	e003      	b.n	8001894 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800188c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001890:	f7ff fed8 	bl	8001644 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001894:	4b61      	ldr	r3, [pc, #388]	; (8001a1c <HAL_ETH_Init+0x1e8>)
 8001896:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	6812      	ldr	r2, [r2, #0]
 80018a6:	f043 0301 	orr.w	r3, r3, #1
 80018aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018ae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018b0:	f7ff fe98 	bl	80015e4 <HAL_GetTick>
 80018b4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80018b6:	e011      	b.n	80018dc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80018b8:	f7ff fe94 	bl	80015e4 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80018c6:	d909      	bls.n	80018dc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2204      	movs	r2, #4
 80018cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	22e0      	movs	r2, #224	; 0xe0
 80018d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e098      	b.n	8001a0e <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1e4      	bne.n	80018b8 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f000 f89e 	bl	8001a30 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80018f4:	f002 fac0 	bl	8003e78 <HAL_RCC_GetHCLKFreq>
 80018f8:	4603      	mov	r3, r0
 80018fa:	4a49      	ldr	r2, [pc, #292]	; (8001a20 <HAL_ETH_Init+0x1ec>)
 80018fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001900:	0c9a      	lsrs	r2, r3, #18
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	3a01      	subs	r2, #1
 8001908:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f000 fa81 	bl	8001e14 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800191a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800191e:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	6812      	ldr	r2, [r2, #0]
 8001926:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800192a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800192e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	695b      	ldr	r3, [r3, #20]
 8001936:	f003 0303 	and.w	r3, r3, #3
 800193a:	2b00      	cmp	r3, #0
 800193c:	d009      	beq.n	8001952 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2201      	movs	r2, #1
 8001942:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	22e0      	movs	r2, #224	; 0xe0
 800194a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e05d      	b.n	8001a0e <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800195a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800195e:	4b31      	ldr	r3, [pc, #196]	; (8001a24 <HAL_ETH_Init+0x1f0>)
 8001960:	4013      	ands	r3, r2
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	6952      	ldr	r2, [r2, #20]
 8001966:	0051      	lsls	r1, r2, #1
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	6812      	ldr	r2, [r2, #0]
 800196c:	430b      	orrs	r3, r1
 800196e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001972:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f000 fae9 	bl	8001f4e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f000 fb2f 	bl	8001fe0 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	3305      	adds	r3, #5
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	021a      	lsls	r2, r3, #8
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	3304      	adds	r3, #4
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	4619      	mov	r1, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	430a      	orrs	r2, r1
 800199c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	3303      	adds	r3, #3
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	061a      	lsls	r2, r3, #24
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	3302      	adds	r3, #2
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	041b      	lsls	r3, r3, #16
 80019b4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	3301      	adds	r3, #1
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80019c0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80019ce:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80019d0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <HAL_ETH_Init+0x1f4>)
 80019e2:	430b      	orrs	r3, r1
 80019e4:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	4b0d      	ldr	r3, [pc, #52]	; (8001a2c <HAL_ETH_Init+0x1f8>)
 80019f6:	430b      	orrs	r3, r1
 80019f8:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2210      	movs	r2, #16
 8001a08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	58024400 	.word	0x58024400
 8001a1c:	58000400 	.word	0x58000400
 8001a20:	431bde83 	.word	0x431bde83
 8001a24:	ffff8001 	.word	0xffff8001
 8001a28:	0c020060 	.word	0x0c020060
 8001a2c:	0c20c000 	.word	0x0c20c000

08001a30 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a40:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a48:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001a4a:	f002 fa15 	bl	8003e78 <HAL_RCC_GetHCLKFreq>
 8001a4e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	4a1a      	ldr	r2, [pc, #104]	; (8001abc <HAL_ETH_SetMDIOClockRange+0x8c>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d804      	bhi.n	8001a62 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	e022      	b.n	8001aa8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	4a16      	ldr	r2, [pc, #88]	; (8001ac0 <HAL_ETH_SetMDIOClockRange+0x90>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d204      	bcs.n	8001a74 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	e019      	b.n	8001aa8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	4a13      	ldr	r2, [pc, #76]	; (8001ac4 <HAL_ETH_SetMDIOClockRange+0x94>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d915      	bls.n	8001aa8 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	4a12      	ldr	r2, [pc, #72]	; (8001ac8 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d804      	bhi.n	8001a8e <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	e00c      	b.n	8001aa8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	4a0e      	ldr	r2, [pc, #56]	; (8001acc <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d804      	bhi.n	8001aa0 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	e003      	b.n	8001aa8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8001aa6:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	68fa      	ldr	r2, [r7, #12]
 8001aae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001ab2:	bf00      	nop
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	02160ebf 	.word	0x02160ebf
 8001ac0:	03938700 	.word	0x03938700
 8001ac4:	05f5e0ff 	.word	0x05f5e0ff
 8001ac8:	08f0d17f 	.word	0x08f0d17f
 8001acc:	0ee6b27f 	.word	0x0ee6b27f

08001ad0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001ae2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	791b      	ldrb	r3, [r3, #4]
 8001ae8:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001aea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	7b1b      	ldrb	r3, [r3, #12]
 8001af0:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001af2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	7b5b      	ldrb	r3, [r3, #13]
 8001af8:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001afa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	7b9b      	ldrb	r3, [r3, #14]
 8001b00:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001b02:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	7bdb      	ldrb	r3, [r3, #15]
 8001b08:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001b0a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	7c12      	ldrb	r2, [r2, #16]
 8001b10:	2a00      	cmp	r2, #0
 8001b12:	d102      	bne.n	8001b1a <ETH_SetMACConfig+0x4a>
 8001b14:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001b18:	e000      	b.n	8001b1c <ETH_SetMACConfig+0x4c>
 8001b1a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001b1c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	7c52      	ldrb	r2, [r2, #17]
 8001b22:	2a00      	cmp	r2, #0
 8001b24:	d102      	bne.n	8001b2c <ETH_SetMACConfig+0x5c>
 8001b26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b2a:	e000      	b.n	8001b2e <ETH_SetMACConfig+0x5e>
 8001b2c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001b2e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	7c9b      	ldrb	r3, [r3, #18]
 8001b34:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001b36:	431a      	orrs	r2, r3
               macconf->Speed |
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001b3c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001b42:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	7f1b      	ldrb	r3, [r3, #28]
 8001b48:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001b4a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	7f5b      	ldrb	r3, [r3, #29]
 8001b50:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001b52:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001b54:	683a      	ldr	r2, [r7, #0]
 8001b56:	7f92      	ldrb	r2, [r2, #30]
 8001b58:	2a00      	cmp	r2, #0
 8001b5a:	d102      	bne.n	8001b62 <ETH_SetMACConfig+0x92>
 8001b5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b60:	e000      	b.n	8001b64 <ETH_SetMACConfig+0x94>
 8001b62:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001b64:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	7fdb      	ldrb	r3, [r3, #31]
 8001b6a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001b6c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001b74:	2a00      	cmp	r2, #0
 8001b76:	d102      	bne.n	8001b7e <ETH_SetMACConfig+0xae>
 8001b78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b7c:	e000      	b.n	8001b80 <ETH_SetMACConfig+0xb0>
 8001b7e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001b80:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001b86:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001b8e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001b90:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001b96:	4313      	orrs	r3, r2
 8001b98:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	4b56      	ldr	r3, [pc, #344]	; (8001cfc <ETH_SetMACConfig+0x22c>)
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	6812      	ldr	r2, [r2, #0]
 8001ba8:	68f9      	ldr	r1, [r7, #12]
 8001baa:	430b      	orrs	r3, r1
 8001bac:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bb2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001bba:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001bbc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bc4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001bc6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001bce:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001bd0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001bd8:	2a00      	cmp	r2, #0
 8001bda:	d102      	bne.n	8001be2 <ETH_SetMACConfig+0x112>
 8001bdc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001be0:	e000      	b.n	8001be4 <ETH_SetMACConfig+0x114>
 8001be2:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001be4:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001bea:	4313      	orrs	r3, r2
 8001bec:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	685a      	ldr	r2, [r3, #4]
 8001bf4:	4b42      	ldr	r3, [pc, #264]	; (8001d00 <ETH_SetMACConfig+0x230>)
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	6812      	ldr	r2, [r2, #0]
 8001bfc:	68f9      	ldr	r1, [r7, #12]
 8001bfe:	430b      	orrs	r3, r1
 8001c00:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c08:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68da      	ldr	r2, [r3, #12]
 8001c18:	4b3a      	ldr	r3, [pc, #232]	; (8001d04 <ETH_SetMACConfig+0x234>)
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	6812      	ldr	r2, [r2, #0]
 8001c20:	68f9      	ldr	r1, [r7, #12]
 8001c22:	430b      	orrs	r3, r1
 8001c24:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001c2c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001c32:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001c3a:	2a00      	cmp	r2, #0
 8001c3c:	d101      	bne.n	8001c42 <ETH_SetMACConfig+0x172>
 8001c3e:	2280      	movs	r2, #128	; 0x80
 8001c40:	e000      	b.n	8001c44 <ETH_SetMACConfig+0x174>
 8001c42:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001c44:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c4a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001c56:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	6812      	ldr	r2, [r2, #0]
 8001c60:	68f9      	ldr	r1, [r7, #12]
 8001c62:	430b      	orrs	r3, r1
 8001c64:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001c6c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001c74:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001c76:	4313      	orrs	r3, r2
 8001c78:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c82:	f023 0103 	bic.w	r1, r3, #3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001c9a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001cb6:	2a00      	cmp	r2, #0
 8001cb8:	d101      	bne.n	8001cbe <ETH_SetMACConfig+0x1ee>
 8001cba:	2240      	movs	r2, #64	; 0x40
 8001cbc:	e000      	b.n	8001cc0 <ETH_SetMACConfig+0x1f0>
 8001cbe:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001cc0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001cc8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001cca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001cd2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001ce0:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68fa      	ldr	r2, [r7, #12]
 8001cea:	430a      	orrs	r2, r1
 8001cec:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001cf0:	bf00      	nop
 8001cf2:	3714      	adds	r7, #20
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	00048083 	.word	0x00048083
 8001d00:	c0f88000 	.word	0xc0f88000
 8001d04:	fffffef0 	.word	0xfffffef0

08001d08 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	4b38      	ldr	r3, [pc, #224]	; (8001e00 <ETH_SetDMAConfig+0xf8>)
 8001d1e:	4013      	ands	r3, r2
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	6811      	ldr	r1, [r2, #0]
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	6812      	ldr	r2, [r2, #0]
 8001d28:	430b      	orrs	r3, r1
 8001d2a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d2e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	791b      	ldrb	r3, [r3, #4]
 8001d34:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001d3a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	7b1b      	ldrb	r3, [r3, #12]
 8001d40:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001d42:	4313      	orrs	r3, r2
 8001d44:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d4e:	685a      	ldr	r2, [r3, #4]
 8001d50:	4b2c      	ldr	r3, [pc, #176]	; (8001e04 <ETH_SetDMAConfig+0xfc>)
 8001d52:	4013      	ands	r3, r2
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	6812      	ldr	r2, [r2, #0]
 8001d58:	68f9      	ldr	r1, [r7, #12]
 8001d5a:	430b      	orrs	r3, r1
 8001d5c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d60:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	7b5b      	ldrb	r3, [r3, #13]
 8001d66:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d78:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8001d7c:	4b22      	ldr	r3, [pc, #136]	; (8001e08 <ETH_SetDMAConfig+0x100>)
 8001d7e:	4013      	ands	r3, r2
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	6812      	ldr	r2, [r2, #0]
 8001d84:	68f9      	ldr	r1, [r7, #12]
 8001d86:	430b      	orrs	r3, r1
 8001d88:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d8c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	7d1b      	ldrb	r3, [r3, #20]
 8001d98:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001d9a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	7f5b      	ldrb	r3, [r3, #29]
 8001da0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001da2:	4313      	orrs	r3, r2
 8001da4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dae:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001db2:	4b16      	ldr	r3, [pc, #88]	; (8001e0c <ETH_SetDMAConfig+0x104>)
 8001db4:	4013      	ands	r3, r2
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	6812      	ldr	r2, [r2, #0]
 8001dba:	68f9      	ldr	r1, [r7, #12]
 8001dbc:	430b      	orrs	r3, r1
 8001dbe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001dc2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	7f1b      	ldrb	r3, [r3, #28]
 8001dca:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ddc:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001de0:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <ETH_SetDMAConfig+0x108>)
 8001de2:	4013      	ands	r3, r2
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	6812      	ldr	r2, [r2, #0]
 8001de8:	68f9      	ldr	r1, [r7, #12]
 8001dea:	430b      	orrs	r3, r1
 8001dec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001df0:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8001df4:	bf00      	nop
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	ffff87fd 	.word	0xffff87fd
 8001e04:	ffff2ffe 	.word	0xffff2ffe
 8001e08:	fffec000 	.word	0xfffec000
 8001e0c:	ffc0efef 	.word	0xffc0efef
 8001e10:	7fc0ffff 	.word	0x7fc0ffff

08001e14 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b0a4      	sub	sp, #144	; 0x90
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001e22:	2300      	movs	r3, #0
 8001e24:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001e26:	2300      	movs	r3, #0
 8001e28:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001e32:	2301      	movs	r3, #1
 8001e34:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001e44:	2300      	movs	r3, #0
 8001e46:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001e50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e54:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001e56:	2300      	movs	r3, #0
 8001e58:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001e60:	2300      	movs	r3, #0
 8001e62:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001e66:	2300      	movs	r3, #0
 8001e68:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001e6c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001e70:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001e72:	2300      	movs	r3, #0
 8001e74:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001e82:	2300      	movs	r3, #0
 8001e84:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001e92:	2300      	movs	r3, #0
 8001e94:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001e96:	2300      	movs	r3, #0
 8001e98:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001eac:	2320      	movs	r3, #32
 8001eae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001ebe:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001ec4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ec8:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001edc:	2300      	movs	r3, #0
 8001ede:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001ef8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001efc:	4619      	mov	r1, r3
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7ff fde6 	bl	8001ad0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001f04:	2301      	movs	r3, #1
 8001f06:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001f10:	2300      	movs	r3, #0
 8001f12:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001f16:	2300      	movs	r3, #0
 8001f18:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001f1e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f22:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001f24:	2300      	movs	r3, #0
 8001f26:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001f28:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f2c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001f34:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001f38:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001f3a:	f107 0308 	add.w	r3, r7, #8
 8001f3e:	4619      	mov	r1, r3
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f7ff fee1 	bl	8001d08 <ETH_SetDMAConfig>
}
 8001f46:	bf00      	nop
 8001f48:	3790      	adds	r7, #144	; 0x90
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b085      	sub	sp, #20
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001f56:	2300      	movs	r3, #0
 8001f58:	60fb      	str	r3, [r7, #12]
 8001f5a:	e01d      	b.n	8001f98 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	68d9      	ldr	r1, [r3, #12]
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	4613      	mov	r3, r2
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	4413      	add	r3, r2
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	440b      	add	r3, r1
 8001f6c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	2200      	movs	r2, #0
 8001f78:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	2200      	movs	r2, #0
 8001f84:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001f86:	68b9      	ldr	r1, [r7, #8]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	3206      	adds	r2, #6
 8001f8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	3301      	adds	r3, #1
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2b03      	cmp	r3, #3
 8001f9c:	d9de      	bls.n	8001f5c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fac:	461a      	mov	r2, r3
 8001fae:	2303      	movs	r3, #3
 8001fb0:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68da      	ldr	r2, [r3, #12]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fc0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	68da      	ldr	r2, [r3, #12]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fd0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8001fd4:	bf00      	nop
 8001fd6:	3714      	adds	r7, #20
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001fe8:	2300      	movs	r3, #0
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	e023      	b.n	8002036 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6919      	ldr	r1, [r3, #16]
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	4413      	add	r3, r2
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	440b      	add	r3, r1
 8001ffe:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	2200      	movs	r2, #0
 800200a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	2200      	movs	r2, #0
 8002010:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	2200      	movs	r2, #0
 8002016:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	2200      	movs	r2, #0
 800201c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	2200      	movs	r2, #0
 8002022:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002024:	68b9      	ldr	r1, [r7, #8]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	3212      	adds	r2, #18
 800202c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	3301      	adds	r3, #1
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2b03      	cmp	r3, #3
 800203a:	d9d8      	bls.n	8001fee <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002062:	461a      	mov	r2, r3
 8002064:	2303      	movs	r3, #3
 8002066:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	691a      	ldr	r2, [r3, #16]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002076:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800208a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800208e:	bf00      	nop
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
	...

0800209c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800209c:	b480      	push	{r7}
 800209e:	b089      	sub	sp, #36	; 0x24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80020a6:	2300      	movs	r3, #0
 80020a8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80020aa:	4b86      	ldr	r3, [pc, #536]	; (80022c4 <HAL_GPIO_Init+0x228>)
 80020ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80020ae:	e18c      	b.n	80023ca <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	2101      	movs	r1, #1
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	fa01 f303 	lsl.w	r3, r1, r3
 80020bc:	4013      	ands	r3, r2
 80020be:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f000 817e 	beq.w	80023c4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f003 0303 	and.w	r3, r3, #3
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d005      	beq.n	80020e0 <HAL_GPIO_Init+0x44>
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f003 0303 	and.w	r3, r3, #3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d130      	bne.n	8002142 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	2203      	movs	r2, #3
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	43db      	mvns	r3, r3
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4013      	ands	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	68da      	ldr	r2, [r3, #12]
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4313      	orrs	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002116:	2201      	movs	r2, #1
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	43db      	mvns	r3, r3
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4013      	ands	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	091b      	lsrs	r3, r3, #4
 800212c:	f003 0201 	and.w	r2, r3, #1
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4313      	orrs	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f003 0303 	and.w	r3, r3, #3
 800214a:	2b03      	cmp	r3, #3
 800214c:	d017      	beq.n	800217e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	2203      	movs	r2, #3
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43db      	mvns	r3, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4013      	ands	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	689a      	ldr	r2, [r3, #8]
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	4313      	orrs	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f003 0303 	and.w	r3, r3, #3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d123      	bne.n	80021d2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	08da      	lsrs	r2, r3, #3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	3208      	adds	r2, #8
 8002192:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002196:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	220f      	movs	r2, #15
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	43db      	mvns	r3, r3
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	4013      	ands	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	691a      	ldr	r2, [r3, #16]
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	f003 0307 	and.w	r3, r3, #7
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	08da      	lsrs	r2, r3, #3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3208      	adds	r2, #8
 80021cc:	69b9      	ldr	r1, [r7, #24]
 80021ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	2203      	movs	r2, #3
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43db      	mvns	r3, r3
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4013      	ands	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f003 0203 	and.w	r2, r3, #3
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800220e:	2b00      	cmp	r3, #0
 8002210:	f000 80d8 	beq.w	80023c4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002214:	4b2c      	ldr	r3, [pc, #176]	; (80022c8 <HAL_GPIO_Init+0x22c>)
 8002216:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800221a:	4a2b      	ldr	r2, [pc, #172]	; (80022c8 <HAL_GPIO_Init+0x22c>)
 800221c:	f043 0302 	orr.w	r3, r3, #2
 8002220:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002224:	4b28      	ldr	r3, [pc, #160]	; (80022c8 <HAL_GPIO_Init+0x22c>)
 8002226:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002232:	4a26      	ldr	r2, [pc, #152]	; (80022cc <HAL_GPIO_Init+0x230>)
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	089b      	lsrs	r3, r3, #2
 8002238:	3302      	adds	r3, #2
 800223a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800223e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	f003 0303 	and.w	r3, r3, #3
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	220f      	movs	r2, #15
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43db      	mvns	r3, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4013      	ands	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a1d      	ldr	r2, [pc, #116]	; (80022d0 <HAL_GPIO_Init+0x234>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d04a      	beq.n	80022f4 <HAL_GPIO_Init+0x258>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a1c      	ldr	r2, [pc, #112]	; (80022d4 <HAL_GPIO_Init+0x238>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d02b      	beq.n	80022be <HAL_GPIO_Init+0x222>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a1b      	ldr	r2, [pc, #108]	; (80022d8 <HAL_GPIO_Init+0x23c>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d025      	beq.n	80022ba <HAL_GPIO_Init+0x21e>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a1a      	ldr	r2, [pc, #104]	; (80022dc <HAL_GPIO_Init+0x240>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d01f      	beq.n	80022b6 <HAL_GPIO_Init+0x21a>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a19      	ldr	r2, [pc, #100]	; (80022e0 <HAL_GPIO_Init+0x244>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d019      	beq.n	80022b2 <HAL_GPIO_Init+0x216>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a18      	ldr	r2, [pc, #96]	; (80022e4 <HAL_GPIO_Init+0x248>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d013      	beq.n	80022ae <HAL_GPIO_Init+0x212>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a17      	ldr	r2, [pc, #92]	; (80022e8 <HAL_GPIO_Init+0x24c>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d00d      	beq.n	80022aa <HAL_GPIO_Init+0x20e>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a16      	ldr	r2, [pc, #88]	; (80022ec <HAL_GPIO_Init+0x250>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d007      	beq.n	80022a6 <HAL_GPIO_Init+0x20a>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a15      	ldr	r2, [pc, #84]	; (80022f0 <HAL_GPIO_Init+0x254>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d101      	bne.n	80022a2 <HAL_GPIO_Init+0x206>
 800229e:	2309      	movs	r3, #9
 80022a0:	e029      	b.n	80022f6 <HAL_GPIO_Init+0x25a>
 80022a2:	230a      	movs	r3, #10
 80022a4:	e027      	b.n	80022f6 <HAL_GPIO_Init+0x25a>
 80022a6:	2307      	movs	r3, #7
 80022a8:	e025      	b.n	80022f6 <HAL_GPIO_Init+0x25a>
 80022aa:	2306      	movs	r3, #6
 80022ac:	e023      	b.n	80022f6 <HAL_GPIO_Init+0x25a>
 80022ae:	2305      	movs	r3, #5
 80022b0:	e021      	b.n	80022f6 <HAL_GPIO_Init+0x25a>
 80022b2:	2304      	movs	r3, #4
 80022b4:	e01f      	b.n	80022f6 <HAL_GPIO_Init+0x25a>
 80022b6:	2303      	movs	r3, #3
 80022b8:	e01d      	b.n	80022f6 <HAL_GPIO_Init+0x25a>
 80022ba:	2302      	movs	r3, #2
 80022bc:	e01b      	b.n	80022f6 <HAL_GPIO_Init+0x25a>
 80022be:	2301      	movs	r3, #1
 80022c0:	e019      	b.n	80022f6 <HAL_GPIO_Init+0x25a>
 80022c2:	bf00      	nop
 80022c4:	58000080 	.word	0x58000080
 80022c8:	58024400 	.word	0x58024400
 80022cc:	58000400 	.word	0x58000400
 80022d0:	58020000 	.word	0x58020000
 80022d4:	58020400 	.word	0x58020400
 80022d8:	58020800 	.word	0x58020800
 80022dc:	58020c00 	.word	0x58020c00
 80022e0:	58021000 	.word	0x58021000
 80022e4:	58021400 	.word	0x58021400
 80022e8:	58021800 	.word	0x58021800
 80022ec:	58021c00 	.word	0x58021c00
 80022f0:	58022400 	.word	0x58022400
 80022f4:	2300      	movs	r3, #0
 80022f6:	69fa      	ldr	r2, [r7, #28]
 80022f8:	f002 0203 	and.w	r2, r2, #3
 80022fc:	0092      	lsls	r2, r2, #2
 80022fe:	4093      	lsls	r3, r2
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4313      	orrs	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002306:	4938      	ldr	r1, [pc, #224]	; (80023e8 <HAL_GPIO_Init+0x34c>)
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	089b      	lsrs	r3, r3, #2
 800230c:	3302      	adds	r3, #2
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	43db      	mvns	r3, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4013      	ands	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	4313      	orrs	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800233a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002342:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	43db      	mvns	r3, r3
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4013      	ands	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d003      	beq.n	8002368 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	4313      	orrs	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002368:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	43db      	mvns	r3, r3
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4013      	ands	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d003      	beq.n	8002394 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	4313      	orrs	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	43db      	mvns	r3, r3
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	4013      	ands	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d003      	beq.n	80023be <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	3301      	adds	r3, #1
 80023c8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	fa22 f303 	lsr.w	r3, r2, r3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f47f ae6b 	bne.w	80020b0 <HAL_GPIO_Init+0x14>
  }
}
 80023da:	bf00      	nop
 80023dc:	bf00      	nop
 80023de:	3724      	adds	r7, #36	; 0x24
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	58000400 	.word	0x58000400

080023ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	460b      	mov	r3, r1
 80023f6:	807b      	strh	r3, [r7, #2]
 80023f8:	4613      	mov	r3, r2
 80023fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023fc:	787b      	ldrb	r3, [r7, #1]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d003      	beq.n	800240a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002402:	887a      	ldrh	r2, [r7, #2]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002408:	e003      	b.n	8002412 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800240a:	887b      	ldrh	r3, [r7, #2]
 800240c:	041a      	lsls	r2, r3, #16
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	619a      	str	r2, [r3, #24]
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
	...

08002420 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e08b      	b.n	800254a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d106      	bne.n	800244c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f7fe fea8 	bl	800119c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2224      	movs	r2, #36	; 0x24
 8002450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f022 0201 	bic.w	r2, r2, #1
 8002462:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685a      	ldr	r2, [r3, #4]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002470:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002480:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d107      	bne.n	800249a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689a      	ldr	r2, [r3, #8]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002496:	609a      	str	r2, [r3, #8]
 8002498:	e006      	b.n	80024a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	689a      	ldr	r2, [r3, #8]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80024a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d108      	bne.n	80024c2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	685a      	ldr	r2, [r3, #4]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024be:	605a      	str	r2, [r3, #4]
 80024c0:	e007      	b.n	80024d2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	6859      	ldr	r1, [r3, #4]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	4b1d      	ldr	r3, [pc, #116]	; (8002554 <HAL_I2C_Init+0x134>)
 80024de:	430b      	orrs	r3, r1
 80024e0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68da      	ldr	r2, [r3, #12]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024f0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	691a      	ldr	r2, [r3, #16]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	430a      	orrs	r2, r1
 800250a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	69d9      	ldr	r1, [r3, #28]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a1a      	ldr	r2, [r3, #32]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	430a      	orrs	r2, r1
 800251a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f042 0201 	orr.w	r2, r2, #1
 800252a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2220      	movs	r2, #32
 8002536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	02008000 	.word	0x02008000

08002558 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b088      	sub	sp, #32
 800255c:	af02      	add	r7, sp, #8
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	607a      	str	r2, [r7, #4]
 8002562:	461a      	mov	r2, r3
 8002564:	460b      	mov	r3, r1
 8002566:	817b      	strh	r3, [r7, #10]
 8002568:	4613      	mov	r3, r2
 800256a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2b20      	cmp	r3, #32
 8002576:	f040 80fd 	bne.w	8002774 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002580:	2b01      	cmp	r3, #1
 8002582:	d101      	bne.n	8002588 <HAL_I2C_Master_Transmit+0x30>
 8002584:	2302      	movs	r3, #2
 8002586:	e0f6      	b.n	8002776 <HAL_I2C_Master_Transmit+0x21e>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002590:	f7ff f828 	bl	80015e4 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	2319      	movs	r3, #25
 800259c:	2201      	movs	r2, #1
 800259e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f000 fa0a 	bl	80029bc <I2C_WaitOnFlagUntilTimeout>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e0e1      	b.n	8002776 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2221      	movs	r2, #33	; 0x21
 80025b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2210      	movs	r2, #16
 80025be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	893a      	ldrh	r2, [r7, #8]
 80025d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025de:	b29b      	uxth	r3, r3
 80025e0:	2bff      	cmp	r3, #255	; 0xff
 80025e2:	d906      	bls.n	80025f2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	22ff      	movs	r2, #255	; 0xff
 80025e8:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80025ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025ee:	617b      	str	r3, [r7, #20]
 80025f0:	e007      	b.n	8002602 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80025fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002600:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002606:	2b00      	cmp	r3, #0
 8002608:	d024      	beq.n	8002654 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260e:	781a      	ldrb	r2, [r3, #0]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261a:	1c5a      	adds	r2, r3, #1
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002624:	b29b      	uxth	r3, r3
 8002626:	3b01      	subs	r3, #1
 8002628:	b29a      	uxth	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002632:	3b01      	subs	r3, #1
 8002634:	b29a      	uxth	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800263e:	b2db      	uxtb	r3, r3
 8002640:	3301      	adds	r3, #1
 8002642:	b2da      	uxtb	r2, r3
 8002644:	8979      	ldrh	r1, [r7, #10]
 8002646:	4b4e      	ldr	r3, [pc, #312]	; (8002780 <HAL_I2C_Master_Transmit+0x228>)
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f000 fc05 	bl	8002e5c <I2C_TransferConfig>
 8002652:	e066      	b.n	8002722 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002658:	b2da      	uxtb	r2, r3
 800265a:	8979      	ldrh	r1, [r7, #10]
 800265c:	4b48      	ldr	r3, [pc, #288]	; (8002780 <HAL_I2C_Master_Transmit+0x228>)
 800265e:	9300      	str	r3, [sp, #0]
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	68f8      	ldr	r0, [r7, #12]
 8002664:	f000 fbfa 	bl	8002e5c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002668:	e05b      	b.n	8002722 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	6a39      	ldr	r1, [r7, #32]
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f000 f9fd 	bl	8002a6e <I2C_WaitOnTXISFlagUntilTimeout>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e07b      	b.n	8002776 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	781a      	ldrb	r2, [r3, #0]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268e:	1c5a      	adds	r2, r3, #1
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002698:	b29b      	uxth	r3, r3
 800269a:	3b01      	subs	r3, #1
 800269c:	b29a      	uxth	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a6:	3b01      	subs	r3, #1
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d034      	beq.n	8002722 <HAL_I2C_Master_Transmit+0x1ca>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d130      	bne.n	8002722 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	9300      	str	r3, [sp, #0]
 80026c4:	6a3b      	ldr	r3, [r7, #32]
 80026c6:	2200      	movs	r2, #0
 80026c8:	2180      	movs	r1, #128	; 0x80
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f000 f976 	bl	80029bc <I2C_WaitOnFlagUntilTimeout>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e04d      	b.n	8002776 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026de:	b29b      	uxth	r3, r3
 80026e0:	2bff      	cmp	r3, #255	; 0xff
 80026e2:	d90e      	bls.n	8002702 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	22ff      	movs	r2, #255	; 0xff
 80026e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ee:	b2da      	uxtb	r2, r3
 80026f0:	8979      	ldrh	r1, [r7, #10]
 80026f2:	2300      	movs	r3, #0
 80026f4:	9300      	str	r3, [sp, #0]
 80026f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f000 fbae 	bl	8002e5c <I2C_TransferConfig>
 8002700:	e00f      	b.n	8002722 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002706:	b29a      	uxth	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002710:	b2da      	uxtb	r2, r3
 8002712:	8979      	ldrh	r1, [r7, #10]
 8002714:	2300      	movs	r3, #0
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f000 fb9d 	bl	8002e5c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002726:	b29b      	uxth	r3, r3
 8002728:	2b00      	cmp	r3, #0
 800272a:	d19e      	bne.n	800266a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	6a39      	ldr	r1, [r7, #32]
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f000 f9e3 	bl	8002afc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e01a      	b.n	8002776 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2220      	movs	r2, #32
 8002746:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6859      	ldr	r1, [r3, #4]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	4b0c      	ldr	r3, [pc, #48]	; (8002784 <HAL_I2C_Master_Transmit+0x22c>)
 8002754:	400b      	ands	r3, r1
 8002756:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2220      	movs	r2, #32
 800275c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002770:	2300      	movs	r3, #0
 8002772:	e000      	b.n	8002776 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002774:	2302      	movs	r3, #2
  }
}
 8002776:	4618      	mov	r0, r3
 8002778:	3718      	adds	r7, #24
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	80002000 	.word	0x80002000
 8002784:	fe00e800 	.word	0xfe00e800

08002788 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b088      	sub	sp, #32
 800278c:	af02      	add	r7, sp, #8
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	607a      	str	r2, [r7, #4]
 8002792:	461a      	mov	r2, r3
 8002794:	460b      	mov	r3, r1
 8002796:	817b      	strh	r3, [r7, #10]
 8002798:	4613      	mov	r3, r2
 800279a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	2b20      	cmp	r3, #32
 80027a6:	f040 80db 	bne.w	8002960 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d101      	bne.n	80027b8 <HAL_I2C_Master_Receive+0x30>
 80027b4:	2302      	movs	r3, #2
 80027b6:	e0d4      	b.n	8002962 <HAL_I2C_Master_Receive+0x1da>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80027c0:	f7fe ff10 	bl	80015e4 <HAL_GetTick>
 80027c4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	9300      	str	r3, [sp, #0]
 80027ca:	2319      	movs	r3, #25
 80027cc:	2201      	movs	r2, #1
 80027ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f000 f8f2 	bl	80029bc <I2C_WaitOnFlagUntilTimeout>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e0bf      	b.n	8002962 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2222      	movs	r2, #34	; 0x22
 80027e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2210      	movs	r2, #16
 80027ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	893a      	ldrh	r2, [r7, #8]
 8002802:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800280e:	b29b      	uxth	r3, r3
 8002810:	2bff      	cmp	r3, #255	; 0xff
 8002812:	d90e      	bls.n	8002832 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	22ff      	movs	r2, #255	; 0xff
 8002818:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800281e:	b2da      	uxtb	r2, r3
 8002820:	8979      	ldrh	r1, [r7, #10]
 8002822:	4b52      	ldr	r3, [pc, #328]	; (800296c <HAL_I2C_Master_Receive+0x1e4>)
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800282a:	68f8      	ldr	r0, [r7, #12]
 800282c:	f000 fb16 	bl	8002e5c <I2C_TransferConfig>
 8002830:	e06d      	b.n	800290e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002836:	b29a      	uxth	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002840:	b2da      	uxtb	r2, r3
 8002842:	8979      	ldrh	r1, [r7, #10]
 8002844:	4b49      	ldr	r3, [pc, #292]	; (800296c <HAL_I2C_Master_Receive+0x1e4>)
 8002846:	9300      	str	r3, [sp, #0]
 8002848:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f000 fb05 	bl	8002e5c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002852:	e05c      	b.n	800290e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	6a39      	ldr	r1, [r7, #32]
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	f000 f993 	bl	8002b84 <I2C_WaitOnRXNEFlagUntilTimeout>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e07c      	b.n	8002962 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002872:	b2d2      	uxtb	r2, r2
 8002874:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287a:	1c5a      	adds	r2, r3, #1
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002884:	3b01      	subs	r3, #1
 8002886:	b29a      	uxth	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002890:	b29b      	uxth	r3, r3
 8002892:	3b01      	subs	r3, #1
 8002894:	b29a      	uxth	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800289e:	b29b      	uxth	r3, r3
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d034      	beq.n	800290e <HAL_I2C_Master_Receive+0x186>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d130      	bne.n	800290e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	9300      	str	r3, [sp, #0]
 80028b0:	6a3b      	ldr	r3, [r7, #32]
 80028b2:	2200      	movs	r2, #0
 80028b4:	2180      	movs	r1, #128	; 0x80
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f000 f880 	bl	80029bc <I2C_WaitOnFlagUntilTimeout>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e04d      	b.n	8002962 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	2bff      	cmp	r3, #255	; 0xff
 80028ce:	d90e      	bls.n	80028ee <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	22ff      	movs	r2, #255	; 0xff
 80028d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028da:	b2da      	uxtb	r2, r3
 80028dc:	8979      	ldrh	r1, [r7, #10]
 80028de:	2300      	movs	r3, #0
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	f000 fab8 	bl	8002e5c <I2C_TransferConfig>
 80028ec:	e00f      	b.n	800290e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028fc:	b2da      	uxtb	r2, r3
 80028fe:	8979      	ldrh	r1, [r7, #10]
 8002900:	2300      	movs	r3, #0
 8002902:	9300      	str	r3, [sp, #0]
 8002904:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f000 faa7 	bl	8002e5c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002912:	b29b      	uxth	r3, r3
 8002914:	2b00      	cmp	r3, #0
 8002916:	d19d      	bne.n	8002854 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002918:	697a      	ldr	r2, [r7, #20]
 800291a:	6a39      	ldr	r1, [r7, #32]
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f000 f8ed 	bl	8002afc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e01a      	b.n	8002962 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2220      	movs	r2, #32
 8002932:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6859      	ldr	r1, [r3, #4]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	4b0c      	ldr	r3, [pc, #48]	; (8002970 <HAL_I2C_Master_Receive+0x1e8>)
 8002940:	400b      	ands	r3, r1
 8002942:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2220      	movs	r2, #32
 8002948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800295c:	2300      	movs	r3, #0
 800295e:	e000      	b.n	8002962 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002960:	2302      	movs	r3, #2
  }
}
 8002962:	4618      	mov	r0, r3
 8002964:	3718      	adds	r7, #24
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	80002400 	.word	0x80002400
 8002970:	fe00e800 	.word	0xfe00e800

08002974 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b02      	cmp	r3, #2
 8002988:	d103      	bne.n	8002992 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2200      	movs	r2, #0
 8002990:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	2b01      	cmp	r3, #1
 800299e:	d007      	beq.n	80029b0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	699a      	ldr	r2, [r3, #24]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f042 0201 	orr.w	r2, r2, #1
 80029ae:	619a      	str	r2, [r3, #24]
  }
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	603b      	str	r3, [r7, #0]
 80029c8:	4613      	mov	r3, r2
 80029ca:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029cc:	e03b      	b.n	8002a46 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	6839      	ldr	r1, [r7, #0]
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	f000 f962 	bl	8002c9c <I2C_IsErrorOccurred>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e041      	b.n	8002a66 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029e8:	d02d      	beq.n	8002a46 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ea:	f7fe fdfb 	bl	80015e4 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d302      	bcc.n	8002a00 <I2C_WaitOnFlagUntilTimeout+0x44>
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d122      	bne.n	8002a46 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	699a      	ldr	r2, [r3, #24]
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	bf0c      	ite	eq
 8002a10:	2301      	moveq	r3, #1
 8002a12:	2300      	movne	r3, #0
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	461a      	mov	r2, r3
 8002a18:	79fb      	ldrb	r3, [r7, #7]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d113      	bne.n	8002a46 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a22:	f043 0220 	orr.w	r2, r3, #32
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2220      	movs	r2, #32
 8002a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e00f      	b.n	8002a66 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	699a      	ldr	r2, [r3, #24]
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	68ba      	ldr	r2, [r7, #8]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	bf0c      	ite	eq
 8002a56:	2301      	moveq	r3, #1
 8002a58:	2300      	movne	r3, #0
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	79fb      	ldrb	r3, [r7, #7]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d0b4      	beq.n	80029ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b084      	sub	sp, #16
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	60f8      	str	r0, [r7, #12]
 8002a76:	60b9      	str	r1, [r7, #8]
 8002a78:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a7a:	e033      	b.n	8002ae4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	68b9      	ldr	r1, [r7, #8]
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f000 f90b 	bl	8002c9c <I2C_IsErrorOccurred>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e031      	b.n	8002af4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a96:	d025      	beq.n	8002ae4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a98:	f7fe fda4 	bl	80015e4 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	68ba      	ldr	r2, [r7, #8]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d302      	bcc.n	8002aae <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d11a      	bne.n	8002ae4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d013      	beq.n	8002ae4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac0:	f043 0220 	orr.w	r2, r3, #32
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2220      	movs	r2, #32
 8002acc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e007      	b.n	8002af4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d1c4      	bne.n	8002a7c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b08:	e02f      	b.n	8002b6a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	68b9      	ldr	r1, [r7, #8]
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f000 f8c4 	bl	8002c9c <I2C_IsErrorOccurred>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e02d      	b.n	8002b7a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b1e:	f7fe fd61 	bl	80015e4 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	68ba      	ldr	r2, [r7, #8]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d302      	bcc.n	8002b34 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d11a      	bne.n	8002b6a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	f003 0320 	and.w	r3, r3, #32
 8002b3e:	2b20      	cmp	r3, #32
 8002b40:	d013      	beq.n	8002b6a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b46:	f043 0220 	orr.w	r2, r3, #32
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2220      	movs	r2, #32
 8002b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e007      	b.n	8002b7a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	f003 0320 	and.w	r3, r3, #32
 8002b74:	2b20      	cmp	r3, #32
 8002b76:	d1c8      	bne.n	8002b0a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
	...

08002b84 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b90:	2300      	movs	r3, #0
 8002b92:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002b94:	e071      	b.n	8002c7a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	68b9      	ldr	r1, [r7, #8]
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f000 f87e 	bl	8002c9c <I2C_IsErrorOccurred>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	f003 0320 	and.w	r3, r3, #32
 8002bb4:	2b20      	cmp	r3, #32
 8002bb6:	d13b      	bne.n	8002c30 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8002bb8:	7dfb      	ldrb	r3, [r7, #23]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d138      	bne.n	8002c30 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	f003 0304 	and.w	r3, r3, #4
 8002bc8:	2b04      	cmp	r3, #4
 8002bca:	d105      	bne.n	8002bd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	f003 0310 	and.w	r3, r3, #16
 8002be2:	2b10      	cmp	r3, #16
 8002be4:	d121      	bne.n	8002c2a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2210      	movs	r2, #16
 8002bec:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2204      	movs	r2, #4
 8002bf2:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2220      	movs	r2, #32
 8002bfa:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6859      	ldr	r1, [r3, #4]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	4b24      	ldr	r3, [pc, #144]	; (8002c98 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8002c08:	400b      	ands	r3, r1
 8002c0a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2220      	movs	r2, #32
 8002c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	75fb      	strb	r3, [r7, #23]
 8002c28:	e002      	b.n	8002c30 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8002c30:	f7fe fcd8 	bl	80015e4 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	68ba      	ldr	r2, [r7, #8]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d302      	bcc.n	8002c46 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d119      	bne.n	8002c7a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8002c46:	7dfb      	ldrb	r3, [r7, #23]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d116      	bne.n	8002c7a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	f003 0304 	and.w	r3, r3, #4
 8002c56:	2b04      	cmp	r3, #4
 8002c58:	d00f      	beq.n	8002c7a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5e:	f043 0220 	orr.w	r2, r3, #32
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2220      	movs	r2, #32
 8002c6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	f003 0304 	and.w	r3, r3, #4
 8002c84:	2b04      	cmp	r3, #4
 8002c86:	d002      	beq.n	8002c8e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8002c88:	7dfb      	ldrb	r3, [r7, #23]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d083      	beq.n	8002b96 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8002c8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3718      	adds	r7, #24
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	fe00e800 	.word	0xfe00e800

08002c9c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b08a      	sub	sp, #40	; 0x28
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	f003 0310 	and.w	r3, r3, #16
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d068      	beq.n	8002d9a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2210      	movs	r2, #16
 8002cce:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002cd0:	e049      	b.n	8002d66 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cd8:	d045      	beq.n	8002d66 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002cda:	f7fe fc83 	bl	80015e4 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	68ba      	ldr	r2, [r7, #8]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d302      	bcc.n	8002cf0 <I2C_IsErrorOccurred+0x54>
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d13a      	bne.n	8002d66 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cfa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d02:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d12:	d121      	bne.n	8002d58 <I2C_IsErrorOccurred+0xbc>
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d1a:	d01d      	beq.n	8002d58 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002d1c:	7cfb      	ldrb	r3, [r7, #19]
 8002d1e:	2b20      	cmp	r3, #32
 8002d20:	d01a      	beq.n	8002d58 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d30:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002d32:	f7fe fc57 	bl	80015e4 <HAL_GetTick>
 8002d36:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d38:	e00e      	b.n	8002d58 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002d3a:	f7fe fc53 	bl	80015e4 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b19      	cmp	r3, #25
 8002d46:	d907      	bls.n	8002d58 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002d48:	6a3b      	ldr	r3, [r7, #32]
 8002d4a:	f043 0320 	orr.w	r3, r3, #32
 8002d4e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002d56:	e006      	b.n	8002d66 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	f003 0320 	and.w	r3, r3, #32
 8002d62:	2b20      	cmp	r3, #32
 8002d64:	d1e9      	bne.n	8002d3a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	f003 0320 	and.w	r3, r3, #32
 8002d70:	2b20      	cmp	r3, #32
 8002d72:	d003      	beq.n	8002d7c <I2C_IsErrorOccurred+0xe0>
 8002d74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d0aa      	beq.n	8002cd2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002d7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d103      	bne.n	8002d8c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2220      	movs	r2, #32
 8002d8a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002d8c:	6a3b      	ldr	r3, [r7, #32]
 8002d8e:	f043 0304 	orr.w	r3, r3, #4
 8002d92:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00b      	beq.n	8002dc4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002dac:	6a3b      	ldr	r3, [r7, #32]
 8002dae:	f043 0301 	orr.w	r3, r3, #1
 8002db2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dbc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00b      	beq.n	8002de6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002dce:	6a3b      	ldr	r3, [r7, #32]
 8002dd0:	f043 0308 	orr.w	r3, r3, #8
 8002dd4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dde:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00b      	beq.n	8002e08 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002df0:	6a3b      	ldr	r3, [r7, #32]
 8002df2:	f043 0302 	orr.w	r3, r3, #2
 8002df6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e00:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002e08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d01c      	beq.n	8002e4a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f7ff fdaf 	bl	8002974 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	6859      	ldr	r1, [r3, #4]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	4b0d      	ldr	r3, [pc, #52]	; (8002e58 <I2C_IsErrorOccurred+0x1bc>)
 8002e22:	400b      	ands	r3, r1
 8002e24:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e2a:	6a3b      	ldr	r3, [r7, #32]
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2220      	movs	r2, #32
 8002e36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002e4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3728      	adds	r7, #40	; 0x28
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	fe00e800 	.word	0xfe00e800

08002e5c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b087      	sub	sp, #28
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	607b      	str	r3, [r7, #4]
 8002e66:	460b      	mov	r3, r1
 8002e68:	817b      	strh	r3, [r7, #10]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e6e:	897b      	ldrh	r3, [r7, #10]
 8002e70:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e74:	7a7b      	ldrb	r3, [r7, #9]
 8002e76:	041b      	lsls	r3, r3, #16
 8002e78:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e7c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e82:	6a3b      	ldr	r3, [r7, #32]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e8a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	685a      	ldr	r2, [r3, #4]
 8002e92:	6a3b      	ldr	r3, [r7, #32]
 8002e94:	0d5b      	lsrs	r3, r3, #21
 8002e96:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002e9a:	4b08      	ldr	r3, [pc, #32]	; (8002ebc <I2C_TransferConfig+0x60>)
 8002e9c:	430b      	orrs	r3, r1
 8002e9e:	43db      	mvns	r3, r3
 8002ea0:	ea02 0103 	and.w	r1, r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002eae:	bf00      	nop
 8002eb0:	371c      	adds	r7, #28
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	03ff63ff 	.word	0x03ff63ff

08002ec0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b20      	cmp	r3, #32
 8002ed4:	d138      	bne.n	8002f48 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d101      	bne.n	8002ee4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	e032      	b.n	8002f4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2224      	movs	r2, #36	; 0x24
 8002ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 0201 	bic.w	r2, r2, #1
 8002f02:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f12:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	6819      	ldr	r1, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	683a      	ldr	r2, [r7, #0]
 8002f20:	430a      	orrs	r2, r1
 8002f22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f042 0201 	orr.w	r2, r2, #1
 8002f32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2220      	movs	r2, #32
 8002f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f44:	2300      	movs	r3, #0
 8002f46:	e000      	b.n	8002f4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f48:	2302      	movs	r3, #2
  }
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f56:	b480      	push	{r7}
 8002f58:	b085      	sub	sp, #20
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
 8002f5e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b20      	cmp	r3, #32
 8002f6a:	d139      	bne.n	8002fe0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d101      	bne.n	8002f7a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f76:	2302      	movs	r3, #2
 8002f78:	e033      	b.n	8002fe2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2224      	movs	r2, #36	; 0x24
 8002f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 0201 	bic.w	r2, r2, #1
 8002f98:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002fa8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	021b      	lsls	r3, r3, #8
 8002fae:	68fa      	ldr	r2, [r7, #12]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f042 0201 	orr.w	r2, r2, #1
 8002fca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2220      	movs	r2, #32
 8002fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	e000      	b.n	8002fe2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002fe0:	2302      	movs	r3, #2
  }
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3714      	adds	r7, #20
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
	...

08002ff0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002ff8:	4b19      	ldr	r3, [pc, #100]	; (8003060 <HAL_PWREx_ConfigSupply+0x70>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	f003 0304 	and.w	r3, r3, #4
 8003000:	2b04      	cmp	r3, #4
 8003002:	d00a      	beq.n	800301a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003004:	4b16      	ldr	r3, [pc, #88]	; (8003060 <HAL_PWREx_ConfigSupply+0x70>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	f003 0307 	and.w	r3, r3, #7
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	429a      	cmp	r2, r3
 8003010:	d001      	beq.n	8003016 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e01f      	b.n	8003056 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003016:	2300      	movs	r3, #0
 8003018:	e01d      	b.n	8003056 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800301a:	4b11      	ldr	r3, [pc, #68]	; (8003060 <HAL_PWREx_ConfigSupply+0x70>)
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	f023 0207 	bic.w	r2, r3, #7
 8003022:	490f      	ldr	r1, [pc, #60]	; (8003060 <HAL_PWREx_ConfigSupply+0x70>)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4313      	orrs	r3, r2
 8003028:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800302a:	f7fe fadb 	bl	80015e4 <HAL_GetTick>
 800302e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003030:	e009      	b.n	8003046 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003032:	f7fe fad7 	bl	80015e4 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003040:	d901      	bls.n	8003046 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e007      	b.n	8003056 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003046:	4b06      	ldr	r3, [pc, #24]	; (8003060 <HAL_PWREx_ConfigSupply+0x70>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800304e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003052:	d1ee      	bne.n	8003032 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	58024800 	.word	0x58024800

08003064 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b08c      	sub	sp, #48	; 0x30
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e3c8      	b.n	8003808 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	2b00      	cmp	r3, #0
 8003080:	f000 8087 	beq.w	8003192 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003084:	4b88      	ldr	r3, [pc, #544]	; (80032a8 <HAL_RCC_OscConfig+0x244>)
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800308c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800308e:	4b86      	ldr	r3, [pc, #536]	; (80032a8 <HAL_RCC_OscConfig+0x244>)
 8003090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003092:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003096:	2b10      	cmp	r3, #16
 8003098:	d007      	beq.n	80030aa <HAL_RCC_OscConfig+0x46>
 800309a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800309c:	2b18      	cmp	r3, #24
 800309e:	d110      	bne.n	80030c2 <HAL_RCC_OscConfig+0x5e>
 80030a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a2:	f003 0303 	and.w	r3, r3, #3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d10b      	bne.n	80030c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030aa:	4b7f      	ldr	r3, [pc, #508]	; (80032a8 <HAL_RCC_OscConfig+0x244>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d06c      	beq.n	8003190 <HAL_RCC_OscConfig+0x12c>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d168      	bne.n	8003190 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e3a2      	b.n	8003808 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ca:	d106      	bne.n	80030da <HAL_RCC_OscConfig+0x76>
 80030cc:	4b76      	ldr	r3, [pc, #472]	; (80032a8 <HAL_RCC_OscConfig+0x244>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a75      	ldr	r2, [pc, #468]	; (80032a8 <HAL_RCC_OscConfig+0x244>)
 80030d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030d6:	6013      	str	r3, [r2, #0]
 80030d8:	e02e      	b.n	8003138 <HAL_RCC_OscConfig+0xd4>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10c      	bne.n	80030fc <HAL_RCC_OscConfig+0x98>
 80030e2:	4b71      	ldr	r3, [pc, #452]	; (80032a8 <HAL_RCC_OscConfig+0x244>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a70      	ldr	r2, [pc, #448]	; (80032a8 <HAL_RCC_OscConfig+0x244>)
 80030e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ec:	6013      	str	r3, [r2, #0]
 80030ee:	4b6e      	ldr	r3, [pc, #440]	; (80032a8 <HAL_RCC_OscConfig+0x244>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a6d      	ldr	r2, [pc, #436]	; (80032a8 <HAL_RCC_OscConfig+0x244>)
 80030f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030f8:	6013      	str	r3, [r2, #0]
 80030fa:	e01d      	b.n	8003138 <HAL_RCC_OscConfig+0xd4>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003104:	d10c      	bne.n	8003120 <HAL_RCC_OscConfig+0xbc>
 8003106:	4b68      	ldr	r3, [pc, #416]	; (80032a8 <HAL_RCC_OscConfig+0x244>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a67      	ldr	r2, [pc, #412]	; (80032a8 <HAL_RCC_OscConfig+0x244>)
 800310c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003110:	6013      	str	r3, [r2, #0]
 8003112:	4b65      	ldr	r3, [pc, #404]	; (80032a8 <HAL_RCC_OscConfig+0x244>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a64      	ldr	r2, [pc, #400]	; (80032a8 <HAL_RCC_OscConfig+0x244>)
 8003118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800311c:	6013      	str	r3, [r2, #0]
 800311e:	e00b      	b.n	8003138 <HAL_RCC_OscConfig+0xd4>
 8003120:	4b61      	ldr	r3, [pc, #388]	; (80032a8 <HAL_RCC_OscConfig+0x244>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a60      	ldr	r2, [pc, #384]	; (80032a8 <HAL_RCC_OscConfig+0x244>)
 8003126:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800312a:	6013      	str	r3, [r2, #0]
 800312c:	4b5e      	ldr	r3, [pc, #376]	; (80032a8 <HAL_RCC_OscConfig+0x244>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a5d      	ldr	r2, [pc, #372]	; (80032a8 <HAL_RCC_OscConfig+0x244>)
 8003132:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003136:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d013      	beq.n	8003168 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003140:	f7fe fa50 	bl	80015e4 <HAL_GetTick>
 8003144:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003148:	f7fe fa4c 	bl	80015e4 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b64      	cmp	r3, #100	; 0x64
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e356      	b.n	8003808 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800315a:	4b53      	ldr	r3, [pc, #332]	; (80032a8 <HAL_RCC_OscConfig+0x244>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d0f0      	beq.n	8003148 <HAL_RCC_OscConfig+0xe4>
 8003166:	e014      	b.n	8003192 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003168:	f7fe fa3c 	bl	80015e4 <HAL_GetTick>
 800316c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003170:	f7fe fa38 	bl	80015e4 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b64      	cmp	r3, #100	; 0x64
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e342      	b.n	8003808 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003182:	4b49      	ldr	r3, [pc, #292]	; (80032a8 <HAL_RCC_OscConfig+0x244>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1f0      	bne.n	8003170 <HAL_RCC_OscConfig+0x10c>
 800318e:	e000      	b.n	8003192 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003190:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	f000 808c 	beq.w	80032b8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031a0:	4b41      	ldr	r3, [pc, #260]	; (80032a8 <HAL_RCC_OscConfig+0x244>)
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031a8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80031aa:	4b3f      	ldr	r3, [pc, #252]	; (80032a8 <HAL_RCC_OscConfig+0x244>)
 80031ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ae:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80031b0:	6a3b      	ldr	r3, [r7, #32]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d007      	beq.n	80031c6 <HAL_RCC_OscConfig+0x162>
 80031b6:	6a3b      	ldr	r3, [r7, #32]
 80031b8:	2b18      	cmp	r3, #24
 80031ba:	d137      	bne.n	800322c <HAL_RCC_OscConfig+0x1c8>
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	f003 0303 	and.w	r3, r3, #3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d132      	bne.n	800322c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031c6:	4b38      	ldr	r3, [pc, #224]	; (80032a8 <HAL_RCC_OscConfig+0x244>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0304 	and.w	r3, r3, #4
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d005      	beq.n	80031de <HAL_RCC_OscConfig+0x17a>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e314      	b.n	8003808 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80031de:	4b32      	ldr	r3, [pc, #200]	; (80032a8 <HAL_RCC_OscConfig+0x244>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f023 0219 	bic.w	r2, r3, #25
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	492f      	ldr	r1, [pc, #188]	; (80032a8 <HAL_RCC_OscConfig+0x244>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f0:	f7fe f9f8 	bl	80015e4 <HAL_GetTick>
 80031f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031f8:	f7fe f9f4 	bl	80015e4 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e2fe      	b.n	8003808 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800320a:	4b27      	ldr	r3, [pc, #156]	; (80032a8 <HAL_RCC_OscConfig+0x244>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0304 	and.w	r3, r3, #4
 8003212:	2b00      	cmp	r3, #0
 8003214:	d0f0      	beq.n	80031f8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003216:	4b24      	ldr	r3, [pc, #144]	; (80032a8 <HAL_RCC_OscConfig+0x244>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	061b      	lsls	r3, r3, #24
 8003224:	4920      	ldr	r1, [pc, #128]	; (80032a8 <HAL_RCC_OscConfig+0x244>)
 8003226:	4313      	orrs	r3, r2
 8003228:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800322a:	e045      	b.n	80032b8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d026      	beq.n	8003282 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003234:	4b1c      	ldr	r3, [pc, #112]	; (80032a8 <HAL_RCC_OscConfig+0x244>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f023 0219 	bic.w	r2, r3, #25
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	4919      	ldr	r1, [pc, #100]	; (80032a8 <HAL_RCC_OscConfig+0x244>)
 8003242:	4313      	orrs	r3, r2
 8003244:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003246:	f7fe f9cd 	bl	80015e4 <HAL_GetTick>
 800324a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800324c:	e008      	b.n	8003260 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800324e:	f7fe f9c9 	bl	80015e4 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d901      	bls.n	8003260 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e2d3      	b.n	8003808 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003260:	4b11      	ldr	r3, [pc, #68]	; (80032a8 <HAL_RCC_OscConfig+0x244>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0304 	and.w	r3, r3, #4
 8003268:	2b00      	cmp	r3, #0
 800326a:	d0f0      	beq.n	800324e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800326c:	4b0e      	ldr	r3, [pc, #56]	; (80032a8 <HAL_RCC_OscConfig+0x244>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	691b      	ldr	r3, [r3, #16]
 8003278:	061b      	lsls	r3, r3, #24
 800327a:	490b      	ldr	r1, [pc, #44]	; (80032a8 <HAL_RCC_OscConfig+0x244>)
 800327c:	4313      	orrs	r3, r2
 800327e:	604b      	str	r3, [r1, #4]
 8003280:	e01a      	b.n	80032b8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003282:	4b09      	ldr	r3, [pc, #36]	; (80032a8 <HAL_RCC_OscConfig+0x244>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a08      	ldr	r2, [pc, #32]	; (80032a8 <HAL_RCC_OscConfig+0x244>)
 8003288:	f023 0301 	bic.w	r3, r3, #1
 800328c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800328e:	f7fe f9a9 	bl	80015e4 <HAL_GetTick>
 8003292:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003294:	e00a      	b.n	80032ac <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003296:	f7fe f9a5 	bl	80015e4 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d903      	bls.n	80032ac <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e2af      	b.n	8003808 <HAL_RCC_OscConfig+0x7a4>
 80032a8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80032ac:	4b96      	ldr	r3, [pc, #600]	; (8003508 <HAL_RCC_OscConfig+0x4a4>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0304 	and.w	r3, r3, #4
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d1ee      	bne.n	8003296 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0310 	and.w	r3, r3, #16
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d06a      	beq.n	800339a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032c4:	4b90      	ldr	r3, [pc, #576]	; (8003508 <HAL_RCC_OscConfig+0x4a4>)
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032cc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80032ce:	4b8e      	ldr	r3, [pc, #568]	; (8003508 <HAL_RCC_OscConfig+0x4a4>)
 80032d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d2:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	2b08      	cmp	r3, #8
 80032d8:	d007      	beq.n	80032ea <HAL_RCC_OscConfig+0x286>
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	2b18      	cmp	r3, #24
 80032de:	d11b      	bne.n	8003318 <HAL_RCC_OscConfig+0x2b4>
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	f003 0303 	and.w	r3, r3, #3
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d116      	bne.n	8003318 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80032ea:	4b87      	ldr	r3, [pc, #540]	; (8003508 <HAL_RCC_OscConfig+0x4a4>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d005      	beq.n	8003302 <HAL_RCC_OscConfig+0x29e>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	69db      	ldr	r3, [r3, #28]
 80032fa:	2b80      	cmp	r3, #128	; 0x80
 80032fc:	d001      	beq.n	8003302 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e282      	b.n	8003808 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003302:	4b81      	ldr	r3, [pc, #516]	; (8003508 <HAL_RCC_OscConfig+0x4a4>)
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	061b      	lsls	r3, r3, #24
 8003310:	497d      	ldr	r1, [pc, #500]	; (8003508 <HAL_RCC_OscConfig+0x4a4>)
 8003312:	4313      	orrs	r3, r2
 8003314:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003316:	e040      	b.n	800339a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	69db      	ldr	r3, [r3, #28]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d023      	beq.n	8003368 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003320:	4b79      	ldr	r3, [pc, #484]	; (8003508 <HAL_RCC_OscConfig+0x4a4>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a78      	ldr	r2, [pc, #480]	; (8003508 <HAL_RCC_OscConfig+0x4a4>)
 8003326:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800332a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332c:	f7fe f95a 	bl	80015e4 <HAL_GetTick>
 8003330:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003334:	f7fe f956 	bl	80015e4 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e260      	b.n	8003808 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003346:	4b70      	ldr	r3, [pc, #448]	; (8003508 <HAL_RCC_OscConfig+0x4a4>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800334e:	2b00      	cmp	r3, #0
 8003350:	d0f0      	beq.n	8003334 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003352:	4b6d      	ldr	r3, [pc, #436]	; (8003508 <HAL_RCC_OscConfig+0x4a4>)
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	061b      	lsls	r3, r3, #24
 8003360:	4969      	ldr	r1, [pc, #420]	; (8003508 <HAL_RCC_OscConfig+0x4a4>)
 8003362:	4313      	orrs	r3, r2
 8003364:	60cb      	str	r3, [r1, #12]
 8003366:	e018      	b.n	800339a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003368:	4b67      	ldr	r3, [pc, #412]	; (8003508 <HAL_RCC_OscConfig+0x4a4>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a66      	ldr	r2, [pc, #408]	; (8003508 <HAL_RCC_OscConfig+0x4a4>)
 800336e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003372:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003374:	f7fe f936 	bl	80015e4 <HAL_GetTick>
 8003378:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800337c:	f7fe f932 	bl	80015e4 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e23c      	b.n	8003808 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800338e:	4b5e      	ldr	r3, [pc, #376]	; (8003508 <HAL_RCC_OscConfig+0x4a4>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1f0      	bne.n	800337c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0308 	and.w	r3, r3, #8
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d036      	beq.n	8003414 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d019      	beq.n	80033e2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033ae:	4b56      	ldr	r3, [pc, #344]	; (8003508 <HAL_RCC_OscConfig+0x4a4>)
 80033b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033b2:	4a55      	ldr	r2, [pc, #340]	; (8003508 <HAL_RCC_OscConfig+0x4a4>)
 80033b4:	f043 0301 	orr.w	r3, r3, #1
 80033b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ba:	f7fe f913 	bl	80015e4 <HAL_GetTick>
 80033be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80033c0:	e008      	b.n	80033d4 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033c2:	f7fe f90f 	bl	80015e4 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e219      	b.n	8003808 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80033d4:	4b4c      	ldr	r3, [pc, #304]	; (8003508 <HAL_RCC_OscConfig+0x4a4>)
 80033d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d0f0      	beq.n	80033c2 <HAL_RCC_OscConfig+0x35e>
 80033e0:	e018      	b.n	8003414 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033e2:	4b49      	ldr	r3, [pc, #292]	; (8003508 <HAL_RCC_OscConfig+0x4a4>)
 80033e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033e6:	4a48      	ldr	r2, [pc, #288]	; (8003508 <HAL_RCC_OscConfig+0x4a4>)
 80033e8:	f023 0301 	bic.w	r3, r3, #1
 80033ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ee:	f7fe f8f9 	bl	80015e4 <HAL_GetTick>
 80033f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80033f4:	e008      	b.n	8003408 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033f6:	f7fe f8f5 	bl	80015e4 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d901      	bls.n	8003408 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e1ff      	b.n	8003808 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003408:	4b3f      	ldr	r3, [pc, #252]	; (8003508 <HAL_RCC_OscConfig+0x4a4>)
 800340a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1f0      	bne.n	80033f6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0320 	and.w	r3, r3, #32
 800341c:	2b00      	cmp	r3, #0
 800341e:	d036      	beq.n	800348e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d019      	beq.n	800345c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003428:	4b37      	ldr	r3, [pc, #220]	; (8003508 <HAL_RCC_OscConfig+0x4a4>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a36      	ldr	r2, [pc, #216]	; (8003508 <HAL_RCC_OscConfig+0x4a4>)
 800342e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003432:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003434:	f7fe f8d6 	bl	80015e4 <HAL_GetTick>
 8003438:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800343c:	f7fe f8d2 	bl	80015e4 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e1dc      	b.n	8003808 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800344e:	4b2e      	ldr	r3, [pc, #184]	; (8003508 <HAL_RCC_OscConfig+0x4a4>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d0f0      	beq.n	800343c <HAL_RCC_OscConfig+0x3d8>
 800345a:	e018      	b.n	800348e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800345c:	4b2a      	ldr	r3, [pc, #168]	; (8003508 <HAL_RCC_OscConfig+0x4a4>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a29      	ldr	r2, [pc, #164]	; (8003508 <HAL_RCC_OscConfig+0x4a4>)
 8003462:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003466:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003468:	f7fe f8bc 	bl	80015e4 <HAL_GetTick>
 800346c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003470:	f7fe f8b8 	bl	80015e4 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e1c2      	b.n	8003808 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003482:	4b21      	ldr	r3, [pc, #132]	; (8003508 <HAL_RCC_OscConfig+0x4a4>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1f0      	bne.n	8003470 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0304 	and.w	r3, r3, #4
 8003496:	2b00      	cmp	r3, #0
 8003498:	f000 8086 	beq.w	80035a8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800349c:	4b1b      	ldr	r3, [pc, #108]	; (800350c <HAL_RCC_OscConfig+0x4a8>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a1a      	ldr	r2, [pc, #104]	; (800350c <HAL_RCC_OscConfig+0x4a8>)
 80034a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034a8:	f7fe f89c 	bl	80015e4 <HAL_GetTick>
 80034ac:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034ae:	e008      	b.n	80034c2 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034b0:	f7fe f898 	bl	80015e4 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b64      	cmp	r3, #100	; 0x64
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e1a2      	b.n	8003808 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034c2:	4b12      	ldr	r3, [pc, #72]	; (800350c <HAL_RCC_OscConfig+0x4a8>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d0f0      	beq.n	80034b0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d106      	bne.n	80034e4 <HAL_RCC_OscConfig+0x480>
 80034d6:	4b0c      	ldr	r3, [pc, #48]	; (8003508 <HAL_RCC_OscConfig+0x4a4>)
 80034d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034da:	4a0b      	ldr	r2, [pc, #44]	; (8003508 <HAL_RCC_OscConfig+0x4a4>)
 80034dc:	f043 0301 	orr.w	r3, r3, #1
 80034e0:	6713      	str	r3, [r2, #112]	; 0x70
 80034e2:	e032      	b.n	800354a <HAL_RCC_OscConfig+0x4e6>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d111      	bne.n	8003510 <HAL_RCC_OscConfig+0x4ac>
 80034ec:	4b06      	ldr	r3, [pc, #24]	; (8003508 <HAL_RCC_OscConfig+0x4a4>)
 80034ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f0:	4a05      	ldr	r2, [pc, #20]	; (8003508 <HAL_RCC_OscConfig+0x4a4>)
 80034f2:	f023 0301 	bic.w	r3, r3, #1
 80034f6:	6713      	str	r3, [r2, #112]	; 0x70
 80034f8:	4b03      	ldr	r3, [pc, #12]	; (8003508 <HAL_RCC_OscConfig+0x4a4>)
 80034fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fc:	4a02      	ldr	r2, [pc, #8]	; (8003508 <HAL_RCC_OscConfig+0x4a4>)
 80034fe:	f023 0304 	bic.w	r3, r3, #4
 8003502:	6713      	str	r3, [r2, #112]	; 0x70
 8003504:	e021      	b.n	800354a <HAL_RCC_OscConfig+0x4e6>
 8003506:	bf00      	nop
 8003508:	58024400 	.word	0x58024400
 800350c:	58024800 	.word	0x58024800
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	2b05      	cmp	r3, #5
 8003516:	d10c      	bne.n	8003532 <HAL_RCC_OscConfig+0x4ce>
 8003518:	4b83      	ldr	r3, [pc, #524]	; (8003728 <HAL_RCC_OscConfig+0x6c4>)
 800351a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351c:	4a82      	ldr	r2, [pc, #520]	; (8003728 <HAL_RCC_OscConfig+0x6c4>)
 800351e:	f043 0304 	orr.w	r3, r3, #4
 8003522:	6713      	str	r3, [r2, #112]	; 0x70
 8003524:	4b80      	ldr	r3, [pc, #512]	; (8003728 <HAL_RCC_OscConfig+0x6c4>)
 8003526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003528:	4a7f      	ldr	r2, [pc, #508]	; (8003728 <HAL_RCC_OscConfig+0x6c4>)
 800352a:	f043 0301 	orr.w	r3, r3, #1
 800352e:	6713      	str	r3, [r2, #112]	; 0x70
 8003530:	e00b      	b.n	800354a <HAL_RCC_OscConfig+0x4e6>
 8003532:	4b7d      	ldr	r3, [pc, #500]	; (8003728 <HAL_RCC_OscConfig+0x6c4>)
 8003534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003536:	4a7c      	ldr	r2, [pc, #496]	; (8003728 <HAL_RCC_OscConfig+0x6c4>)
 8003538:	f023 0301 	bic.w	r3, r3, #1
 800353c:	6713      	str	r3, [r2, #112]	; 0x70
 800353e:	4b7a      	ldr	r3, [pc, #488]	; (8003728 <HAL_RCC_OscConfig+0x6c4>)
 8003540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003542:	4a79      	ldr	r2, [pc, #484]	; (8003728 <HAL_RCC_OscConfig+0x6c4>)
 8003544:	f023 0304 	bic.w	r3, r3, #4
 8003548:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d015      	beq.n	800357e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003552:	f7fe f847 	bl	80015e4 <HAL_GetTick>
 8003556:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003558:	e00a      	b.n	8003570 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800355a:	f7fe f843 	bl	80015e4 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	f241 3288 	movw	r2, #5000	; 0x1388
 8003568:	4293      	cmp	r3, r2
 800356a:	d901      	bls.n	8003570 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e14b      	b.n	8003808 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003570:	4b6d      	ldr	r3, [pc, #436]	; (8003728 <HAL_RCC_OscConfig+0x6c4>)
 8003572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d0ee      	beq.n	800355a <HAL_RCC_OscConfig+0x4f6>
 800357c:	e014      	b.n	80035a8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800357e:	f7fe f831 	bl	80015e4 <HAL_GetTick>
 8003582:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003584:	e00a      	b.n	800359c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003586:	f7fe f82d 	bl	80015e4 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	f241 3288 	movw	r2, #5000	; 0x1388
 8003594:	4293      	cmp	r3, r2
 8003596:	d901      	bls.n	800359c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e135      	b.n	8003808 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800359c:	4b62      	ldr	r3, [pc, #392]	; (8003728 <HAL_RCC_OscConfig+0x6c4>)
 800359e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1ee      	bne.n	8003586 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f000 812a 	beq.w	8003806 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80035b2:	4b5d      	ldr	r3, [pc, #372]	; (8003728 <HAL_RCC_OscConfig+0x6c4>)
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035ba:	2b18      	cmp	r3, #24
 80035bc:	f000 80ba 	beq.w	8003734 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	f040 8095 	bne.w	80036f4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ca:	4b57      	ldr	r3, [pc, #348]	; (8003728 <HAL_RCC_OscConfig+0x6c4>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a56      	ldr	r2, [pc, #344]	; (8003728 <HAL_RCC_OscConfig+0x6c4>)
 80035d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d6:	f7fe f805 	bl	80015e4 <HAL_GetTick>
 80035da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035dc:	e008      	b.n	80035f0 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035de:	f7fe f801 	bl	80015e4 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d901      	bls.n	80035f0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e10b      	b.n	8003808 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035f0:	4b4d      	ldr	r3, [pc, #308]	; (8003728 <HAL_RCC_OscConfig+0x6c4>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1f0      	bne.n	80035de <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035fc:	4b4a      	ldr	r3, [pc, #296]	; (8003728 <HAL_RCC_OscConfig+0x6c4>)
 80035fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003600:	4b4a      	ldr	r3, [pc, #296]	; (800372c <HAL_RCC_OscConfig+0x6c8>)
 8003602:	4013      	ands	r3, r2
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800360c:	0112      	lsls	r2, r2, #4
 800360e:	430a      	orrs	r2, r1
 8003610:	4945      	ldr	r1, [pc, #276]	; (8003728 <HAL_RCC_OscConfig+0x6c4>)
 8003612:	4313      	orrs	r3, r2
 8003614:	628b      	str	r3, [r1, #40]	; 0x28
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361a:	3b01      	subs	r3, #1
 800361c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003624:	3b01      	subs	r3, #1
 8003626:	025b      	lsls	r3, r3, #9
 8003628:	b29b      	uxth	r3, r3
 800362a:	431a      	orrs	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003630:	3b01      	subs	r3, #1
 8003632:	041b      	lsls	r3, r3, #16
 8003634:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003638:	431a      	orrs	r2, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800363e:	3b01      	subs	r3, #1
 8003640:	061b      	lsls	r3, r3, #24
 8003642:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003646:	4938      	ldr	r1, [pc, #224]	; (8003728 <HAL_RCC_OscConfig+0x6c4>)
 8003648:	4313      	orrs	r3, r2
 800364a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800364c:	4b36      	ldr	r3, [pc, #216]	; (8003728 <HAL_RCC_OscConfig+0x6c4>)
 800364e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003650:	4a35      	ldr	r2, [pc, #212]	; (8003728 <HAL_RCC_OscConfig+0x6c4>)
 8003652:	f023 0301 	bic.w	r3, r3, #1
 8003656:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003658:	4b33      	ldr	r3, [pc, #204]	; (8003728 <HAL_RCC_OscConfig+0x6c4>)
 800365a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800365c:	4b34      	ldr	r3, [pc, #208]	; (8003730 <HAL_RCC_OscConfig+0x6cc>)
 800365e:	4013      	ands	r3, r2
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003664:	00d2      	lsls	r2, r2, #3
 8003666:	4930      	ldr	r1, [pc, #192]	; (8003728 <HAL_RCC_OscConfig+0x6c4>)
 8003668:	4313      	orrs	r3, r2
 800366a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800366c:	4b2e      	ldr	r3, [pc, #184]	; (8003728 <HAL_RCC_OscConfig+0x6c4>)
 800366e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003670:	f023 020c 	bic.w	r2, r3, #12
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003678:	492b      	ldr	r1, [pc, #172]	; (8003728 <HAL_RCC_OscConfig+0x6c4>)
 800367a:	4313      	orrs	r3, r2
 800367c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800367e:	4b2a      	ldr	r3, [pc, #168]	; (8003728 <HAL_RCC_OscConfig+0x6c4>)
 8003680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003682:	f023 0202 	bic.w	r2, r3, #2
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368a:	4927      	ldr	r1, [pc, #156]	; (8003728 <HAL_RCC_OscConfig+0x6c4>)
 800368c:	4313      	orrs	r3, r2
 800368e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003690:	4b25      	ldr	r3, [pc, #148]	; (8003728 <HAL_RCC_OscConfig+0x6c4>)
 8003692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003694:	4a24      	ldr	r2, [pc, #144]	; (8003728 <HAL_RCC_OscConfig+0x6c4>)
 8003696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800369a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800369c:	4b22      	ldr	r3, [pc, #136]	; (8003728 <HAL_RCC_OscConfig+0x6c4>)
 800369e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a0:	4a21      	ldr	r2, [pc, #132]	; (8003728 <HAL_RCC_OscConfig+0x6c4>)
 80036a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80036a8:	4b1f      	ldr	r3, [pc, #124]	; (8003728 <HAL_RCC_OscConfig+0x6c4>)
 80036aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ac:	4a1e      	ldr	r2, [pc, #120]	; (8003728 <HAL_RCC_OscConfig+0x6c4>)
 80036ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80036b4:	4b1c      	ldr	r3, [pc, #112]	; (8003728 <HAL_RCC_OscConfig+0x6c4>)
 80036b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b8:	4a1b      	ldr	r2, [pc, #108]	; (8003728 <HAL_RCC_OscConfig+0x6c4>)
 80036ba:	f043 0301 	orr.w	r3, r3, #1
 80036be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036c0:	4b19      	ldr	r3, [pc, #100]	; (8003728 <HAL_RCC_OscConfig+0x6c4>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a18      	ldr	r2, [pc, #96]	; (8003728 <HAL_RCC_OscConfig+0x6c4>)
 80036c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036cc:	f7fd ff8a 	bl	80015e4 <HAL_GetTick>
 80036d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036d4:	f7fd ff86 	bl	80015e4 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e090      	b.n	8003808 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80036e6:	4b10      	ldr	r3, [pc, #64]	; (8003728 <HAL_RCC_OscConfig+0x6c4>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0f0      	beq.n	80036d4 <HAL_RCC_OscConfig+0x670>
 80036f2:	e088      	b.n	8003806 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036f4:	4b0c      	ldr	r3, [pc, #48]	; (8003728 <HAL_RCC_OscConfig+0x6c4>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a0b      	ldr	r2, [pc, #44]	; (8003728 <HAL_RCC_OscConfig+0x6c4>)
 80036fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003700:	f7fd ff70 	bl	80015e4 <HAL_GetTick>
 8003704:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003708:	f7fd ff6c 	bl	80015e4 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e076      	b.n	8003808 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800371a:	4b03      	ldr	r3, [pc, #12]	; (8003728 <HAL_RCC_OscConfig+0x6c4>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1f0      	bne.n	8003708 <HAL_RCC_OscConfig+0x6a4>
 8003726:	e06e      	b.n	8003806 <HAL_RCC_OscConfig+0x7a2>
 8003728:	58024400 	.word	0x58024400
 800372c:	fffffc0c 	.word	0xfffffc0c
 8003730:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003734:	4b36      	ldr	r3, [pc, #216]	; (8003810 <HAL_RCC_OscConfig+0x7ac>)
 8003736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003738:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800373a:	4b35      	ldr	r3, [pc, #212]	; (8003810 <HAL_RCC_OscConfig+0x7ac>)
 800373c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003744:	2b01      	cmp	r3, #1
 8003746:	d031      	beq.n	80037ac <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	f003 0203 	and.w	r2, r3, #3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003752:	429a      	cmp	r2, r3
 8003754:	d12a      	bne.n	80037ac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	091b      	lsrs	r3, r3, #4
 800375a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003762:	429a      	cmp	r2, r3
 8003764:	d122      	bne.n	80037ac <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003770:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003772:	429a      	cmp	r2, r3
 8003774:	d11a      	bne.n	80037ac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	0a5b      	lsrs	r3, r3, #9
 800377a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003782:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003784:	429a      	cmp	r2, r3
 8003786:	d111      	bne.n	80037ac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	0c1b      	lsrs	r3, r3, #16
 800378c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003794:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003796:	429a      	cmp	r2, r3
 8003798:	d108      	bne.n	80037ac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	0e1b      	lsrs	r3, r3, #24
 800379e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d001      	beq.n	80037b0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e02b      	b.n	8003808 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80037b0:	4b17      	ldr	r3, [pc, #92]	; (8003810 <HAL_RCC_OscConfig+0x7ac>)
 80037b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037b4:	08db      	lsrs	r3, r3, #3
 80037b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80037ba:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d01f      	beq.n	8003806 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80037c6:	4b12      	ldr	r3, [pc, #72]	; (8003810 <HAL_RCC_OscConfig+0x7ac>)
 80037c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ca:	4a11      	ldr	r2, [pc, #68]	; (8003810 <HAL_RCC_OscConfig+0x7ac>)
 80037cc:	f023 0301 	bic.w	r3, r3, #1
 80037d0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80037d2:	f7fd ff07 	bl	80015e4 <HAL_GetTick>
 80037d6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80037d8:	bf00      	nop
 80037da:	f7fd ff03 	bl	80015e4 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d0f9      	beq.n	80037da <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80037e6:	4b0a      	ldr	r3, [pc, #40]	; (8003810 <HAL_RCC_OscConfig+0x7ac>)
 80037e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037ea:	4b0a      	ldr	r3, [pc, #40]	; (8003814 <HAL_RCC_OscConfig+0x7b0>)
 80037ec:	4013      	ands	r3, r2
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80037f2:	00d2      	lsls	r2, r2, #3
 80037f4:	4906      	ldr	r1, [pc, #24]	; (8003810 <HAL_RCC_OscConfig+0x7ac>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80037fa:	4b05      	ldr	r3, [pc, #20]	; (8003810 <HAL_RCC_OscConfig+0x7ac>)
 80037fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fe:	4a04      	ldr	r2, [pc, #16]	; (8003810 <HAL_RCC_OscConfig+0x7ac>)
 8003800:	f043 0301 	orr.w	r3, r3, #1
 8003804:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3730      	adds	r7, #48	; 0x30
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	58024400 	.word	0x58024400
 8003814:	ffff0007 	.word	0xffff0007

08003818 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e19c      	b.n	8003b66 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800382c:	4b8a      	ldr	r3, [pc, #552]	; (8003a58 <HAL_RCC_ClockConfig+0x240>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 030f 	and.w	r3, r3, #15
 8003834:	683a      	ldr	r2, [r7, #0]
 8003836:	429a      	cmp	r2, r3
 8003838:	d910      	bls.n	800385c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800383a:	4b87      	ldr	r3, [pc, #540]	; (8003a58 <HAL_RCC_ClockConfig+0x240>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f023 020f 	bic.w	r2, r3, #15
 8003842:	4985      	ldr	r1, [pc, #532]	; (8003a58 <HAL_RCC_ClockConfig+0x240>)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	4313      	orrs	r3, r2
 8003848:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800384a:	4b83      	ldr	r3, [pc, #524]	; (8003a58 <HAL_RCC_ClockConfig+0x240>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 030f 	and.w	r3, r3, #15
 8003852:	683a      	ldr	r2, [r7, #0]
 8003854:	429a      	cmp	r2, r3
 8003856:	d001      	beq.n	800385c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e184      	b.n	8003b66 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0304 	and.w	r3, r3, #4
 8003864:	2b00      	cmp	r3, #0
 8003866:	d010      	beq.n	800388a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	691a      	ldr	r2, [r3, #16]
 800386c:	4b7b      	ldr	r3, [pc, #492]	; (8003a5c <HAL_RCC_ClockConfig+0x244>)
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003874:	429a      	cmp	r2, r3
 8003876:	d908      	bls.n	800388a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003878:	4b78      	ldr	r3, [pc, #480]	; (8003a5c <HAL_RCC_ClockConfig+0x244>)
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	4975      	ldr	r1, [pc, #468]	; (8003a5c <HAL_RCC_ClockConfig+0x244>)
 8003886:	4313      	orrs	r3, r2
 8003888:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0308 	and.w	r3, r3, #8
 8003892:	2b00      	cmp	r3, #0
 8003894:	d010      	beq.n	80038b8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	695a      	ldr	r2, [r3, #20]
 800389a:	4b70      	ldr	r3, [pc, #448]	; (8003a5c <HAL_RCC_ClockConfig+0x244>)
 800389c:	69db      	ldr	r3, [r3, #28]
 800389e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d908      	bls.n	80038b8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80038a6:	4b6d      	ldr	r3, [pc, #436]	; (8003a5c <HAL_RCC_ClockConfig+0x244>)
 80038a8:	69db      	ldr	r3, [r3, #28]
 80038aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	496a      	ldr	r1, [pc, #424]	; (8003a5c <HAL_RCC_ClockConfig+0x244>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0310 	and.w	r3, r3, #16
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d010      	beq.n	80038e6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	699a      	ldr	r2, [r3, #24]
 80038c8:	4b64      	ldr	r3, [pc, #400]	; (8003a5c <HAL_RCC_ClockConfig+0x244>)
 80038ca:	69db      	ldr	r3, [r3, #28]
 80038cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d908      	bls.n	80038e6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80038d4:	4b61      	ldr	r3, [pc, #388]	; (8003a5c <HAL_RCC_ClockConfig+0x244>)
 80038d6:	69db      	ldr	r3, [r3, #28]
 80038d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	495e      	ldr	r1, [pc, #376]	; (8003a5c <HAL_RCC_ClockConfig+0x244>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0320 	and.w	r3, r3, #32
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d010      	beq.n	8003914 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	69da      	ldr	r2, [r3, #28]
 80038f6:	4b59      	ldr	r3, [pc, #356]	; (8003a5c <HAL_RCC_ClockConfig+0x244>)
 80038f8:	6a1b      	ldr	r3, [r3, #32]
 80038fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038fe:	429a      	cmp	r2, r3
 8003900:	d908      	bls.n	8003914 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003902:	4b56      	ldr	r3, [pc, #344]	; (8003a5c <HAL_RCC_ClockConfig+0x244>)
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	4953      	ldr	r1, [pc, #332]	; (8003a5c <HAL_RCC_ClockConfig+0x244>)
 8003910:	4313      	orrs	r3, r2
 8003912:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d010      	beq.n	8003942 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	68da      	ldr	r2, [r3, #12]
 8003924:	4b4d      	ldr	r3, [pc, #308]	; (8003a5c <HAL_RCC_ClockConfig+0x244>)
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	f003 030f 	and.w	r3, r3, #15
 800392c:	429a      	cmp	r2, r3
 800392e:	d908      	bls.n	8003942 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003930:	4b4a      	ldr	r3, [pc, #296]	; (8003a5c <HAL_RCC_ClockConfig+0x244>)
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	f023 020f 	bic.w	r2, r3, #15
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	4947      	ldr	r1, [pc, #284]	; (8003a5c <HAL_RCC_ClockConfig+0x244>)
 800393e:	4313      	orrs	r3, r2
 8003940:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	d055      	beq.n	80039fa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800394e:	4b43      	ldr	r3, [pc, #268]	; (8003a5c <HAL_RCC_ClockConfig+0x244>)
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	4940      	ldr	r1, [pc, #256]	; (8003a5c <HAL_RCC_ClockConfig+0x244>)
 800395c:	4313      	orrs	r3, r2
 800395e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	2b02      	cmp	r3, #2
 8003966:	d107      	bne.n	8003978 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003968:	4b3c      	ldr	r3, [pc, #240]	; (8003a5c <HAL_RCC_ClockConfig+0x244>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d121      	bne.n	80039b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e0f6      	b.n	8003b66 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	2b03      	cmp	r3, #3
 800397e:	d107      	bne.n	8003990 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003980:	4b36      	ldr	r3, [pc, #216]	; (8003a5c <HAL_RCC_ClockConfig+0x244>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d115      	bne.n	80039b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e0ea      	b.n	8003b66 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d107      	bne.n	80039a8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003998:	4b30      	ldr	r3, [pc, #192]	; (8003a5c <HAL_RCC_ClockConfig+0x244>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d109      	bne.n	80039b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e0de      	b.n	8003b66 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039a8:	4b2c      	ldr	r3, [pc, #176]	; (8003a5c <HAL_RCC_ClockConfig+0x244>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0304 	and.w	r3, r3, #4
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d101      	bne.n	80039b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e0d6      	b.n	8003b66 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039b8:	4b28      	ldr	r3, [pc, #160]	; (8003a5c <HAL_RCC_ClockConfig+0x244>)
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	f023 0207 	bic.w	r2, r3, #7
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	4925      	ldr	r1, [pc, #148]	; (8003a5c <HAL_RCC_ClockConfig+0x244>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039ca:	f7fd fe0b 	bl	80015e4 <HAL_GetTick>
 80039ce:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039d0:	e00a      	b.n	80039e8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039d2:	f7fd fe07 	bl	80015e4 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d901      	bls.n	80039e8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e0be      	b.n	8003b66 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039e8:	4b1c      	ldr	r3, [pc, #112]	; (8003a5c <HAL_RCC_ClockConfig+0x244>)
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	00db      	lsls	r3, r3, #3
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d1eb      	bne.n	80039d2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d010      	beq.n	8003a28 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68da      	ldr	r2, [r3, #12]
 8003a0a:	4b14      	ldr	r3, [pc, #80]	; (8003a5c <HAL_RCC_ClockConfig+0x244>)
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	f003 030f 	and.w	r3, r3, #15
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d208      	bcs.n	8003a28 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a16:	4b11      	ldr	r3, [pc, #68]	; (8003a5c <HAL_RCC_ClockConfig+0x244>)
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	f023 020f 	bic.w	r2, r3, #15
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	490e      	ldr	r1, [pc, #56]	; (8003a5c <HAL_RCC_ClockConfig+0x244>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a28:	4b0b      	ldr	r3, [pc, #44]	; (8003a58 <HAL_RCC_ClockConfig+0x240>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 030f 	and.w	r3, r3, #15
 8003a30:	683a      	ldr	r2, [r7, #0]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d214      	bcs.n	8003a60 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a36:	4b08      	ldr	r3, [pc, #32]	; (8003a58 <HAL_RCC_ClockConfig+0x240>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f023 020f 	bic.w	r2, r3, #15
 8003a3e:	4906      	ldr	r1, [pc, #24]	; (8003a58 <HAL_RCC_ClockConfig+0x240>)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a46:	4b04      	ldr	r3, [pc, #16]	; (8003a58 <HAL_RCC_ClockConfig+0x240>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 030f 	and.w	r3, r3, #15
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d005      	beq.n	8003a60 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e086      	b.n	8003b66 <HAL_RCC_ClockConfig+0x34e>
 8003a58:	52002000 	.word	0x52002000
 8003a5c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0304 	and.w	r3, r3, #4
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d010      	beq.n	8003a8e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	691a      	ldr	r2, [r3, #16]
 8003a70:	4b3f      	ldr	r3, [pc, #252]	; (8003b70 <HAL_RCC_ClockConfig+0x358>)
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d208      	bcs.n	8003a8e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003a7c:	4b3c      	ldr	r3, [pc, #240]	; (8003b70 <HAL_RCC_ClockConfig+0x358>)
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	4939      	ldr	r1, [pc, #228]	; (8003b70 <HAL_RCC_ClockConfig+0x358>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0308 	and.w	r3, r3, #8
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d010      	beq.n	8003abc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	695a      	ldr	r2, [r3, #20]
 8003a9e:	4b34      	ldr	r3, [pc, #208]	; (8003b70 <HAL_RCC_ClockConfig+0x358>)
 8003aa0:	69db      	ldr	r3, [r3, #28]
 8003aa2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d208      	bcs.n	8003abc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003aaa:	4b31      	ldr	r3, [pc, #196]	; (8003b70 <HAL_RCC_ClockConfig+0x358>)
 8003aac:	69db      	ldr	r3, [r3, #28]
 8003aae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	492e      	ldr	r1, [pc, #184]	; (8003b70 <HAL_RCC_ClockConfig+0x358>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0310 	and.w	r3, r3, #16
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d010      	beq.n	8003aea <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	699a      	ldr	r2, [r3, #24]
 8003acc:	4b28      	ldr	r3, [pc, #160]	; (8003b70 <HAL_RCC_ClockConfig+0x358>)
 8003ace:	69db      	ldr	r3, [r3, #28]
 8003ad0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d208      	bcs.n	8003aea <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003ad8:	4b25      	ldr	r3, [pc, #148]	; (8003b70 <HAL_RCC_ClockConfig+0x358>)
 8003ada:	69db      	ldr	r3, [r3, #28]
 8003adc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	4922      	ldr	r1, [pc, #136]	; (8003b70 <HAL_RCC_ClockConfig+0x358>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0320 	and.w	r3, r3, #32
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d010      	beq.n	8003b18 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	69da      	ldr	r2, [r3, #28]
 8003afa:	4b1d      	ldr	r3, [pc, #116]	; (8003b70 <HAL_RCC_ClockConfig+0x358>)
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d208      	bcs.n	8003b18 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003b06:	4b1a      	ldr	r3, [pc, #104]	; (8003b70 <HAL_RCC_ClockConfig+0x358>)
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	4917      	ldr	r1, [pc, #92]	; (8003b70 <HAL_RCC_ClockConfig+0x358>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003b18:	f000 f834 	bl	8003b84 <HAL_RCC_GetSysClockFreq>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	4b14      	ldr	r3, [pc, #80]	; (8003b70 <HAL_RCC_ClockConfig+0x358>)
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	0a1b      	lsrs	r3, r3, #8
 8003b24:	f003 030f 	and.w	r3, r3, #15
 8003b28:	4912      	ldr	r1, [pc, #72]	; (8003b74 <HAL_RCC_ClockConfig+0x35c>)
 8003b2a:	5ccb      	ldrb	r3, [r1, r3]
 8003b2c:	f003 031f 	and.w	r3, r3, #31
 8003b30:	fa22 f303 	lsr.w	r3, r2, r3
 8003b34:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003b36:	4b0e      	ldr	r3, [pc, #56]	; (8003b70 <HAL_RCC_ClockConfig+0x358>)
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	f003 030f 	and.w	r3, r3, #15
 8003b3e:	4a0d      	ldr	r2, [pc, #52]	; (8003b74 <HAL_RCC_ClockConfig+0x35c>)
 8003b40:	5cd3      	ldrb	r3, [r2, r3]
 8003b42:	f003 031f 	and.w	r3, r3, #31
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	fa22 f303 	lsr.w	r3, r2, r3
 8003b4c:	4a0a      	ldr	r2, [pc, #40]	; (8003b78 <HAL_RCC_ClockConfig+0x360>)
 8003b4e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003b50:	4a0a      	ldr	r2, [pc, #40]	; (8003b7c <HAL_RCC_ClockConfig+0x364>)
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003b56:	4b0a      	ldr	r3, [pc, #40]	; (8003b80 <HAL_RCC_ClockConfig+0x368>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7fd fcf8 	bl	8001550 <HAL_InitTick>
 8003b60:	4603      	mov	r3, r0
 8003b62:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3718      	adds	r7, #24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	58024400 	.word	0x58024400
 8003b74:	08006ee4 	.word	0x08006ee4
 8003b78:	24000004 	.word	0x24000004
 8003b7c:	24000000 	.word	0x24000000
 8003b80:	24000008 	.word	0x24000008

08003b84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b089      	sub	sp, #36	; 0x24
 8003b88:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b8a:	4bb3      	ldr	r3, [pc, #716]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b92:	2b18      	cmp	r3, #24
 8003b94:	f200 8155 	bhi.w	8003e42 <HAL_RCC_GetSysClockFreq+0x2be>
 8003b98:	a201      	add	r2, pc, #4	; (adr r2, 8003ba0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b9e:	bf00      	nop
 8003ba0:	08003c05 	.word	0x08003c05
 8003ba4:	08003e43 	.word	0x08003e43
 8003ba8:	08003e43 	.word	0x08003e43
 8003bac:	08003e43 	.word	0x08003e43
 8003bb0:	08003e43 	.word	0x08003e43
 8003bb4:	08003e43 	.word	0x08003e43
 8003bb8:	08003e43 	.word	0x08003e43
 8003bbc:	08003e43 	.word	0x08003e43
 8003bc0:	08003c2b 	.word	0x08003c2b
 8003bc4:	08003e43 	.word	0x08003e43
 8003bc8:	08003e43 	.word	0x08003e43
 8003bcc:	08003e43 	.word	0x08003e43
 8003bd0:	08003e43 	.word	0x08003e43
 8003bd4:	08003e43 	.word	0x08003e43
 8003bd8:	08003e43 	.word	0x08003e43
 8003bdc:	08003e43 	.word	0x08003e43
 8003be0:	08003c31 	.word	0x08003c31
 8003be4:	08003e43 	.word	0x08003e43
 8003be8:	08003e43 	.word	0x08003e43
 8003bec:	08003e43 	.word	0x08003e43
 8003bf0:	08003e43 	.word	0x08003e43
 8003bf4:	08003e43 	.word	0x08003e43
 8003bf8:	08003e43 	.word	0x08003e43
 8003bfc:	08003e43 	.word	0x08003e43
 8003c00:	08003c37 	.word	0x08003c37
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c04:	4b94      	ldr	r3, [pc, #592]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0320 	and.w	r3, r3, #32
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d009      	beq.n	8003c24 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003c10:	4b91      	ldr	r3, [pc, #580]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	08db      	lsrs	r3, r3, #3
 8003c16:	f003 0303 	and.w	r3, r3, #3
 8003c1a:	4a90      	ldr	r2, [pc, #576]	; (8003e5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c20:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003c22:	e111      	b.n	8003e48 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003c24:	4b8d      	ldr	r3, [pc, #564]	; (8003e5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003c26:	61bb      	str	r3, [r7, #24]
      break;
 8003c28:	e10e      	b.n	8003e48 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003c2a:	4b8d      	ldr	r3, [pc, #564]	; (8003e60 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003c2c:	61bb      	str	r3, [r7, #24]
      break;
 8003c2e:	e10b      	b.n	8003e48 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003c30:	4b8c      	ldr	r3, [pc, #560]	; (8003e64 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003c32:	61bb      	str	r3, [r7, #24]
      break;
 8003c34:	e108      	b.n	8003e48 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c36:	4b88      	ldr	r3, [pc, #544]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3a:	f003 0303 	and.w	r3, r3, #3
 8003c3e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003c40:	4b85      	ldr	r3, [pc, #532]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c44:	091b      	lsrs	r3, r3, #4
 8003c46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c4a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003c4c:	4b82      	ldr	r3, [pc, #520]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c50:	f003 0301 	and.w	r3, r3, #1
 8003c54:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003c56:	4b80      	ldr	r3, [pc, #512]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c5a:	08db      	lsrs	r3, r3, #3
 8003c5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	fb02 f303 	mul.w	r3, r2, r3
 8003c66:	ee07 3a90 	vmov	s15, r3
 8003c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c6e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f000 80e1 	beq.w	8003e3c <HAL_RCC_GetSysClockFreq+0x2b8>
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	f000 8083 	beq.w	8003d88 <HAL_RCC_GetSysClockFreq+0x204>
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	f200 80a1 	bhi.w	8003dcc <HAL_RCC_GetSysClockFreq+0x248>
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d003      	beq.n	8003c98 <HAL_RCC_GetSysClockFreq+0x114>
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d056      	beq.n	8003d44 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003c96:	e099      	b.n	8003dcc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c98:	4b6f      	ldr	r3, [pc, #444]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0320 	and.w	r3, r3, #32
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d02d      	beq.n	8003d00 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003ca4:	4b6c      	ldr	r3, [pc, #432]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	08db      	lsrs	r3, r3, #3
 8003caa:	f003 0303 	and.w	r3, r3, #3
 8003cae:	4a6b      	ldr	r2, [pc, #428]	; (8003e5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8003cb4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	ee07 3a90 	vmov	s15, r3
 8003cbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	ee07 3a90 	vmov	s15, r3
 8003cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cce:	4b62      	ldr	r3, [pc, #392]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cd6:	ee07 3a90 	vmov	s15, r3
 8003cda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cde:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ce2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003e68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ce6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cfa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003cfe:	e087      	b.n	8003e10 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	ee07 3a90 	vmov	s15, r3
 8003d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d0a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003e6c <HAL_RCC_GetSysClockFreq+0x2e8>
 8003d0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d12:	4b51      	ldr	r3, [pc, #324]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d1a:	ee07 3a90 	vmov	s15, r3
 8003d1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d22:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d26:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003e68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003d42:	e065      	b.n	8003e10 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	ee07 3a90 	vmov	s15, r3
 8003d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d4e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003e70 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003d52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d56:	4b40      	ldr	r3, [pc, #256]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d5e:	ee07 3a90 	vmov	s15, r3
 8003d62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d66:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d6a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003e68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003d86:	e043      	b.n	8003e10 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	ee07 3a90 	vmov	s15, r3
 8003d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d92:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003e74 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003d96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d9a:	4b2f      	ldr	r3, [pc, #188]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003da2:	ee07 3a90 	vmov	s15, r3
 8003da6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003daa:	ed97 6a02 	vldr	s12, [r7, #8]
 8003dae:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003e68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003db2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003db6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dc6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003dca:	e021      	b.n	8003e10 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	ee07 3a90 	vmov	s15, r3
 8003dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dd6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003e70 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003dda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dde:	4b1e      	ldr	r3, [pc, #120]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003de6:	ee07 3a90 	vmov	s15, r3
 8003dea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dee:	ed97 6a02 	vldr	s12, [r7, #8]
 8003df2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003e68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003df6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e0a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003e0e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003e10:	4b11      	ldr	r3, [pc, #68]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e14:	0a5b      	lsrs	r3, r3, #9
 8003e16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	ee07 3a90 	vmov	s15, r3
 8003e24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e28:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e34:	ee17 3a90 	vmov	r3, s15
 8003e38:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003e3a:	e005      	b.n	8003e48 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	61bb      	str	r3, [r7, #24]
      break;
 8003e40:	e002      	b.n	8003e48 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003e42:	4b07      	ldr	r3, [pc, #28]	; (8003e60 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003e44:	61bb      	str	r3, [r7, #24]
      break;
 8003e46:	bf00      	nop
  }

  return sysclockfreq;
 8003e48:	69bb      	ldr	r3, [r7, #24]
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3724      	adds	r7, #36	; 0x24
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	58024400 	.word	0x58024400
 8003e5c:	03d09000 	.word	0x03d09000
 8003e60:	003d0900 	.word	0x003d0900
 8003e64:	007a1200 	.word	0x007a1200
 8003e68:	46000000 	.word	0x46000000
 8003e6c:	4c742400 	.word	0x4c742400
 8003e70:	4a742400 	.word	0x4a742400
 8003e74:	4af42400 	.word	0x4af42400

08003e78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003e7e:	f7ff fe81 	bl	8003b84 <HAL_RCC_GetSysClockFreq>
 8003e82:	4602      	mov	r2, r0
 8003e84:	4b10      	ldr	r3, [pc, #64]	; (8003ec8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	0a1b      	lsrs	r3, r3, #8
 8003e8a:	f003 030f 	and.w	r3, r3, #15
 8003e8e:	490f      	ldr	r1, [pc, #60]	; (8003ecc <HAL_RCC_GetHCLKFreq+0x54>)
 8003e90:	5ccb      	ldrb	r3, [r1, r3]
 8003e92:	f003 031f 	and.w	r3, r3, #31
 8003e96:	fa22 f303 	lsr.w	r3, r2, r3
 8003e9a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003e9c:	4b0a      	ldr	r3, [pc, #40]	; (8003ec8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	f003 030f 	and.w	r3, r3, #15
 8003ea4:	4a09      	ldr	r2, [pc, #36]	; (8003ecc <HAL_RCC_GetHCLKFreq+0x54>)
 8003ea6:	5cd3      	ldrb	r3, [r2, r3]
 8003ea8:	f003 031f 	and.w	r3, r3, #31
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	fa22 f303 	lsr.w	r3, r2, r3
 8003eb2:	4a07      	ldr	r2, [pc, #28]	; (8003ed0 <HAL_RCC_GetHCLKFreq+0x58>)
 8003eb4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003eb6:	4a07      	ldr	r2, [pc, #28]	; (8003ed4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003ebc:	4b04      	ldr	r3, [pc, #16]	; (8003ed0 <HAL_RCC_GetHCLKFreq+0x58>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3708      	adds	r7, #8
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	58024400 	.word	0x58024400
 8003ecc:	08006ee4 	.word	0x08006ee4
 8003ed0:	24000004 	.word	0x24000004
 8003ed4:	24000000 	.word	0x24000000

08003ed8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003edc:	f7ff ffcc 	bl	8003e78 <HAL_RCC_GetHCLKFreq>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	4b06      	ldr	r3, [pc, #24]	; (8003efc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ee4:	69db      	ldr	r3, [r3, #28]
 8003ee6:	091b      	lsrs	r3, r3, #4
 8003ee8:	f003 0307 	and.w	r3, r3, #7
 8003eec:	4904      	ldr	r1, [pc, #16]	; (8003f00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003eee:	5ccb      	ldrb	r3, [r1, r3]
 8003ef0:	f003 031f 	and.w	r3, r3, #31
 8003ef4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	58024400 	.word	0x58024400
 8003f00:	08006ee4 	.word	0x08006ee4

08003f04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003f08:	f7ff ffb6 	bl	8003e78 <HAL_RCC_GetHCLKFreq>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	4b06      	ldr	r3, [pc, #24]	; (8003f28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f10:	69db      	ldr	r3, [r3, #28]
 8003f12:	0a1b      	lsrs	r3, r3, #8
 8003f14:	f003 0307 	and.w	r3, r3, #7
 8003f18:	4904      	ldr	r1, [pc, #16]	; (8003f2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f1a:	5ccb      	ldrb	r3, [r1, r3]
 8003f1c:	f003 031f 	and.w	r3, r3, #31
 8003f20:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	58024400 	.word	0x58024400
 8003f2c:	08006ee4 	.word	0x08006ee4

08003f30 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f34:	b0c6      	sub	sp, #280	; 0x118
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f42:	2300      	movs	r3, #0
 8003f44:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f50:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003f54:	2500      	movs	r5, #0
 8003f56:	ea54 0305 	orrs.w	r3, r4, r5
 8003f5a:	d049      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f62:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f66:	d02f      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003f68:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f6c:	d828      	bhi.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003f6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f72:	d01a      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003f74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f78:	d822      	bhi.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d003      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003f7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f82:	d007      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003f84:	e01c      	b.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f86:	4bab      	ldr	r3, [pc, #684]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8a:	4aaa      	ldr	r2, [pc, #680]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f90:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003f92:	e01a      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f98:	3308      	adds	r3, #8
 8003f9a:	2102      	movs	r1, #2
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f001 fc25 	bl	80057ec <RCCEx_PLL2_Config>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003fa8:	e00f      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003faa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fae:	3328      	adds	r3, #40	; 0x28
 8003fb0:	2102      	movs	r1, #2
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f001 fccc 	bl	8005950 <RCCEx_PLL3_Config>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003fbe:	e004      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003fc6:	e000      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003fc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10a      	bne.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003fd2:	4b98      	ldr	r3, [pc, #608]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003fd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fd6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003fda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fe0:	4a94      	ldr	r2, [pc, #592]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003fe2:	430b      	orrs	r3, r1
 8003fe4:	6513      	str	r3, [r2, #80]	; 0x50
 8003fe6:	e003      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003fec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003ffc:	f04f 0900 	mov.w	r9, #0
 8004000:	ea58 0309 	orrs.w	r3, r8, r9
 8004004:	d047      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004006:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800400a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800400c:	2b04      	cmp	r3, #4
 800400e:	d82a      	bhi.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004010:	a201      	add	r2, pc, #4	; (adr r2, 8004018 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004016:	bf00      	nop
 8004018:	0800402d 	.word	0x0800402d
 800401c:	0800403b 	.word	0x0800403b
 8004020:	08004051 	.word	0x08004051
 8004024:	0800406f 	.word	0x0800406f
 8004028:	0800406f 	.word	0x0800406f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800402c:	4b81      	ldr	r3, [pc, #516]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800402e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004030:	4a80      	ldr	r2, [pc, #512]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004032:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004036:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004038:	e01a      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800403a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800403e:	3308      	adds	r3, #8
 8004040:	2100      	movs	r1, #0
 8004042:	4618      	mov	r0, r3
 8004044:	f001 fbd2 	bl	80057ec <RCCEx_PLL2_Config>
 8004048:	4603      	mov	r3, r0
 800404a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800404e:	e00f      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004050:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004054:	3328      	adds	r3, #40	; 0x28
 8004056:	2100      	movs	r1, #0
 8004058:	4618      	mov	r0, r3
 800405a:	f001 fc79 	bl	8005950 <RCCEx_PLL3_Config>
 800405e:	4603      	mov	r3, r0
 8004060:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004064:	e004      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800406c:	e000      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800406e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004070:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004074:	2b00      	cmp	r3, #0
 8004076:	d10a      	bne.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004078:	4b6e      	ldr	r3, [pc, #440]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800407a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800407c:	f023 0107 	bic.w	r1, r3, #7
 8004080:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004086:	4a6b      	ldr	r2, [pc, #428]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004088:	430b      	orrs	r3, r1
 800408a:	6513      	str	r3, [r2, #80]	; 0x50
 800408c:	e003      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800408e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004092:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004096:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800409a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800409e:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 80040a2:	f04f 0b00 	mov.w	fp, #0
 80040a6:	ea5a 030b 	orrs.w	r3, sl, fp
 80040aa:	d05b      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80040ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80040b4:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80040b8:	d03b      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80040ba:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80040be:	d834      	bhi.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80040c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040c4:	d037      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80040c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040ca:	d82e      	bhi.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80040cc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80040d0:	d033      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80040d2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80040d6:	d828      	bhi.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80040d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040dc:	d01a      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80040de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040e2:	d822      	bhi.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d003      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80040e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040ec:	d007      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80040ee:	e01c      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040f0:	4b50      	ldr	r3, [pc, #320]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80040f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f4:	4a4f      	ldr	r2, [pc, #316]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80040f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80040fc:	e01e      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004102:	3308      	adds	r3, #8
 8004104:	2100      	movs	r1, #0
 8004106:	4618      	mov	r0, r3
 8004108:	f001 fb70 	bl	80057ec <RCCEx_PLL2_Config>
 800410c:	4603      	mov	r3, r0
 800410e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004112:	e013      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004114:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004118:	3328      	adds	r3, #40	; 0x28
 800411a:	2100      	movs	r1, #0
 800411c:	4618      	mov	r0, r3
 800411e:	f001 fc17 	bl	8005950 <RCCEx_PLL3_Config>
 8004122:	4603      	mov	r3, r0
 8004124:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004128:	e008      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004130:	e004      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004132:	bf00      	nop
 8004134:	e002      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004136:	bf00      	nop
 8004138:	e000      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800413a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800413c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004140:	2b00      	cmp	r3, #0
 8004142:	d10b      	bne.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004144:	4b3b      	ldr	r3, [pc, #236]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004148:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800414c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004150:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004154:	4a37      	ldr	r2, [pc, #220]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004156:	430b      	orrs	r3, r1
 8004158:	6593      	str	r3, [r2, #88]	; 0x58
 800415a:	e003      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800415c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004160:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004164:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800416c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004170:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004174:	2300      	movs	r3, #0
 8004176:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800417a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800417e:	460b      	mov	r3, r1
 8004180:	4313      	orrs	r3, r2
 8004182:	d05d      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004184:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004188:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800418c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004190:	d03b      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004192:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004196:	d834      	bhi.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004198:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800419c:	d037      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800419e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041a2:	d82e      	bhi.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80041a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80041a8:	d033      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80041aa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80041ae:	d828      	bhi.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80041b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041b4:	d01a      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80041b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041ba:	d822      	bhi.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d003      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80041c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041c4:	d007      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80041c6:	e01c      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041c8:	4b1a      	ldr	r3, [pc, #104]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80041ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041cc:	4a19      	ldr	r2, [pc, #100]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80041ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80041d4:	e01e      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041da:	3308      	adds	r3, #8
 80041dc:	2100      	movs	r1, #0
 80041de:	4618      	mov	r0, r3
 80041e0:	f001 fb04 	bl	80057ec <RCCEx_PLL2_Config>
 80041e4:	4603      	mov	r3, r0
 80041e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80041ea:	e013      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80041ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041f0:	3328      	adds	r3, #40	; 0x28
 80041f2:	2100      	movs	r1, #0
 80041f4:	4618      	mov	r0, r3
 80041f6:	f001 fbab 	bl	8005950 <RCCEx_PLL3_Config>
 80041fa:	4603      	mov	r3, r0
 80041fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004200:	e008      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004208:	e004      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800420a:	bf00      	nop
 800420c:	e002      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800420e:	bf00      	nop
 8004210:	e000      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004212:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004214:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004218:	2b00      	cmp	r3, #0
 800421a:	d10d      	bne.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800421c:	4b05      	ldr	r3, [pc, #20]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800421e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004220:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004224:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004228:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800422c:	4a01      	ldr	r2, [pc, #4]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800422e:	430b      	orrs	r3, r1
 8004230:	6593      	str	r3, [r2, #88]	; 0x58
 8004232:	e005      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004234:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004238:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800423c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004240:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004248:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800424c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004250:	2300      	movs	r3, #0
 8004252:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004256:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800425a:	460b      	mov	r3, r1
 800425c:	4313      	orrs	r3, r2
 800425e:	d03a      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004260:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004266:	2b30      	cmp	r3, #48	; 0x30
 8004268:	d01f      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800426a:	2b30      	cmp	r3, #48	; 0x30
 800426c:	d819      	bhi.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800426e:	2b20      	cmp	r3, #32
 8004270:	d00c      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004272:	2b20      	cmp	r3, #32
 8004274:	d815      	bhi.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004276:	2b00      	cmp	r3, #0
 8004278:	d019      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800427a:	2b10      	cmp	r3, #16
 800427c:	d111      	bne.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800427e:	4baa      	ldr	r3, [pc, #680]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004282:	4aa9      	ldr	r2, [pc, #676]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004284:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004288:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800428a:	e011      	b.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800428c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004290:	3308      	adds	r3, #8
 8004292:	2102      	movs	r1, #2
 8004294:	4618      	mov	r0, r3
 8004296:	f001 faa9 	bl	80057ec <RCCEx_PLL2_Config>
 800429a:	4603      	mov	r3, r0
 800429c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80042a0:	e006      	b.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80042a8:	e002      	b.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80042aa:	bf00      	nop
 80042ac:	e000      	b.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80042ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d10a      	bne.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80042b8:	4b9b      	ldr	r3, [pc, #620]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80042ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042bc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80042c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042c6:	4a98      	ldr	r2, [pc, #608]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80042c8:	430b      	orrs	r3, r1
 80042ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80042cc:	e003      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80042d2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80042d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042de:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80042e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80042e6:	2300      	movs	r3, #0
 80042e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80042ec:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80042f0:	460b      	mov	r3, r1
 80042f2:	4313      	orrs	r3, r2
 80042f4:	d051      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80042f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004300:	d035      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8004302:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004306:	d82e      	bhi.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004308:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800430c:	d031      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800430e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004312:	d828      	bhi.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004314:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004318:	d01a      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800431a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800431e:	d822      	bhi.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004320:	2b00      	cmp	r3, #0
 8004322:	d003      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8004324:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004328:	d007      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800432a:	e01c      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800432c:	4b7e      	ldr	r3, [pc, #504]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800432e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004330:	4a7d      	ldr	r2, [pc, #500]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004332:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004336:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004338:	e01c      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800433a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800433e:	3308      	adds	r3, #8
 8004340:	2100      	movs	r1, #0
 8004342:	4618      	mov	r0, r3
 8004344:	f001 fa52 	bl	80057ec <RCCEx_PLL2_Config>
 8004348:	4603      	mov	r3, r0
 800434a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800434e:	e011      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004350:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004354:	3328      	adds	r3, #40	; 0x28
 8004356:	2100      	movs	r1, #0
 8004358:	4618      	mov	r0, r3
 800435a:	f001 faf9 	bl	8005950 <RCCEx_PLL3_Config>
 800435e:	4603      	mov	r3, r0
 8004360:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004364:	e006      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800436c:	e002      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800436e:	bf00      	nop
 8004370:	e000      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004372:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004374:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004378:	2b00      	cmp	r3, #0
 800437a:	d10a      	bne.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800437c:	4b6a      	ldr	r3, [pc, #424]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800437e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004380:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004384:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800438a:	4a67      	ldr	r2, [pc, #412]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800438c:	430b      	orrs	r3, r1
 800438e:	6513      	str	r3, [r2, #80]	; 0x50
 8004390:	e003      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004392:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004396:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800439a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800439e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80043a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80043aa:	2300      	movs	r3, #0
 80043ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80043b0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80043b4:	460b      	mov	r3, r1
 80043b6:	4313      	orrs	r3, r2
 80043b8:	d053      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80043ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043c4:	d033      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80043c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043ca:	d82c      	bhi.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80043cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80043d0:	d02f      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x502>
 80043d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80043d6:	d826      	bhi.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80043d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80043dc:	d02b      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80043de:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80043e2:	d820      	bhi.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80043e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043e8:	d012      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80043ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043ee:	d81a      	bhi.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d022      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80043f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043f8:	d115      	bne.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80043fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043fe:	3308      	adds	r3, #8
 8004400:	2101      	movs	r1, #1
 8004402:	4618      	mov	r0, r3
 8004404:	f001 f9f2 	bl	80057ec <RCCEx_PLL2_Config>
 8004408:	4603      	mov	r3, r0
 800440a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800440e:	e015      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004410:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004414:	3328      	adds	r3, #40	; 0x28
 8004416:	2101      	movs	r1, #1
 8004418:	4618      	mov	r0, r3
 800441a:	f001 fa99 	bl	8005950 <RCCEx_PLL3_Config>
 800441e:	4603      	mov	r3, r0
 8004420:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004424:	e00a      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800442c:	e006      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800442e:	bf00      	nop
 8004430:	e004      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004432:	bf00      	nop
 8004434:	e002      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004436:	bf00      	nop
 8004438:	e000      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800443a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800443c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004440:	2b00      	cmp	r3, #0
 8004442:	d10a      	bne.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004444:	4b38      	ldr	r3, [pc, #224]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004448:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800444c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004452:	4a35      	ldr	r2, [pc, #212]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004454:	430b      	orrs	r3, r1
 8004456:	6513      	str	r3, [r2, #80]	; 0x50
 8004458:	e003      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800445a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800445e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004462:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800446e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004472:	2300      	movs	r3, #0
 8004474:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004478:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800447c:	460b      	mov	r3, r1
 800447e:	4313      	orrs	r3, r2
 8004480:	d058      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004482:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004486:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800448a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800448e:	d033      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004490:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004494:	d82c      	bhi.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800449a:	d02f      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800449c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044a0:	d826      	bhi.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80044a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80044a6:	d02b      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80044a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80044ac:	d820      	bhi.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80044ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044b2:	d012      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80044b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044b8:	d81a      	bhi.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d022      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80044be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044c2:	d115      	bne.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044c8:	3308      	adds	r3, #8
 80044ca:	2101      	movs	r1, #1
 80044cc:	4618      	mov	r0, r3
 80044ce:	f001 f98d 	bl	80057ec <RCCEx_PLL2_Config>
 80044d2:	4603      	mov	r3, r0
 80044d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80044d8:	e015      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044de:	3328      	adds	r3, #40	; 0x28
 80044e0:	2101      	movs	r1, #1
 80044e2:	4618      	mov	r0, r3
 80044e4:	f001 fa34 	bl	8005950 <RCCEx_PLL3_Config>
 80044e8:	4603      	mov	r3, r0
 80044ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80044ee:	e00a      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80044f6:	e006      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80044f8:	bf00      	nop
 80044fa:	e004      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80044fc:	bf00      	nop
 80044fe:	e002      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004500:	bf00      	nop
 8004502:	e000      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004504:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004506:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800450a:	2b00      	cmp	r3, #0
 800450c:	d10e      	bne.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800450e:	4b06      	ldr	r3, [pc, #24]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004512:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004516:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800451a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800451e:	4a02      	ldr	r2, [pc, #8]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004520:	430b      	orrs	r3, r1
 8004522:	6593      	str	r3, [r2, #88]	; 0x58
 8004524:	e006      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004526:	bf00      	nop
 8004528:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800452c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004530:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004534:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004540:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004544:	2300      	movs	r3, #0
 8004546:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800454a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800454e:	460b      	mov	r3, r1
 8004550:	4313      	orrs	r3, r2
 8004552:	d037      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004554:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004558:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800455a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800455e:	d00e      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004560:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004564:	d816      	bhi.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004566:	2b00      	cmp	r3, #0
 8004568:	d018      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800456a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800456e:	d111      	bne.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004570:	4bc4      	ldr	r3, [pc, #784]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004574:	4ac3      	ldr	r2, [pc, #780]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004576:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800457a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800457c:	e00f      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800457e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004582:	3308      	adds	r3, #8
 8004584:	2101      	movs	r1, #1
 8004586:	4618      	mov	r0, r3
 8004588:	f001 f930 	bl	80057ec <RCCEx_PLL2_Config>
 800458c:	4603      	mov	r3, r0
 800458e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004592:	e004      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800459a:	e000      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800459c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800459e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d10a      	bne.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80045a6:	4bb7      	ldr	r3, [pc, #732]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045aa:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80045ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045b4:	4ab3      	ldr	r2, [pc, #716]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045b6:	430b      	orrs	r3, r1
 80045b8:	6513      	str	r3, [r2, #80]	; 0x50
 80045ba:	e003      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80045c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80045c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045cc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80045d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80045d4:	2300      	movs	r3, #0
 80045d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80045da:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80045de:	460b      	mov	r3, r1
 80045e0:	4313      	orrs	r3, r2
 80045e2:	d039      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80045e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045ea:	2b03      	cmp	r3, #3
 80045ec:	d81c      	bhi.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80045ee:	a201      	add	r2, pc, #4	; (adr r2, 80045f4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80045f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f4:	08004631 	.word	0x08004631
 80045f8:	08004605 	.word	0x08004605
 80045fc:	08004613 	.word	0x08004613
 8004600:	08004631 	.word	0x08004631
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004604:	4b9f      	ldr	r3, [pc, #636]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004608:	4a9e      	ldr	r2, [pc, #632]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800460a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800460e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004610:	e00f      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004612:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004616:	3308      	adds	r3, #8
 8004618:	2102      	movs	r1, #2
 800461a:	4618      	mov	r0, r3
 800461c:	f001 f8e6 	bl	80057ec <RCCEx_PLL2_Config>
 8004620:	4603      	mov	r3, r0
 8004622:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004626:	e004      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800462e:	e000      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004630:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004632:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004636:	2b00      	cmp	r3, #0
 8004638:	d10a      	bne.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800463a:	4b92      	ldr	r3, [pc, #584]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800463c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800463e:	f023 0103 	bic.w	r1, r3, #3
 8004642:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004646:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004648:	4a8e      	ldr	r2, [pc, #568]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800464a:	430b      	orrs	r3, r1
 800464c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800464e:	e003      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004650:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004654:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004658:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800465c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004660:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004664:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004668:	2300      	movs	r3, #0
 800466a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800466e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004672:	460b      	mov	r3, r1
 8004674:	4313      	orrs	r3, r2
 8004676:	f000 8099 	beq.w	80047ac <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800467a:	4b83      	ldr	r3, [pc, #524]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a82      	ldr	r2, [pc, #520]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004684:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004686:	f7fc ffad 	bl	80015e4 <HAL_GetTick>
 800468a:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800468e:	e00b      	b.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004690:	f7fc ffa8 	bl	80015e4 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	2b64      	cmp	r3, #100	; 0x64
 800469e:	d903      	bls.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80046a6:	e005      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046a8:	4b77      	ldr	r3, [pc, #476]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d0ed      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80046b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d173      	bne.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80046bc:	4b71      	ldr	r3, [pc, #452]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80046be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80046c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80046c8:	4053      	eors	r3, r2
 80046ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d015      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046d2:	4b6c      	ldr	r3, [pc, #432]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80046d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046da:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046de:	4b69      	ldr	r3, [pc, #420]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80046e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e2:	4a68      	ldr	r2, [pc, #416]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80046e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046e8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046ea:	4b66      	ldr	r3, [pc, #408]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80046ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ee:	4a65      	ldr	r2, [pc, #404]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80046f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046f4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80046f6:	4a63      	ldr	r2, [pc, #396]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80046f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046fc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80046fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004702:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004706:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800470a:	d118      	bne.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800470c:	f7fc ff6a 	bl	80015e4 <HAL_GetTick>
 8004710:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004714:	e00d      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004716:	f7fc ff65 	bl	80015e4 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004720:	1ad2      	subs	r2, r2, r3
 8004722:	f241 3388 	movw	r3, #5000	; 0x1388
 8004726:	429a      	cmp	r2, r3
 8004728:	d903      	bls.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8004730:	e005      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004732:	4b54      	ldr	r3, [pc, #336]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d0eb      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800473e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004742:	2b00      	cmp	r3, #0
 8004744:	d129      	bne.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004746:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800474a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800474e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004752:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004756:	d10e      	bne.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004758:	4b4a      	ldr	r3, [pc, #296]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004760:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004764:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004768:	091a      	lsrs	r2, r3, #4
 800476a:	4b48      	ldr	r3, [pc, #288]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800476c:	4013      	ands	r3, r2
 800476e:	4a45      	ldr	r2, [pc, #276]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004770:	430b      	orrs	r3, r1
 8004772:	6113      	str	r3, [r2, #16]
 8004774:	e005      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004776:	4b43      	ldr	r3, [pc, #268]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	4a42      	ldr	r2, [pc, #264]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800477c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004780:	6113      	str	r3, [r2, #16]
 8004782:	4b40      	ldr	r3, [pc, #256]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004784:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004786:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800478a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800478e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004792:	4a3c      	ldr	r2, [pc, #240]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004794:	430b      	orrs	r3, r1
 8004796:	6713      	str	r3, [r2, #112]	; 0x70
 8004798:	e008      	b.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800479a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800479e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 80047a2:	e003      	b.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80047a8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80047ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b4:	f002 0301 	and.w	r3, r2, #1
 80047b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80047bc:	2300      	movs	r3, #0
 80047be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80047c2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80047c6:	460b      	mov	r3, r1
 80047c8:	4313      	orrs	r3, r2
 80047ca:	f000 808f 	beq.w	80048ec <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80047ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047d4:	2b28      	cmp	r3, #40	; 0x28
 80047d6:	d871      	bhi.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80047d8:	a201      	add	r2, pc, #4	; (adr r2, 80047e0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80047da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047de:	bf00      	nop
 80047e0:	080048c5 	.word	0x080048c5
 80047e4:	080048bd 	.word	0x080048bd
 80047e8:	080048bd 	.word	0x080048bd
 80047ec:	080048bd 	.word	0x080048bd
 80047f0:	080048bd 	.word	0x080048bd
 80047f4:	080048bd 	.word	0x080048bd
 80047f8:	080048bd 	.word	0x080048bd
 80047fc:	080048bd 	.word	0x080048bd
 8004800:	08004891 	.word	0x08004891
 8004804:	080048bd 	.word	0x080048bd
 8004808:	080048bd 	.word	0x080048bd
 800480c:	080048bd 	.word	0x080048bd
 8004810:	080048bd 	.word	0x080048bd
 8004814:	080048bd 	.word	0x080048bd
 8004818:	080048bd 	.word	0x080048bd
 800481c:	080048bd 	.word	0x080048bd
 8004820:	080048a7 	.word	0x080048a7
 8004824:	080048bd 	.word	0x080048bd
 8004828:	080048bd 	.word	0x080048bd
 800482c:	080048bd 	.word	0x080048bd
 8004830:	080048bd 	.word	0x080048bd
 8004834:	080048bd 	.word	0x080048bd
 8004838:	080048bd 	.word	0x080048bd
 800483c:	080048bd 	.word	0x080048bd
 8004840:	080048c5 	.word	0x080048c5
 8004844:	080048bd 	.word	0x080048bd
 8004848:	080048bd 	.word	0x080048bd
 800484c:	080048bd 	.word	0x080048bd
 8004850:	080048bd 	.word	0x080048bd
 8004854:	080048bd 	.word	0x080048bd
 8004858:	080048bd 	.word	0x080048bd
 800485c:	080048bd 	.word	0x080048bd
 8004860:	080048c5 	.word	0x080048c5
 8004864:	080048bd 	.word	0x080048bd
 8004868:	080048bd 	.word	0x080048bd
 800486c:	080048bd 	.word	0x080048bd
 8004870:	080048bd 	.word	0x080048bd
 8004874:	080048bd 	.word	0x080048bd
 8004878:	080048bd 	.word	0x080048bd
 800487c:	080048bd 	.word	0x080048bd
 8004880:	080048c5 	.word	0x080048c5
 8004884:	58024400 	.word	0x58024400
 8004888:	58024800 	.word	0x58024800
 800488c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004890:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004894:	3308      	adds	r3, #8
 8004896:	2101      	movs	r1, #1
 8004898:	4618      	mov	r0, r3
 800489a:	f000 ffa7 	bl	80057ec <RCCEx_PLL2_Config>
 800489e:	4603      	mov	r3, r0
 80048a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80048a4:	e00f      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048aa:	3328      	adds	r3, #40	; 0x28
 80048ac:	2101      	movs	r1, #1
 80048ae:	4618      	mov	r0, r3
 80048b0:	f001 f84e 	bl	8005950 <RCCEx_PLL3_Config>
 80048b4:	4603      	mov	r3, r0
 80048b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80048ba:	e004      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80048c2:	e000      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80048c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048c6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d10a      	bne.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80048ce:	4bbf      	ldr	r3, [pc, #764]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80048d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80048d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048dc:	4abb      	ldr	r2, [pc, #748]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80048de:	430b      	orrs	r3, r1
 80048e0:	6553      	str	r3, [r2, #84]	; 0x54
 80048e2:	e003      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80048e8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80048ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f4:	f002 0302 	and.w	r3, r2, #2
 80048f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048fc:	2300      	movs	r3, #0
 80048fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004902:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004906:	460b      	mov	r3, r1
 8004908:	4313      	orrs	r3, r2
 800490a:	d041      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800490c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004912:	2b05      	cmp	r3, #5
 8004914:	d824      	bhi.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8004916:	a201      	add	r2, pc, #4	; (adr r2, 800491c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8004918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800491c:	08004969 	.word	0x08004969
 8004920:	08004935 	.word	0x08004935
 8004924:	0800494b 	.word	0x0800494b
 8004928:	08004969 	.word	0x08004969
 800492c:	08004969 	.word	0x08004969
 8004930:	08004969 	.word	0x08004969
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004934:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004938:	3308      	adds	r3, #8
 800493a:	2101      	movs	r1, #1
 800493c:	4618      	mov	r0, r3
 800493e:	f000 ff55 	bl	80057ec <RCCEx_PLL2_Config>
 8004942:	4603      	mov	r3, r0
 8004944:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004948:	e00f      	b.n	800496a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800494a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800494e:	3328      	adds	r3, #40	; 0x28
 8004950:	2101      	movs	r1, #1
 8004952:	4618      	mov	r0, r3
 8004954:	f000 fffc 	bl	8005950 <RCCEx_PLL3_Config>
 8004958:	4603      	mov	r3, r0
 800495a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800495e:	e004      	b.n	800496a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004966:	e000      	b.n	800496a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8004968:	bf00      	nop
    }

    if (ret == HAL_OK)
 800496a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10a      	bne.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004972:	4b96      	ldr	r3, [pc, #600]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004976:	f023 0107 	bic.w	r1, r3, #7
 800497a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800497e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004980:	4a92      	ldr	r2, [pc, #584]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004982:	430b      	orrs	r3, r1
 8004984:	6553      	str	r3, [r2, #84]	; 0x54
 8004986:	e003      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004988:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800498c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004990:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004998:	f002 0304 	and.w	r3, r2, #4
 800499c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80049a0:	2300      	movs	r3, #0
 80049a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80049a6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80049aa:	460b      	mov	r3, r1
 80049ac:	4313      	orrs	r3, r2
 80049ae:	d044      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80049b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b8:	2b05      	cmp	r3, #5
 80049ba:	d825      	bhi.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80049bc:	a201      	add	r2, pc, #4	; (adr r2, 80049c4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80049be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049c2:	bf00      	nop
 80049c4:	08004a11 	.word	0x08004a11
 80049c8:	080049dd 	.word	0x080049dd
 80049cc:	080049f3 	.word	0x080049f3
 80049d0:	08004a11 	.word	0x08004a11
 80049d4:	08004a11 	.word	0x08004a11
 80049d8:	08004a11 	.word	0x08004a11
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80049dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049e0:	3308      	adds	r3, #8
 80049e2:	2101      	movs	r1, #1
 80049e4:	4618      	mov	r0, r3
 80049e6:	f000 ff01 	bl	80057ec <RCCEx_PLL2_Config>
 80049ea:	4603      	mov	r3, r0
 80049ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80049f0:	e00f      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80049f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049f6:	3328      	adds	r3, #40	; 0x28
 80049f8:	2101      	movs	r1, #1
 80049fa:	4618      	mov	r0, r3
 80049fc:	f000 ffa8 	bl	8005950 <RCCEx_PLL3_Config>
 8004a00:	4603      	mov	r3, r0
 8004a02:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004a06:	e004      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004a0e:	e000      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8004a10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a12:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d10b      	bne.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a1a:	4b6c      	ldr	r3, [pc, #432]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a1e:	f023 0107 	bic.w	r1, r3, #7
 8004a22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a2a:	4a68      	ldr	r2, [pc, #416]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004a2c:	430b      	orrs	r3, r1
 8004a2e:	6593      	str	r3, [r2, #88]	; 0x58
 8004a30:	e003      	b.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a32:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004a36:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a42:	f002 0320 	and.w	r3, r2, #32
 8004a46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004a50:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004a54:	460b      	mov	r3, r1
 8004a56:	4313      	orrs	r3, r2
 8004a58:	d055      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a66:	d033      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8004a68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a6c:	d82c      	bhi.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a72:	d02f      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004a74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a78:	d826      	bhi.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004a7a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a7e:	d02b      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004a80:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a84:	d820      	bhi.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004a86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a8a:	d012      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8004a8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a90:	d81a      	bhi.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d022      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004a96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a9a:	d115      	bne.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004aa0:	3308      	adds	r3, #8
 8004aa2:	2100      	movs	r1, #0
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f000 fea1 	bl	80057ec <RCCEx_PLL2_Config>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004ab0:	e015      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ab6:	3328      	adds	r3, #40	; 0x28
 8004ab8:	2102      	movs	r1, #2
 8004aba:	4618      	mov	r0, r3
 8004abc:	f000 ff48 	bl	8005950 <RCCEx_PLL3_Config>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004ac6:	e00a      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004ace:	e006      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004ad0:	bf00      	nop
 8004ad2:	e004      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004ad4:	bf00      	nop
 8004ad6:	e002      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004ad8:	bf00      	nop
 8004ada:	e000      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004adc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ade:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d10b      	bne.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ae6:	4b39      	ldr	r3, [pc, #228]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aea:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004aee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004af2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004af6:	4a35      	ldr	r2, [pc, #212]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004af8:	430b      	orrs	r3, r1
 8004afa:	6553      	str	r3, [r2, #84]	; 0x54
 8004afc:	e003      	b.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004afe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004b02:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b0e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004b12:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b16:	2300      	movs	r3, #0
 8004b18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004b1c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004b20:	460b      	mov	r3, r1
 8004b22:	4313      	orrs	r3, r2
 8004b24:	d058      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004b26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b2e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004b32:	d033      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8004b34:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004b38:	d82c      	bhi.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004b3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b3e:	d02f      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004b40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b44:	d826      	bhi.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004b46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b4a:	d02b      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004b4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b50:	d820      	bhi.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004b52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b56:	d012      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8004b58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b5c:	d81a      	bhi.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d022      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004b62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b66:	d115      	bne.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b6c:	3308      	adds	r3, #8
 8004b6e:	2100      	movs	r1, #0
 8004b70:	4618      	mov	r0, r3
 8004b72:	f000 fe3b 	bl	80057ec <RCCEx_PLL2_Config>
 8004b76:	4603      	mov	r3, r0
 8004b78:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004b7c:	e015      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b82:	3328      	adds	r3, #40	; 0x28
 8004b84:	2102      	movs	r1, #2
 8004b86:	4618      	mov	r0, r3
 8004b88:	f000 fee2 	bl	8005950 <RCCEx_PLL3_Config>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004b92:	e00a      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004b9a:	e006      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004b9c:	bf00      	nop
 8004b9e:	e004      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004ba0:	bf00      	nop
 8004ba2:	e002      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004ba4:	bf00      	nop
 8004ba6:	e000      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004ba8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004baa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10e      	bne.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004bb2:	4b06      	ldr	r3, [pc, #24]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004bba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bc2:	4a02      	ldr	r2, [pc, #8]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004bc4:	430b      	orrs	r3, r1
 8004bc6:	6593      	str	r3, [r2, #88]	; 0x58
 8004bc8:	e006      	b.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8004bca:	bf00      	nop
 8004bcc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bd0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004bd4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004be4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004be8:	2300      	movs	r3, #0
 8004bea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004bee:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	d055      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004bf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bfc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c00:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004c04:	d033      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8004c06:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004c0a:	d82c      	bhi.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004c0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c10:	d02f      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004c12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c16:	d826      	bhi.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004c18:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004c1c:	d02b      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004c1e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004c22:	d820      	bhi.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004c24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c28:	d012      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8004c2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c2e:	d81a      	bhi.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d022      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004c34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c38:	d115      	bne.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c3e:	3308      	adds	r3, #8
 8004c40:	2100      	movs	r1, #0
 8004c42:	4618      	mov	r0, r3
 8004c44:	f000 fdd2 	bl	80057ec <RCCEx_PLL2_Config>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004c4e:	e015      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c54:	3328      	adds	r3, #40	; 0x28
 8004c56:	2102      	movs	r1, #2
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f000 fe79 	bl	8005950 <RCCEx_PLL3_Config>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004c64:	e00a      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004c6c:	e006      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004c6e:	bf00      	nop
 8004c70:	e004      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004c72:	bf00      	nop
 8004c74:	e002      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004c76:	bf00      	nop
 8004c78:	e000      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004c7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c7c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d10b      	bne.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004c84:	4ba0      	ldr	r3, [pc, #640]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c88:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c90:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c94:	4a9c      	ldr	r2, [pc, #624]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004c96:	430b      	orrs	r3, r1
 8004c98:	6593      	str	r3, [r2, #88]	; 0x58
 8004c9a:	e003      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c9c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004ca0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cac:	f002 0308 	and.w	r3, r2, #8
 8004cb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004cba:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	d01e      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8004cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ccc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cd0:	d10c      	bne.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004cd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cd6:	3328      	adds	r3, #40	; 0x28
 8004cd8:	2102      	movs	r1, #2
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f000 fe38 	bl	8005950 <RCCEx_PLL3_Config>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d002      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004cec:	4b86      	ldr	r3, [pc, #536]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cfc:	4a82      	ldr	r2, [pc, #520]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004cfe:	430b      	orrs	r3, r1
 8004d00:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d0a:	f002 0310 	and.w	r3, r2, #16
 8004d0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d12:	2300      	movs	r3, #0
 8004d14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d18:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	d01e      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004d22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d2e:	d10c      	bne.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d34:	3328      	adds	r3, #40	; 0x28
 8004d36:	2102      	movs	r1, #2
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f000 fe09 	bl	8005950 <RCCEx_PLL3_Config>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d002      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d4a:	4b6f      	ldr	r3, [pc, #444]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d4e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d5a:	4a6b      	ldr	r2, [pc, #428]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004d5c:	430b      	orrs	r3, r1
 8004d5e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d68:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004d6c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d6e:	2300      	movs	r3, #0
 8004d70:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d72:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004d76:	460b      	mov	r3, r1
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	d03e      	beq.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d80:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004d84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d88:	d022      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004d8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d8e:	d81b      	bhi.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d003      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8004d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d98:	d00b      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8004d9a:	e015      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004da0:	3308      	adds	r3, #8
 8004da2:	2100      	movs	r1, #0
 8004da4:	4618      	mov	r0, r3
 8004da6:	f000 fd21 	bl	80057ec <RCCEx_PLL2_Config>
 8004daa:	4603      	mov	r3, r0
 8004dac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004db0:	e00f      	b.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004db6:	3328      	adds	r3, #40	; 0x28
 8004db8:	2102      	movs	r1, #2
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f000 fdc8 	bl	8005950 <RCCEx_PLL3_Config>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004dc6:	e004      	b.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004dce:	e000      	b.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8004dd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dd2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d10b      	bne.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004dda:	4b4b      	ldr	r3, [pc, #300]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dde:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004de6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004dea:	4a47      	ldr	r2, [pc, #284]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004dec:	430b      	orrs	r3, r1
 8004dee:	6593      	str	r3, [r2, #88]	; 0x58
 8004df0:	e003      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004df2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004df6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e02:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004e06:	673b      	str	r3, [r7, #112]	; 0x70
 8004e08:	2300      	movs	r3, #0
 8004e0a:	677b      	str	r3, [r7, #116]	; 0x74
 8004e0c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004e10:	460b      	mov	r3, r1
 8004e12:	4313      	orrs	r3, r2
 8004e14:	d03b      	beq.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e1e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e22:	d01f      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004e24:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e28:	d818      	bhi.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8004e2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e2e:	d003      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8004e30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e34:	d007      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8004e36:	e011      	b.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e38:	4b33      	ldr	r3, [pc, #204]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3c:	4a32      	ldr	r2, [pc, #200]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004e3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004e44:	e00f      	b.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e4a:	3328      	adds	r3, #40	; 0x28
 8004e4c:	2101      	movs	r1, #1
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f000 fd7e 	bl	8005950 <RCCEx_PLL3_Config>
 8004e54:	4603      	mov	r3, r0
 8004e56:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8004e5a:	e004      	b.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004e62:	e000      	b.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8004e64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e66:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d10b      	bne.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e6e:	4b26      	ldr	r3, [pc, #152]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e72:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004e76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e7e:	4a22      	ldr	r2, [pc, #136]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004e80:	430b      	orrs	r3, r1
 8004e82:	6553      	str	r3, [r2, #84]	; 0x54
 8004e84:	e003      	b.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e86:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004e8a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004e8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e96:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004e9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ea0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	d034      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d003      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8004eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eb8:	d007      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8004eba:	e011      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ebc:	4b12      	ldr	r3, [pc, #72]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec0:	4a11      	ldr	r2, [pc, #68]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004ec2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ec6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004ec8:	e00e      	b.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004eca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ece:	3308      	adds	r3, #8
 8004ed0:	2102      	movs	r1, #2
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f000 fc8a 	bl	80057ec <RCCEx_PLL2_Config>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004ede:	e003      	b.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004ee6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ee8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d10d      	bne.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004ef0:	4b05      	ldr	r3, [pc, #20]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ef4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004efc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004efe:	4a02      	ldr	r2, [pc, #8]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004f00:	430b      	orrs	r3, r1
 8004f02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f04:	e006      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8004f06:	bf00      	nop
 8004f08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f0c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004f10:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004f14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f1c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004f20:	663b      	str	r3, [r7, #96]	; 0x60
 8004f22:	2300      	movs	r3, #0
 8004f24:	667b      	str	r3, [r7, #100]	; 0x64
 8004f26:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	d00c      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f34:	3328      	adds	r3, #40	; 0x28
 8004f36:	2102      	movs	r1, #2
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f000 fd09 	bl	8005950 <RCCEx_PLL3_Config>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d002      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004f4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f52:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004f56:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f58:	2300      	movs	r3, #0
 8004f5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f5c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004f60:	460b      	mov	r3, r1
 8004f62:	4313      	orrs	r3, r2
 8004f64:	d036      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004f66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f70:	d018      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8004f72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f76:	d811      	bhi.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004f78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f7c:	d014      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8004f7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f82:	d80b      	bhi.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d011      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004f88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f8c:	d106      	bne.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f8e:	4bb7      	ldr	r3, [pc, #732]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f92:	4ab6      	ldr	r2, [pc, #728]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f98:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004f9a:	e008      	b.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004fa2:	e004      	b.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004fa4:	bf00      	nop
 8004fa6:	e002      	b.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004fa8:	bf00      	nop
 8004faa:	e000      	b.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004fac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d10a      	bne.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004fb6:	4bad      	ldr	r3, [pc, #692]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004fbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fc4:	4aa9      	ldr	r2, [pc, #676]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004fc6:	430b      	orrs	r3, r1
 8004fc8:	6553      	str	r3, [r2, #84]	; 0x54
 8004fca:	e003      	b.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fcc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004fd0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fdc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004fe0:	653b      	str	r3, [r7, #80]	; 0x50
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	657b      	str	r3, [r7, #84]	; 0x54
 8004fe6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004fea:	460b      	mov	r3, r1
 8004fec:	4313      	orrs	r3, r2
 8004fee:	d009      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ff0:	4b9e      	ldr	r3, [pc, #632]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ff4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ffe:	4a9b      	ldr	r2, [pc, #620]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005000:	430b      	orrs	r3, r1
 8005002:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005004:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800500c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005010:	64bb      	str	r3, [r7, #72]	; 0x48
 8005012:	2300      	movs	r3, #0
 8005014:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005016:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800501a:	460b      	mov	r3, r1
 800501c:	4313      	orrs	r3, r2
 800501e:	d009      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005020:	4b92      	ldr	r3, [pc, #584]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005024:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8005028:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800502c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800502e:	4a8f      	ldr	r2, [pc, #572]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005030:	430b      	orrs	r3, r1
 8005032:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005034:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8005040:	643b      	str	r3, [r7, #64]	; 0x40
 8005042:	2300      	movs	r3, #0
 8005044:	647b      	str	r3, [r7, #68]	; 0x44
 8005046:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800504a:	460b      	mov	r3, r1
 800504c:	4313      	orrs	r3, r2
 800504e:	d00e      	beq.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005050:	4b86      	ldr	r3, [pc, #536]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	4a85      	ldr	r2, [pc, #532]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005056:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800505a:	6113      	str	r3, [r2, #16]
 800505c:	4b83      	ldr	r3, [pc, #524]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800505e:	6919      	ldr	r1, [r3, #16]
 8005060:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005064:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005068:	4a80      	ldr	r2, [pc, #512]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800506a:	430b      	orrs	r3, r1
 800506c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800506e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005076:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800507a:	63bb      	str	r3, [r7, #56]	; 0x38
 800507c:	2300      	movs	r3, #0
 800507e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005080:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005084:	460b      	mov	r3, r1
 8005086:	4313      	orrs	r3, r2
 8005088:	d009      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800508a:	4b78      	ldr	r3, [pc, #480]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800508c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800508e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005092:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005098:	4a74      	ldr	r2, [pc, #464]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800509a:	430b      	orrs	r3, r1
 800509c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800509e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a6:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80050aa:	633b      	str	r3, [r7, #48]	; 0x30
 80050ac:	2300      	movs	r3, #0
 80050ae:	637b      	str	r3, [r7, #52]	; 0x34
 80050b0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80050b4:	460b      	mov	r3, r1
 80050b6:	4313      	orrs	r3, r2
 80050b8:	d00a      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80050ba:	4b6c      	ldr	r3, [pc, #432]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80050bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050be:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80050c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ca:	4a68      	ldr	r2, [pc, #416]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80050cc:	430b      	orrs	r3, r1
 80050ce:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80050d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d8:	2100      	movs	r1, #0
 80050da:	62b9      	str	r1, [r7, #40]	; 0x28
 80050dc:	f003 0301 	and.w	r3, r3, #1
 80050e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050e2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80050e6:	460b      	mov	r3, r1
 80050e8:	4313      	orrs	r3, r2
 80050ea:	d011      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80050ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050f0:	3308      	adds	r3, #8
 80050f2:	2100      	movs	r1, #0
 80050f4:	4618      	mov	r0, r3
 80050f6:	f000 fb79 	bl	80057ec <RCCEx_PLL2_Config>
 80050fa:	4603      	mov	r3, r0
 80050fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8005100:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005104:	2b00      	cmp	r3, #0
 8005106:	d003      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005108:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800510c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005110:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005118:	2100      	movs	r1, #0
 800511a:	6239      	str	r1, [r7, #32]
 800511c:	f003 0302 	and.w	r3, r3, #2
 8005120:	627b      	str	r3, [r7, #36]	; 0x24
 8005122:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005126:	460b      	mov	r3, r1
 8005128:	4313      	orrs	r3, r2
 800512a:	d011      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800512c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005130:	3308      	adds	r3, #8
 8005132:	2101      	movs	r1, #1
 8005134:	4618      	mov	r0, r3
 8005136:	f000 fb59 	bl	80057ec <RCCEx_PLL2_Config>
 800513a:	4603      	mov	r3, r0
 800513c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8005140:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005144:	2b00      	cmp	r3, #0
 8005146:	d003      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005148:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800514c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005150:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005158:	2100      	movs	r1, #0
 800515a:	61b9      	str	r1, [r7, #24]
 800515c:	f003 0304 	and.w	r3, r3, #4
 8005160:	61fb      	str	r3, [r7, #28]
 8005162:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005166:	460b      	mov	r3, r1
 8005168:	4313      	orrs	r3, r2
 800516a:	d011      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800516c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005170:	3308      	adds	r3, #8
 8005172:	2102      	movs	r1, #2
 8005174:	4618      	mov	r0, r3
 8005176:	f000 fb39 	bl	80057ec <RCCEx_PLL2_Config>
 800517a:	4603      	mov	r3, r0
 800517c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8005180:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005184:	2b00      	cmp	r3, #0
 8005186:	d003      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005188:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800518c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005190:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005198:	2100      	movs	r1, #0
 800519a:	6139      	str	r1, [r7, #16]
 800519c:	f003 0308 	and.w	r3, r3, #8
 80051a0:	617b      	str	r3, [r7, #20]
 80051a2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80051a6:	460b      	mov	r3, r1
 80051a8:	4313      	orrs	r3, r2
 80051aa:	d011      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80051ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051b0:	3328      	adds	r3, #40	; 0x28
 80051b2:	2100      	movs	r1, #0
 80051b4:	4618      	mov	r0, r3
 80051b6:	f000 fbcb 	bl	8005950 <RCCEx_PLL3_Config>
 80051ba:	4603      	mov	r3, r0
 80051bc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 80051c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d003      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051c8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80051cc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80051d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d8:	2100      	movs	r1, #0
 80051da:	60b9      	str	r1, [r7, #8]
 80051dc:	f003 0310 	and.w	r3, r3, #16
 80051e0:	60fb      	str	r3, [r7, #12]
 80051e2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80051e6:	460b      	mov	r3, r1
 80051e8:	4313      	orrs	r3, r2
 80051ea:	d011      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80051ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051f0:	3328      	adds	r3, #40	; 0x28
 80051f2:	2101      	movs	r1, #1
 80051f4:	4618      	mov	r0, r3
 80051f6:	f000 fbab 	bl	8005950 <RCCEx_PLL3_Config>
 80051fa:	4603      	mov	r3, r0
 80051fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8005200:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005204:	2b00      	cmp	r3, #0
 8005206:	d003      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005208:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800520c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005210:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005218:	2100      	movs	r1, #0
 800521a:	6039      	str	r1, [r7, #0]
 800521c:	f003 0320 	and.w	r3, r3, #32
 8005220:	607b      	str	r3, [r7, #4]
 8005222:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005226:	460b      	mov	r3, r1
 8005228:	4313      	orrs	r3, r2
 800522a:	d011      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800522c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005230:	3328      	adds	r3, #40	; 0x28
 8005232:	2102      	movs	r1, #2
 8005234:	4618      	mov	r0, r3
 8005236:	f000 fb8b 	bl	8005950 <RCCEx_PLL3_Config>
 800523a:	4603      	mov	r3, r0
 800523c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8005240:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005244:	2b00      	cmp	r3, #0
 8005246:	d003      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005248:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800524c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8005250:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8005254:	2b00      	cmp	r3, #0
 8005256:	d101      	bne.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8005258:	2300      	movs	r3, #0
 800525a:	e000      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
}
 800525e:	4618      	mov	r0, r3
 8005260:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8005264:	46bd      	mov	sp, r7
 8005266:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800526a:	bf00      	nop
 800526c:	58024400 	.word	0x58024400

08005270 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005274:	f7fe fe00 	bl	8003e78 <HAL_RCC_GetHCLKFreq>
 8005278:	4602      	mov	r2, r0
 800527a:	4b06      	ldr	r3, [pc, #24]	; (8005294 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	091b      	lsrs	r3, r3, #4
 8005280:	f003 0307 	and.w	r3, r3, #7
 8005284:	4904      	ldr	r1, [pc, #16]	; (8005298 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005286:	5ccb      	ldrb	r3, [r1, r3]
 8005288:	f003 031f 	and.w	r3, r3, #31
 800528c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005290:	4618      	mov	r0, r3
 8005292:	bd80      	pop	{r7, pc}
 8005294:	58024400 	.word	0x58024400
 8005298:	08006ee4 	.word	0x08006ee4

0800529c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800529c:	b480      	push	{r7}
 800529e:	b089      	sub	sp, #36	; 0x24
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052a4:	4ba1      	ldr	r3, [pc, #644]	; (800552c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a8:	f003 0303 	and.w	r3, r3, #3
 80052ac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80052ae:	4b9f      	ldr	r3, [pc, #636]	; (800552c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b2:	0b1b      	lsrs	r3, r3, #12
 80052b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052b8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80052ba:	4b9c      	ldr	r3, [pc, #624]	; (800552c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052be:	091b      	lsrs	r3, r3, #4
 80052c0:	f003 0301 	and.w	r3, r3, #1
 80052c4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80052c6:	4b99      	ldr	r3, [pc, #612]	; (800552c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ca:	08db      	lsrs	r3, r3, #3
 80052cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052d0:	693a      	ldr	r2, [r7, #16]
 80052d2:	fb02 f303 	mul.w	r3, r2, r3
 80052d6:	ee07 3a90 	vmov	s15, r3
 80052da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f000 8111 	beq.w	800550c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	f000 8083 	beq.w	80053f8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	f200 80a1 	bhi.w	800543c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d003      	beq.n	8005308 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	2b01      	cmp	r3, #1
 8005304:	d056      	beq.n	80053b4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005306:	e099      	b.n	800543c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005308:	4b88      	ldr	r3, [pc, #544]	; (800552c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0320 	and.w	r3, r3, #32
 8005310:	2b00      	cmp	r3, #0
 8005312:	d02d      	beq.n	8005370 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005314:	4b85      	ldr	r3, [pc, #532]	; (800552c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	08db      	lsrs	r3, r3, #3
 800531a:	f003 0303 	and.w	r3, r3, #3
 800531e:	4a84      	ldr	r2, [pc, #528]	; (8005530 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005320:	fa22 f303 	lsr.w	r3, r2, r3
 8005324:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	ee07 3a90 	vmov	s15, r3
 800532c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	ee07 3a90 	vmov	s15, r3
 8005336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800533a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800533e:	4b7b      	ldr	r3, [pc, #492]	; (800552c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005346:	ee07 3a90 	vmov	s15, r3
 800534a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800534e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005352:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005534 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800535a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800535e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800536a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800536e:	e087      	b.n	8005480 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	ee07 3a90 	vmov	s15, r3
 8005376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800537a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005538 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800537e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005382:	4b6a      	ldr	r3, [pc, #424]	; (800552c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800538a:	ee07 3a90 	vmov	s15, r3
 800538e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005392:	ed97 6a03 	vldr	s12, [r7, #12]
 8005396:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005534 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800539a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800539e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053b2:	e065      	b.n	8005480 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	ee07 3a90 	vmov	s15, r3
 80053ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053be:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800553c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80053c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053c6:	4b59      	ldr	r3, [pc, #356]	; (800552c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ce:	ee07 3a90 	vmov	s15, r3
 80053d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80053da:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005534 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80053de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053f6:	e043      	b.n	8005480 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	ee07 3a90 	vmov	s15, r3
 80053fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005402:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005540 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800540a:	4b48      	ldr	r3, [pc, #288]	; (800552c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800540c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005412:	ee07 3a90 	vmov	s15, r3
 8005416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800541a:	ed97 6a03 	vldr	s12, [r7, #12]
 800541e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005534 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800542a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800542e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005436:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800543a:	e021      	b.n	8005480 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	ee07 3a90 	vmov	s15, r3
 8005442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005446:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800553c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800544a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800544e:	4b37      	ldr	r3, [pc, #220]	; (800552c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005456:	ee07 3a90 	vmov	s15, r3
 800545a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800545e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005462:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005534 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800546a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800546e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800547a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800547e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005480:	4b2a      	ldr	r3, [pc, #168]	; (800552c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005484:	0a5b      	lsrs	r3, r3, #9
 8005486:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800548a:	ee07 3a90 	vmov	s15, r3
 800548e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005492:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005496:	ee37 7a87 	vadd.f32	s14, s15, s14
 800549a:	edd7 6a07 	vldr	s13, [r7, #28]
 800549e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054a6:	ee17 2a90 	vmov	r2, s15
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80054ae:	4b1f      	ldr	r3, [pc, #124]	; (800552c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b2:	0c1b      	lsrs	r3, r3, #16
 80054b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054b8:	ee07 3a90 	vmov	s15, r3
 80054bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80054cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054d4:	ee17 2a90 	vmov	r2, s15
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80054dc:	4b13      	ldr	r3, [pc, #76]	; (800552c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e0:	0e1b      	lsrs	r3, r3, #24
 80054e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054e6:	ee07 3a90 	vmov	s15, r3
 80054ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80054fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005502:	ee17 2a90 	vmov	r2, s15
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800550a:	e008      	b.n	800551e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	609a      	str	r2, [r3, #8]
}
 800551e:	bf00      	nop
 8005520:	3724      	adds	r7, #36	; 0x24
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	58024400 	.word	0x58024400
 8005530:	03d09000 	.word	0x03d09000
 8005534:	46000000 	.word	0x46000000
 8005538:	4c742400 	.word	0x4c742400
 800553c:	4a742400 	.word	0x4a742400
 8005540:	4af42400 	.word	0x4af42400

08005544 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005544:	b480      	push	{r7}
 8005546:	b089      	sub	sp, #36	; 0x24
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800554c:	4ba1      	ldr	r3, [pc, #644]	; (80057d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800554e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005550:	f003 0303 	and.w	r3, r3, #3
 8005554:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005556:	4b9f      	ldr	r3, [pc, #636]	; (80057d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800555a:	0d1b      	lsrs	r3, r3, #20
 800555c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005560:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005562:	4b9c      	ldr	r3, [pc, #624]	; (80057d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005566:	0a1b      	lsrs	r3, r3, #8
 8005568:	f003 0301 	and.w	r3, r3, #1
 800556c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800556e:	4b99      	ldr	r3, [pc, #612]	; (80057d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005572:	08db      	lsrs	r3, r3, #3
 8005574:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005578:	693a      	ldr	r2, [r7, #16]
 800557a:	fb02 f303 	mul.w	r3, r2, r3
 800557e:	ee07 3a90 	vmov	s15, r3
 8005582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005586:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	2b00      	cmp	r3, #0
 800558e:	f000 8111 	beq.w	80057b4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	2b02      	cmp	r3, #2
 8005596:	f000 8083 	beq.w	80056a0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800559a:	69bb      	ldr	r3, [r7, #24]
 800559c:	2b02      	cmp	r3, #2
 800559e:	f200 80a1 	bhi.w	80056e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d003      	beq.n	80055b0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d056      	beq.n	800565c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80055ae:	e099      	b.n	80056e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055b0:	4b88      	ldr	r3, [pc, #544]	; (80057d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0320 	and.w	r3, r3, #32
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d02d      	beq.n	8005618 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80055bc:	4b85      	ldr	r3, [pc, #532]	; (80057d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	08db      	lsrs	r3, r3, #3
 80055c2:	f003 0303 	and.w	r3, r3, #3
 80055c6:	4a84      	ldr	r2, [pc, #528]	; (80057d8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80055c8:	fa22 f303 	lsr.w	r3, r2, r3
 80055cc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	ee07 3a90 	vmov	s15, r3
 80055d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	ee07 3a90 	vmov	s15, r3
 80055de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055e6:	4b7b      	ldr	r3, [pc, #492]	; (80057d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055ee:	ee07 3a90 	vmov	s15, r3
 80055f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80055fa:	eddf 5a78 	vldr	s11, [pc, #480]	; 80057dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80055fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005602:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005606:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800560a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800560e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005612:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005616:	e087      	b.n	8005728 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	ee07 3a90 	vmov	s15, r3
 800561e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005622:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80057e0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005626:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800562a:	4b6a      	ldr	r3, [pc, #424]	; (80057d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800562c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005632:	ee07 3a90 	vmov	s15, r3
 8005636:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800563a:	ed97 6a03 	vldr	s12, [r7, #12]
 800563e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80057dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005642:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005646:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800564a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800564e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005656:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800565a:	e065      	b.n	8005728 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	ee07 3a90 	vmov	s15, r3
 8005662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005666:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80057e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800566a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800566e:	4b59      	ldr	r3, [pc, #356]	; (80057d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005676:	ee07 3a90 	vmov	s15, r3
 800567a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800567e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005682:	eddf 5a56 	vldr	s11, [pc, #344]	; 80057dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005686:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800568a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800568e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005692:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800569a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800569e:	e043      	b.n	8005728 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	ee07 3a90 	vmov	s15, r3
 80056a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056aa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80057e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80056ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056b2:	4b48      	ldr	r3, [pc, #288]	; (80057d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056ba:	ee07 3a90 	vmov	s15, r3
 80056be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80056c6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80057dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80056ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056e2:	e021      	b.n	8005728 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	ee07 3a90 	vmov	s15, r3
 80056ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80057e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80056f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056f6:	4b37      	ldr	r3, [pc, #220]	; (80057d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056fe:	ee07 3a90 	vmov	s15, r3
 8005702:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005706:	ed97 6a03 	vldr	s12, [r7, #12]
 800570a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80057dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800570e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005712:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005716:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800571a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800571e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005722:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005726:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005728:	4b2a      	ldr	r3, [pc, #168]	; (80057d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800572a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572c:	0a5b      	lsrs	r3, r3, #9
 800572e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005732:	ee07 3a90 	vmov	s15, r3
 8005736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800573a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800573e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005742:	edd7 6a07 	vldr	s13, [r7, #28]
 8005746:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800574a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800574e:	ee17 2a90 	vmov	r2, s15
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005756:	4b1f      	ldr	r3, [pc, #124]	; (80057d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575a:	0c1b      	lsrs	r3, r3, #16
 800575c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005760:	ee07 3a90 	vmov	s15, r3
 8005764:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005768:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800576c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005770:	edd7 6a07 	vldr	s13, [r7, #28]
 8005774:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005778:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800577c:	ee17 2a90 	vmov	r2, s15
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005784:	4b13      	ldr	r3, [pc, #76]	; (80057d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005788:	0e1b      	lsrs	r3, r3, #24
 800578a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800578e:	ee07 3a90 	vmov	s15, r3
 8005792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005796:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800579a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800579e:	edd7 6a07 	vldr	s13, [r7, #28]
 80057a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057aa:	ee17 2a90 	vmov	r2, s15
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80057b2:	e008      	b.n	80057c6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	609a      	str	r2, [r3, #8]
}
 80057c6:	bf00      	nop
 80057c8:	3724      	adds	r7, #36	; 0x24
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr
 80057d2:	bf00      	nop
 80057d4:	58024400 	.word	0x58024400
 80057d8:	03d09000 	.word	0x03d09000
 80057dc:	46000000 	.word	0x46000000
 80057e0:	4c742400 	.word	0x4c742400
 80057e4:	4a742400 	.word	0x4a742400
 80057e8:	4af42400 	.word	0x4af42400

080057ec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057f6:	2300      	movs	r3, #0
 80057f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80057fa:	4b53      	ldr	r3, [pc, #332]	; (8005948 <RCCEx_PLL2_Config+0x15c>)
 80057fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057fe:	f003 0303 	and.w	r3, r3, #3
 8005802:	2b03      	cmp	r3, #3
 8005804:	d101      	bne.n	800580a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e099      	b.n	800593e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800580a:	4b4f      	ldr	r3, [pc, #316]	; (8005948 <RCCEx_PLL2_Config+0x15c>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a4e      	ldr	r2, [pc, #312]	; (8005948 <RCCEx_PLL2_Config+0x15c>)
 8005810:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005814:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005816:	f7fb fee5 	bl	80015e4 <HAL_GetTick>
 800581a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800581c:	e008      	b.n	8005830 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800581e:	f7fb fee1 	bl	80015e4 <HAL_GetTick>
 8005822:	4602      	mov	r2, r0
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	2b02      	cmp	r3, #2
 800582a:	d901      	bls.n	8005830 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e086      	b.n	800593e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005830:	4b45      	ldr	r3, [pc, #276]	; (8005948 <RCCEx_PLL2_Config+0x15c>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1f0      	bne.n	800581e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800583c:	4b42      	ldr	r3, [pc, #264]	; (8005948 <RCCEx_PLL2_Config+0x15c>)
 800583e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005840:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	031b      	lsls	r3, r3, #12
 800584a:	493f      	ldr	r1, [pc, #252]	; (8005948 <RCCEx_PLL2_Config+0x15c>)
 800584c:	4313      	orrs	r3, r2
 800584e:	628b      	str	r3, [r1, #40]	; 0x28
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	3b01      	subs	r3, #1
 8005856:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	3b01      	subs	r3, #1
 8005860:	025b      	lsls	r3, r3, #9
 8005862:	b29b      	uxth	r3, r3
 8005864:	431a      	orrs	r2, r3
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	3b01      	subs	r3, #1
 800586c:	041b      	lsls	r3, r3, #16
 800586e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005872:	431a      	orrs	r2, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	3b01      	subs	r3, #1
 800587a:	061b      	lsls	r3, r3, #24
 800587c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005880:	4931      	ldr	r1, [pc, #196]	; (8005948 <RCCEx_PLL2_Config+0x15c>)
 8005882:	4313      	orrs	r3, r2
 8005884:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005886:	4b30      	ldr	r3, [pc, #192]	; (8005948 <RCCEx_PLL2_Config+0x15c>)
 8005888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	492d      	ldr	r1, [pc, #180]	; (8005948 <RCCEx_PLL2_Config+0x15c>)
 8005894:	4313      	orrs	r3, r2
 8005896:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005898:	4b2b      	ldr	r3, [pc, #172]	; (8005948 <RCCEx_PLL2_Config+0x15c>)
 800589a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589c:	f023 0220 	bic.w	r2, r3, #32
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	4928      	ldr	r1, [pc, #160]	; (8005948 <RCCEx_PLL2_Config+0x15c>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80058aa:	4b27      	ldr	r3, [pc, #156]	; (8005948 <RCCEx_PLL2_Config+0x15c>)
 80058ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ae:	4a26      	ldr	r2, [pc, #152]	; (8005948 <RCCEx_PLL2_Config+0x15c>)
 80058b0:	f023 0310 	bic.w	r3, r3, #16
 80058b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80058b6:	4b24      	ldr	r3, [pc, #144]	; (8005948 <RCCEx_PLL2_Config+0x15c>)
 80058b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058ba:	4b24      	ldr	r3, [pc, #144]	; (800594c <RCCEx_PLL2_Config+0x160>)
 80058bc:	4013      	ands	r3, r2
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	69d2      	ldr	r2, [r2, #28]
 80058c2:	00d2      	lsls	r2, r2, #3
 80058c4:	4920      	ldr	r1, [pc, #128]	; (8005948 <RCCEx_PLL2_Config+0x15c>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80058ca:	4b1f      	ldr	r3, [pc, #124]	; (8005948 <RCCEx_PLL2_Config+0x15c>)
 80058cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ce:	4a1e      	ldr	r2, [pc, #120]	; (8005948 <RCCEx_PLL2_Config+0x15c>)
 80058d0:	f043 0310 	orr.w	r3, r3, #16
 80058d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d106      	bne.n	80058ea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80058dc:	4b1a      	ldr	r3, [pc, #104]	; (8005948 <RCCEx_PLL2_Config+0x15c>)
 80058de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e0:	4a19      	ldr	r2, [pc, #100]	; (8005948 <RCCEx_PLL2_Config+0x15c>)
 80058e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80058e8:	e00f      	b.n	800590a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d106      	bne.n	80058fe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80058f0:	4b15      	ldr	r3, [pc, #84]	; (8005948 <RCCEx_PLL2_Config+0x15c>)
 80058f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f4:	4a14      	ldr	r2, [pc, #80]	; (8005948 <RCCEx_PLL2_Config+0x15c>)
 80058f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80058fc:	e005      	b.n	800590a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80058fe:	4b12      	ldr	r3, [pc, #72]	; (8005948 <RCCEx_PLL2_Config+0x15c>)
 8005900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005902:	4a11      	ldr	r2, [pc, #68]	; (8005948 <RCCEx_PLL2_Config+0x15c>)
 8005904:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005908:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800590a:	4b0f      	ldr	r3, [pc, #60]	; (8005948 <RCCEx_PLL2_Config+0x15c>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a0e      	ldr	r2, [pc, #56]	; (8005948 <RCCEx_PLL2_Config+0x15c>)
 8005910:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005914:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005916:	f7fb fe65 	bl	80015e4 <HAL_GetTick>
 800591a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800591c:	e008      	b.n	8005930 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800591e:	f7fb fe61 	bl	80015e4 <HAL_GetTick>
 8005922:	4602      	mov	r2, r0
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	2b02      	cmp	r3, #2
 800592a:	d901      	bls.n	8005930 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	e006      	b.n	800593e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005930:	4b05      	ldr	r3, [pc, #20]	; (8005948 <RCCEx_PLL2_Config+0x15c>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005938:	2b00      	cmp	r3, #0
 800593a:	d0f0      	beq.n	800591e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800593c:	7bfb      	ldrb	r3, [r7, #15]
}
 800593e:	4618      	mov	r0, r3
 8005940:	3710      	adds	r7, #16
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	58024400 	.word	0x58024400
 800594c:	ffff0007 	.word	0xffff0007

08005950 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800595a:	2300      	movs	r3, #0
 800595c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800595e:	4b53      	ldr	r3, [pc, #332]	; (8005aac <RCCEx_PLL3_Config+0x15c>)
 8005960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005962:	f003 0303 	and.w	r3, r3, #3
 8005966:	2b03      	cmp	r3, #3
 8005968:	d101      	bne.n	800596e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e099      	b.n	8005aa2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800596e:	4b4f      	ldr	r3, [pc, #316]	; (8005aac <RCCEx_PLL3_Config+0x15c>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a4e      	ldr	r2, [pc, #312]	; (8005aac <RCCEx_PLL3_Config+0x15c>)
 8005974:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005978:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800597a:	f7fb fe33 	bl	80015e4 <HAL_GetTick>
 800597e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005980:	e008      	b.n	8005994 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005982:	f7fb fe2f 	bl	80015e4 <HAL_GetTick>
 8005986:	4602      	mov	r2, r0
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	2b02      	cmp	r3, #2
 800598e:	d901      	bls.n	8005994 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	e086      	b.n	8005aa2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005994:	4b45      	ldr	r3, [pc, #276]	; (8005aac <RCCEx_PLL3_Config+0x15c>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d1f0      	bne.n	8005982 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80059a0:	4b42      	ldr	r3, [pc, #264]	; (8005aac <RCCEx_PLL3_Config+0x15c>)
 80059a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	051b      	lsls	r3, r3, #20
 80059ae:	493f      	ldr	r1, [pc, #252]	; (8005aac <RCCEx_PLL3_Config+0x15c>)
 80059b0:	4313      	orrs	r3, r2
 80059b2:	628b      	str	r3, [r1, #40]	; 0x28
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	3b01      	subs	r3, #1
 80059ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	3b01      	subs	r3, #1
 80059c4:	025b      	lsls	r3, r3, #9
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	431a      	orrs	r2, r3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	3b01      	subs	r3, #1
 80059d0:	041b      	lsls	r3, r3, #16
 80059d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80059d6:	431a      	orrs	r2, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	3b01      	subs	r3, #1
 80059de:	061b      	lsls	r3, r3, #24
 80059e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80059e4:	4931      	ldr	r1, [pc, #196]	; (8005aac <RCCEx_PLL3_Config+0x15c>)
 80059e6:	4313      	orrs	r3, r2
 80059e8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80059ea:	4b30      	ldr	r3, [pc, #192]	; (8005aac <RCCEx_PLL3_Config+0x15c>)
 80059ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	492d      	ldr	r1, [pc, #180]	; (8005aac <RCCEx_PLL3_Config+0x15c>)
 80059f8:	4313      	orrs	r3, r2
 80059fa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80059fc:	4b2b      	ldr	r3, [pc, #172]	; (8005aac <RCCEx_PLL3_Config+0x15c>)
 80059fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a00:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	699b      	ldr	r3, [r3, #24]
 8005a08:	4928      	ldr	r1, [pc, #160]	; (8005aac <RCCEx_PLL3_Config+0x15c>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005a0e:	4b27      	ldr	r3, [pc, #156]	; (8005aac <RCCEx_PLL3_Config+0x15c>)
 8005a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a12:	4a26      	ldr	r2, [pc, #152]	; (8005aac <RCCEx_PLL3_Config+0x15c>)
 8005a14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005a1a:	4b24      	ldr	r3, [pc, #144]	; (8005aac <RCCEx_PLL3_Config+0x15c>)
 8005a1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a1e:	4b24      	ldr	r3, [pc, #144]	; (8005ab0 <RCCEx_PLL3_Config+0x160>)
 8005a20:	4013      	ands	r3, r2
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	69d2      	ldr	r2, [r2, #28]
 8005a26:	00d2      	lsls	r2, r2, #3
 8005a28:	4920      	ldr	r1, [pc, #128]	; (8005aac <RCCEx_PLL3_Config+0x15c>)
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005a2e:	4b1f      	ldr	r3, [pc, #124]	; (8005aac <RCCEx_PLL3_Config+0x15c>)
 8005a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a32:	4a1e      	ldr	r2, [pc, #120]	; (8005aac <RCCEx_PLL3_Config+0x15c>)
 8005a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d106      	bne.n	8005a4e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005a40:	4b1a      	ldr	r3, [pc, #104]	; (8005aac <RCCEx_PLL3_Config+0x15c>)
 8005a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a44:	4a19      	ldr	r2, [pc, #100]	; (8005aac <RCCEx_PLL3_Config+0x15c>)
 8005a46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005a4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a4c:	e00f      	b.n	8005a6e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d106      	bne.n	8005a62 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005a54:	4b15      	ldr	r3, [pc, #84]	; (8005aac <RCCEx_PLL3_Config+0x15c>)
 8005a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a58:	4a14      	ldr	r2, [pc, #80]	; (8005aac <RCCEx_PLL3_Config+0x15c>)
 8005a5a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005a5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a60:	e005      	b.n	8005a6e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005a62:	4b12      	ldr	r3, [pc, #72]	; (8005aac <RCCEx_PLL3_Config+0x15c>)
 8005a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a66:	4a11      	ldr	r2, [pc, #68]	; (8005aac <RCCEx_PLL3_Config+0x15c>)
 8005a68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a6c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005a6e:	4b0f      	ldr	r3, [pc, #60]	; (8005aac <RCCEx_PLL3_Config+0x15c>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a0e      	ldr	r2, [pc, #56]	; (8005aac <RCCEx_PLL3_Config+0x15c>)
 8005a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a7a:	f7fb fdb3 	bl	80015e4 <HAL_GetTick>
 8005a7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005a80:	e008      	b.n	8005a94 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005a82:	f7fb fdaf 	bl	80015e4 <HAL_GetTick>
 8005a86:	4602      	mov	r2, r0
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d901      	bls.n	8005a94 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	e006      	b.n	8005aa2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005a94:	4b05      	ldr	r3, [pc, #20]	; (8005aac <RCCEx_PLL3_Config+0x15c>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d0f0      	beq.n	8005a82 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3710      	adds	r7, #16
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	58024400 	.word	0x58024400
 8005ab0:	ffff0007 	.word	0xffff0007

08005ab4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d101      	bne.n	8005ac6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e042      	b.n	8005b4c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d106      	bne.n	8005ade <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f7fb fbc7 	bl	800126c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2224      	movs	r2, #36	; 0x24
 8005ae2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f022 0201 	bic.w	r2, r2, #1
 8005af4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d002      	beq.n	8005b04 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 fe94 	bl	800682c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 f825 	bl	8005b54 <UART_SetConfig>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d101      	bne.n	8005b14 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e01b      	b.n	8005b4c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	685a      	ldr	r2, [r3, #4]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	689a      	ldr	r2, [r3, #8]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f042 0201 	orr.w	r2, r2, #1
 8005b42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 ff13 	bl	8006970 <UART_CheckIdleState>
 8005b4a:	4603      	mov	r3, r0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3708      	adds	r7, #8
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b58:	b092      	sub	sp, #72	; 0x48
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	689a      	ldr	r2, [r3, #8]
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	431a      	orrs	r2, r3
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	695b      	ldr	r3, [r3, #20]
 8005b72:	431a      	orrs	r2, r3
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	69db      	ldr	r3, [r3, #28]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	4bbe      	ldr	r3, [pc, #760]	; (8005e7c <UART_SetConfig+0x328>)
 8005b84:	4013      	ands	r3, r2
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	6812      	ldr	r2, [r2, #0]
 8005b8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005b8c:	430b      	orrs	r3, r1
 8005b8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	68da      	ldr	r2, [r3, #12]
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	430a      	orrs	r2, r1
 8005ba4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	699b      	ldr	r3, [r3, #24]
 8005baa:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4ab3      	ldr	r2, [pc, #716]	; (8005e80 <UART_SetConfig+0x32c>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d004      	beq.n	8005bc0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	6a1b      	ldr	r3, [r3, #32]
 8005bba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	689a      	ldr	r2, [r3, #8]
 8005bc6:	4baf      	ldr	r3, [pc, #700]	; (8005e84 <UART_SetConfig+0x330>)
 8005bc8:	4013      	ands	r3, r2
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	6812      	ldr	r2, [r2, #0]
 8005bce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005bd0:	430b      	orrs	r3, r1
 8005bd2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bda:	f023 010f 	bic.w	r1, r3, #15
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	430a      	orrs	r2, r1
 8005be8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4aa6      	ldr	r2, [pc, #664]	; (8005e88 <UART_SetConfig+0x334>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d177      	bne.n	8005ce4 <UART_SetConfig+0x190>
 8005bf4:	4ba5      	ldr	r3, [pc, #660]	; (8005e8c <UART_SetConfig+0x338>)
 8005bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bf8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005bfc:	2b28      	cmp	r3, #40	; 0x28
 8005bfe:	d86d      	bhi.n	8005cdc <UART_SetConfig+0x188>
 8005c00:	a201      	add	r2, pc, #4	; (adr r2, 8005c08 <UART_SetConfig+0xb4>)
 8005c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c06:	bf00      	nop
 8005c08:	08005cad 	.word	0x08005cad
 8005c0c:	08005cdd 	.word	0x08005cdd
 8005c10:	08005cdd 	.word	0x08005cdd
 8005c14:	08005cdd 	.word	0x08005cdd
 8005c18:	08005cdd 	.word	0x08005cdd
 8005c1c:	08005cdd 	.word	0x08005cdd
 8005c20:	08005cdd 	.word	0x08005cdd
 8005c24:	08005cdd 	.word	0x08005cdd
 8005c28:	08005cb5 	.word	0x08005cb5
 8005c2c:	08005cdd 	.word	0x08005cdd
 8005c30:	08005cdd 	.word	0x08005cdd
 8005c34:	08005cdd 	.word	0x08005cdd
 8005c38:	08005cdd 	.word	0x08005cdd
 8005c3c:	08005cdd 	.word	0x08005cdd
 8005c40:	08005cdd 	.word	0x08005cdd
 8005c44:	08005cdd 	.word	0x08005cdd
 8005c48:	08005cbd 	.word	0x08005cbd
 8005c4c:	08005cdd 	.word	0x08005cdd
 8005c50:	08005cdd 	.word	0x08005cdd
 8005c54:	08005cdd 	.word	0x08005cdd
 8005c58:	08005cdd 	.word	0x08005cdd
 8005c5c:	08005cdd 	.word	0x08005cdd
 8005c60:	08005cdd 	.word	0x08005cdd
 8005c64:	08005cdd 	.word	0x08005cdd
 8005c68:	08005cc5 	.word	0x08005cc5
 8005c6c:	08005cdd 	.word	0x08005cdd
 8005c70:	08005cdd 	.word	0x08005cdd
 8005c74:	08005cdd 	.word	0x08005cdd
 8005c78:	08005cdd 	.word	0x08005cdd
 8005c7c:	08005cdd 	.word	0x08005cdd
 8005c80:	08005cdd 	.word	0x08005cdd
 8005c84:	08005cdd 	.word	0x08005cdd
 8005c88:	08005ccd 	.word	0x08005ccd
 8005c8c:	08005cdd 	.word	0x08005cdd
 8005c90:	08005cdd 	.word	0x08005cdd
 8005c94:	08005cdd 	.word	0x08005cdd
 8005c98:	08005cdd 	.word	0x08005cdd
 8005c9c:	08005cdd 	.word	0x08005cdd
 8005ca0:	08005cdd 	.word	0x08005cdd
 8005ca4:	08005cdd 	.word	0x08005cdd
 8005ca8:	08005cd5 	.word	0x08005cd5
 8005cac:	2301      	movs	r3, #1
 8005cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cb2:	e326      	b.n	8006302 <UART_SetConfig+0x7ae>
 8005cb4:	2304      	movs	r3, #4
 8005cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cba:	e322      	b.n	8006302 <UART_SetConfig+0x7ae>
 8005cbc:	2308      	movs	r3, #8
 8005cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cc2:	e31e      	b.n	8006302 <UART_SetConfig+0x7ae>
 8005cc4:	2310      	movs	r3, #16
 8005cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cca:	e31a      	b.n	8006302 <UART_SetConfig+0x7ae>
 8005ccc:	2320      	movs	r3, #32
 8005cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cd2:	e316      	b.n	8006302 <UART_SetConfig+0x7ae>
 8005cd4:	2340      	movs	r3, #64	; 0x40
 8005cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cda:	e312      	b.n	8006302 <UART_SetConfig+0x7ae>
 8005cdc:	2380      	movs	r3, #128	; 0x80
 8005cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ce2:	e30e      	b.n	8006302 <UART_SetConfig+0x7ae>
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a69      	ldr	r2, [pc, #420]	; (8005e90 <UART_SetConfig+0x33c>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d130      	bne.n	8005d50 <UART_SetConfig+0x1fc>
 8005cee:	4b67      	ldr	r3, [pc, #412]	; (8005e8c <UART_SetConfig+0x338>)
 8005cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cf2:	f003 0307 	and.w	r3, r3, #7
 8005cf6:	2b05      	cmp	r3, #5
 8005cf8:	d826      	bhi.n	8005d48 <UART_SetConfig+0x1f4>
 8005cfa:	a201      	add	r2, pc, #4	; (adr r2, 8005d00 <UART_SetConfig+0x1ac>)
 8005cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d00:	08005d19 	.word	0x08005d19
 8005d04:	08005d21 	.word	0x08005d21
 8005d08:	08005d29 	.word	0x08005d29
 8005d0c:	08005d31 	.word	0x08005d31
 8005d10:	08005d39 	.word	0x08005d39
 8005d14:	08005d41 	.word	0x08005d41
 8005d18:	2300      	movs	r3, #0
 8005d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d1e:	e2f0      	b.n	8006302 <UART_SetConfig+0x7ae>
 8005d20:	2304      	movs	r3, #4
 8005d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d26:	e2ec      	b.n	8006302 <UART_SetConfig+0x7ae>
 8005d28:	2308      	movs	r3, #8
 8005d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d2e:	e2e8      	b.n	8006302 <UART_SetConfig+0x7ae>
 8005d30:	2310      	movs	r3, #16
 8005d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d36:	e2e4      	b.n	8006302 <UART_SetConfig+0x7ae>
 8005d38:	2320      	movs	r3, #32
 8005d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d3e:	e2e0      	b.n	8006302 <UART_SetConfig+0x7ae>
 8005d40:	2340      	movs	r3, #64	; 0x40
 8005d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d46:	e2dc      	b.n	8006302 <UART_SetConfig+0x7ae>
 8005d48:	2380      	movs	r3, #128	; 0x80
 8005d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d4e:	e2d8      	b.n	8006302 <UART_SetConfig+0x7ae>
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a4f      	ldr	r2, [pc, #316]	; (8005e94 <UART_SetConfig+0x340>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d130      	bne.n	8005dbc <UART_SetConfig+0x268>
 8005d5a:	4b4c      	ldr	r3, [pc, #304]	; (8005e8c <UART_SetConfig+0x338>)
 8005d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d5e:	f003 0307 	and.w	r3, r3, #7
 8005d62:	2b05      	cmp	r3, #5
 8005d64:	d826      	bhi.n	8005db4 <UART_SetConfig+0x260>
 8005d66:	a201      	add	r2, pc, #4	; (adr r2, 8005d6c <UART_SetConfig+0x218>)
 8005d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d6c:	08005d85 	.word	0x08005d85
 8005d70:	08005d8d 	.word	0x08005d8d
 8005d74:	08005d95 	.word	0x08005d95
 8005d78:	08005d9d 	.word	0x08005d9d
 8005d7c:	08005da5 	.word	0x08005da5
 8005d80:	08005dad 	.word	0x08005dad
 8005d84:	2300      	movs	r3, #0
 8005d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d8a:	e2ba      	b.n	8006302 <UART_SetConfig+0x7ae>
 8005d8c:	2304      	movs	r3, #4
 8005d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d92:	e2b6      	b.n	8006302 <UART_SetConfig+0x7ae>
 8005d94:	2308      	movs	r3, #8
 8005d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d9a:	e2b2      	b.n	8006302 <UART_SetConfig+0x7ae>
 8005d9c:	2310      	movs	r3, #16
 8005d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005da2:	e2ae      	b.n	8006302 <UART_SetConfig+0x7ae>
 8005da4:	2320      	movs	r3, #32
 8005da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005daa:	e2aa      	b.n	8006302 <UART_SetConfig+0x7ae>
 8005dac:	2340      	movs	r3, #64	; 0x40
 8005dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005db2:	e2a6      	b.n	8006302 <UART_SetConfig+0x7ae>
 8005db4:	2380      	movs	r3, #128	; 0x80
 8005db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dba:	e2a2      	b.n	8006302 <UART_SetConfig+0x7ae>
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a35      	ldr	r2, [pc, #212]	; (8005e98 <UART_SetConfig+0x344>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d130      	bne.n	8005e28 <UART_SetConfig+0x2d4>
 8005dc6:	4b31      	ldr	r3, [pc, #196]	; (8005e8c <UART_SetConfig+0x338>)
 8005dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dca:	f003 0307 	and.w	r3, r3, #7
 8005dce:	2b05      	cmp	r3, #5
 8005dd0:	d826      	bhi.n	8005e20 <UART_SetConfig+0x2cc>
 8005dd2:	a201      	add	r2, pc, #4	; (adr r2, 8005dd8 <UART_SetConfig+0x284>)
 8005dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd8:	08005df1 	.word	0x08005df1
 8005ddc:	08005df9 	.word	0x08005df9
 8005de0:	08005e01 	.word	0x08005e01
 8005de4:	08005e09 	.word	0x08005e09
 8005de8:	08005e11 	.word	0x08005e11
 8005dec:	08005e19 	.word	0x08005e19
 8005df0:	2300      	movs	r3, #0
 8005df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005df6:	e284      	b.n	8006302 <UART_SetConfig+0x7ae>
 8005df8:	2304      	movs	r3, #4
 8005dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dfe:	e280      	b.n	8006302 <UART_SetConfig+0x7ae>
 8005e00:	2308      	movs	r3, #8
 8005e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e06:	e27c      	b.n	8006302 <UART_SetConfig+0x7ae>
 8005e08:	2310      	movs	r3, #16
 8005e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e0e:	e278      	b.n	8006302 <UART_SetConfig+0x7ae>
 8005e10:	2320      	movs	r3, #32
 8005e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e16:	e274      	b.n	8006302 <UART_SetConfig+0x7ae>
 8005e18:	2340      	movs	r3, #64	; 0x40
 8005e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e1e:	e270      	b.n	8006302 <UART_SetConfig+0x7ae>
 8005e20:	2380      	movs	r3, #128	; 0x80
 8005e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e26:	e26c      	b.n	8006302 <UART_SetConfig+0x7ae>
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a1b      	ldr	r2, [pc, #108]	; (8005e9c <UART_SetConfig+0x348>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d142      	bne.n	8005eb8 <UART_SetConfig+0x364>
 8005e32:	4b16      	ldr	r3, [pc, #88]	; (8005e8c <UART_SetConfig+0x338>)
 8005e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e36:	f003 0307 	and.w	r3, r3, #7
 8005e3a:	2b05      	cmp	r3, #5
 8005e3c:	d838      	bhi.n	8005eb0 <UART_SetConfig+0x35c>
 8005e3e:	a201      	add	r2, pc, #4	; (adr r2, 8005e44 <UART_SetConfig+0x2f0>)
 8005e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e44:	08005e5d 	.word	0x08005e5d
 8005e48:	08005e65 	.word	0x08005e65
 8005e4c:	08005e6d 	.word	0x08005e6d
 8005e50:	08005e75 	.word	0x08005e75
 8005e54:	08005ea1 	.word	0x08005ea1
 8005e58:	08005ea9 	.word	0x08005ea9
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e62:	e24e      	b.n	8006302 <UART_SetConfig+0x7ae>
 8005e64:	2304      	movs	r3, #4
 8005e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e6a:	e24a      	b.n	8006302 <UART_SetConfig+0x7ae>
 8005e6c:	2308      	movs	r3, #8
 8005e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e72:	e246      	b.n	8006302 <UART_SetConfig+0x7ae>
 8005e74:	2310      	movs	r3, #16
 8005e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e7a:	e242      	b.n	8006302 <UART_SetConfig+0x7ae>
 8005e7c:	cfff69f3 	.word	0xcfff69f3
 8005e80:	58000c00 	.word	0x58000c00
 8005e84:	11fff4ff 	.word	0x11fff4ff
 8005e88:	40011000 	.word	0x40011000
 8005e8c:	58024400 	.word	0x58024400
 8005e90:	40004400 	.word	0x40004400
 8005e94:	40004800 	.word	0x40004800
 8005e98:	40004c00 	.word	0x40004c00
 8005e9c:	40005000 	.word	0x40005000
 8005ea0:	2320      	movs	r3, #32
 8005ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ea6:	e22c      	b.n	8006302 <UART_SetConfig+0x7ae>
 8005ea8:	2340      	movs	r3, #64	; 0x40
 8005eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eae:	e228      	b.n	8006302 <UART_SetConfig+0x7ae>
 8005eb0:	2380      	movs	r3, #128	; 0x80
 8005eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eb6:	e224      	b.n	8006302 <UART_SetConfig+0x7ae>
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4ab1      	ldr	r2, [pc, #708]	; (8006184 <UART_SetConfig+0x630>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d176      	bne.n	8005fb0 <UART_SetConfig+0x45c>
 8005ec2:	4bb1      	ldr	r3, [pc, #708]	; (8006188 <UART_SetConfig+0x634>)
 8005ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ec6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005eca:	2b28      	cmp	r3, #40	; 0x28
 8005ecc:	d86c      	bhi.n	8005fa8 <UART_SetConfig+0x454>
 8005ece:	a201      	add	r2, pc, #4	; (adr r2, 8005ed4 <UART_SetConfig+0x380>)
 8005ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed4:	08005f79 	.word	0x08005f79
 8005ed8:	08005fa9 	.word	0x08005fa9
 8005edc:	08005fa9 	.word	0x08005fa9
 8005ee0:	08005fa9 	.word	0x08005fa9
 8005ee4:	08005fa9 	.word	0x08005fa9
 8005ee8:	08005fa9 	.word	0x08005fa9
 8005eec:	08005fa9 	.word	0x08005fa9
 8005ef0:	08005fa9 	.word	0x08005fa9
 8005ef4:	08005f81 	.word	0x08005f81
 8005ef8:	08005fa9 	.word	0x08005fa9
 8005efc:	08005fa9 	.word	0x08005fa9
 8005f00:	08005fa9 	.word	0x08005fa9
 8005f04:	08005fa9 	.word	0x08005fa9
 8005f08:	08005fa9 	.word	0x08005fa9
 8005f0c:	08005fa9 	.word	0x08005fa9
 8005f10:	08005fa9 	.word	0x08005fa9
 8005f14:	08005f89 	.word	0x08005f89
 8005f18:	08005fa9 	.word	0x08005fa9
 8005f1c:	08005fa9 	.word	0x08005fa9
 8005f20:	08005fa9 	.word	0x08005fa9
 8005f24:	08005fa9 	.word	0x08005fa9
 8005f28:	08005fa9 	.word	0x08005fa9
 8005f2c:	08005fa9 	.word	0x08005fa9
 8005f30:	08005fa9 	.word	0x08005fa9
 8005f34:	08005f91 	.word	0x08005f91
 8005f38:	08005fa9 	.word	0x08005fa9
 8005f3c:	08005fa9 	.word	0x08005fa9
 8005f40:	08005fa9 	.word	0x08005fa9
 8005f44:	08005fa9 	.word	0x08005fa9
 8005f48:	08005fa9 	.word	0x08005fa9
 8005f4c:	08005fa9 	.word	0x08005fa9
 8005f50:	08005fa9 	.word	0x08005fa9
 8005f54:	08005f99 	.word	0x08005f99
 8005f58:	08005fa9 	.word	0x08005fa9
 8005f5c:	08005fa9 	.word	0x08005fa9
 8005f60:	08005fa9 	.word	0x08005fa9
 8005f64:	08005fa9 	.word	0x08005fa9
 8005f68:	08005fa9 	.word	0x08005fa9
 8005f6c:	08005fa9 	.word	0x08005fa9
 8005f70:	08005fa9 	.word	0x08005fa9
 8005f74:	08005fa1 	.word	0x08005fa1
 8005f78:	2301      	movs	r3, #1
 8005f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f7e:	e1c0      	b.n	8006302 <UART_SetConfig+0x7ae>
 8005f80:	2304      	movs	r3, #4
 8005f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f86:	e1bc      	b.n	8006302 <UART_SetConfig+0x7ae>
 8005f88:	2308      	movs	r3, #8
 8005f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f8e:	e1b8      	b.n	8006302 <UART_SetConfig+0x7ae>
 8005f90:	2310      	movs	r3, #16
 8005f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f96:	e1b4      	b.n	8006302 <UART_SetConfig+0x7ae>
 8005f98:	2320      	movs	r3, #32
 8005f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f9e:	e1b0      	b.n	8006302 <UART_SetConfig+0x7ae>
 8005fa0:	2340      	movs	r3, #64	; 0x40
 8005fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fa6:	e1ac      	b.n	8006302 <UART_SetConfig+0x7ae>
 8005fa8:	2380      	movs	r3, #128	; 0x80
 8005faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fae:	e1a8      	b.n	8006302 <UART_SetConfig+0x7ae>
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a75      	ldr	r2, [pc, #468]	; (800618c <UART_SetConfig+0x638>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d130      	bne.n	800601c <UART_SetConfig+0x4c8>
 8005fba:	4b73      	ldr	r3, [pc, #460]	; (8006188 <UART_SetConfig+0x634>)
 8005fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fbe:	f003 0307 	and.w	r3, r3, #7
 8005fc2:	2b05      	cmp	r3, #5
 8005fc4:	d826      	bhi.n	8006014 <UART_SetConfig+0x4c0>
 8005fc6:	a201      	add	r2, pc, #4	; (adr r2, 8005fcc <UART_SetConfig+0x478>)
 8005fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fcc:	08005fe5 	.word	0x08005fe5
 8005fd0:	08005fed 	.word	0x08005fed
 8005fd4:	08005ff5 	.word	0x08005ff5
 8005fd8:	08005ffd 	.word	0x08005ffd
 8005fdc:	08006005 	.word	0x08006005
 8005fe0:	0800600d 	.word	0x0800600d
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fea:	e18a      	b.n	8006302 <UART_SetConfig+0x7ae>
 8005fec:	2304      	movs	r3, #4
 8005fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ff2:	e186      	b.n	8006302 <UART_SetConfig+0x7ae>
 8005ff4:	2308      	movs	r3, #8
 8005ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ffa:	e182      	b.n	8006302 <UART_SetConfig+0x7ae>
 8005ffc:	2310      	movs	r3, #16
 8005ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006002:	e17e      	b.n	8006302 <UART_SetConfig+0x7ae>
 8006004:	2320      	movs	r3, #32
 8006006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800600a:	e17a      	b.n	8006302 <UART_SetConfig+0x7ae>
 800600c:	2340      	movs	r3, #64	; 0x40
 800600e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006012:	e176      	b.n	8006302 <UART_SetConfig+0x7ae>
 8006014:	2380      	movs	r3, #128	; 0x80
 8006016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800601a:	e172      	b.n	8006302 <UART_SetConfig+0x7ae>
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a5b      	ldr	r2, [pc, #364]	; (8006190 <UART_SetConfig+0x63c>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d130      	bne.n	8006088 <UART_SetConfig+0x534>
 8006026:	4b58      	ldr	r3, [pc, #352]	; (8006188 <UART_SetConfig+0x634>)
 8006028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800602a:	f003 0307 	and.w	r3, r3, #7
 800602e:	2b05      	cmp	r3, #5
 8006030:	d826      	bhi.n	8006080 <UART_SetConfig+0x52c>
 8006032:	a201      	add	r2, pc, #4	; (adr r2, 8006038 <UART_SetConfig+0x4e4>)
 8006034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006038:	08006051 	.word	0x08006051
 800603c:	08006059 	.word	0x08006059
 8006040:	08006061 	.word	0x08006061
 8006044:	08006069 	.word	0x08006069
 8006048:	08006071 	.word	0x08006071
 800604c:	08006079 	.word	0x08006079
 8006050:	2300      	movs	r3, #0
 8006052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006056:	e154      	b.n	8006302 <UART_SetConfig+0x7ae>
 8006058:	2304      	movs	r3, #4
 800605a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800605e:	e150      	b.n	8006302 <UART_SetConfig+0x7ae>
 8006060:	2308      	movs	r3, #8
 8006062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006066:	e14c      	b.n	8006302 <UART_SetConfig+0x7ae>
 8006068:	2310      	movs	r3, #16
 800606a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800606e:	e148      	b.n	8006302 <UART_SetConfig+0x7ae>
 8006070:	2320      	movs	r3, #32
 8006072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006076:	e144      	b.n	8006302 <UART_SetConfig+0x7ae>
 8006078:	2340      	movs	r3, #64	; 0x40
 800607a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800607e:	e140      	b.n	8006302 <UART_SetConfig+0x7ae>
 8006080:	2380      	movs	r3, #128	; 0x80
 8006082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006086:	e13c      	b.n	8006302 <UART_SetConfig+0x7ae>
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a41      	ldr	r2, [pc, #260]	; (8006194 <UART_SetConfig+0x640>)
 800608e:	4293      	cmp	r3, r2
 8006090:	f040 8082 	bne.w	8006198 <UART_SetConfig+0x644>
 8006094:	4b3c      	ldr	r3, [pc, #240]	; (8006188 <UART_SetConfig+0x634>)
 8006096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006098:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800609c:	2b28      	cmp	r3, #40	; 0x28
 800609e:	d86d      	bhi.n	800617c <UART_SetConfig+0x628>
 80060a0:	a201      	add	r2, pc, #4	; (adr r2, 80060a8 <UART_SetConfig+0x554>)
 80060a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a6:	bf00      	nop
 80060a8:	0800614d 	.word	0x0800614d
 80060ac:	0800617d 	.word	0x0800617d
 80060b0:	0800617d 	.word	0x0800617d
 80060b4:	0800617d 	.word	0x0800617d
 80060b8:	0800617d 	.word	0x0800617d
 80060bc:	0800617d 	.word	0x0800617d
 80060c0:	0800617d 	.word	0x0800617d
 80060c4:	0800617d 	.word	0x0800617d
 80060c8:	08006155 	.word	0x08006155
 80060cc:	0800617d 	.word	0x0800617d
 80060d0:	0800617d 	.word	0x0800617d
 80060d4:	0800617d 	.word	0x0800617d
 80060d8:	0800617d 	.word	0x0800617d
 80060dc:	0800617d 	.word	0x0800617d
 80060e0:	0800617d 	.word	0x0800617d
 80060e4:	0800617d 	.word	0x0800617d
 80060e8:	0800615d 	.word	0x0800615d
 80060ec:	0800617d 	.word	0x0800617d
 80060f0:	0800617d 	.word	0x0800617d
 80060f4:	0800617d 	.word	0x0800617d
 80060f8:	0800617d 	.word	0x0800617d
 80060fc:	0800617d 	.word	0x0800617d
 8006100:	0800617d 	.word	0x0800617d
 8006104:	0800617d 	.word	0x0800617d
 8006108:	08006165 	.word	0x08006165
 800610c:	0800617d 	.word	0x0800617d
 8006110:	0800617d 	.word	0x0800617d
 8006114:	0800617d 	.word	0x0800617d
 8006118:	0800617d 	.word	0x0800617d
 800611c:	0800617d 	.word	0x0800617d
 8006120:	0800617d 	.word	0x0800617d
 8006124:	0800617d 	.word	0x0800617d
 8006128:	0800616d 	.word	0x0800616d
 800612c:	0800617d 	.word	0x0800617d
 8006130:	0800617d 	.word	0x0800617d
 8006134:	0800617d 	.word	0x0800617d
 8006138:	0800617d 	.word	0x0800617d
 800613c:	0800617d 	.word	0x0800617d
 8006140:	0800617d 	.word	0x0800617d
 8006144:	0800617d 	.word	0x0800617d
 8006148:	08006175 	.word	0x08006175
 800614c:	2301      	movs	r3, #1
 800614e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006152:	e0d6      	b.n	8006302 <UART_SetConfig+0x7ae>
 8006154:	2304      	movs	r3, #4
 8006156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800615a:	e0d2      	b.n	8006302 <UART_SetConfig+0x7ae>
 800615c:	2308      	movs	r3, #8
 800615e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006162:	e0ce      	b.n	8006302 <UART_SetConfig+0x7ae>
 8006164:	2310      	movs	r3, #16
 8006166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800616a:	e0ca      	b.n	8006302 <UART_SetConfig+0x7ae>
 800616c:	2320      	movs	r3, #32
 800616e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006172:	e0c6      	b.n	8006302 <UART_SetConfig+0x7ae>
 8006174:	2340      	movs	r3, #64	; 0x40
 8006176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800617a:	e0c2      	b.n	8006302 <UART_SetConfig+0x7ae>
 800617c:	2380      	movs	r3, #128	; 0x80
 800617e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006182:	e0be      	b.n	8006302 <UART_SetConfig+0x7ae>
 8006184:	40011400 	.word	0x40011400
 8006188:	58024400 	.word	0x58024400
 800618c:	40007800 	.word	0x40007800
 8006190:	40007c00 	.word	0x40007c00
 8006194:	40011800 	.word	0x40011800
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4aad      	ldr	r2, [pc, #692]	; (8006454 <UART_SetConfig+0x900>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d176      	bne.n	8006290 <UART_SetConfig+0x73c>
 80061a2:	4bad      	ldr	r3, [pc, #692]	; (8006458 <UART_SetConfig+0x904>)
 80061a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061aa:	2b28      	cmp	r3, #40	; 0x28
 80061ac:	d86c      	bhi.n	8006288 <UART_SetConfig+0x734>
 80061ae:	a201      	add	r2, pc, #4	; (adr r2, 80061b4 <UART_SetConfig+0x660>)
 80061b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b4:	08006259 	.word	0x08006259
 80061b8:	08006289 	.word	0x08006289
 80061bc:	08006289 	.word	0x08006289
 80061c0:	08006289 	.word	0x08006289
 80061c4:	08006289 	.word	0x08006289
 80061c8:	08006289 	.word	0x08006289
 80061cc:	08006289 	.word	0x08006289
 80061d0:	08006289 	.word	0x08006289
 80061d4:	08006261 	.word	0x08006261
 80061d8:	08006289 	.word	0x08006289
 80061dc:	08006289 	.word	0x08006289
 80061e0:	08006289 	.word	0x08006289
 80061e4:	08006289 	.word	0x08006289
 80061e8:	08006289 	.word	0x08006289
 80061ec:	08006289 	.word	0x08006289
 80061f0:	08006289 	.word	0x08006289
 80061f4:	08006269 	.word	0x08006269
 80061f8:	08006289 	.word	0x08006289
 80061fc:	08006289 	.word	0x08006289
 8006200:	08006289 	.word	0x08006289
 8006204:	08006289 	.word	0x08006289
 8006208:	08006289 	.word	0x08006289
 800620c:	08006289 	.word	0x08006289
 8006210:	08006289 	.word	0x08006289
 8006214:	08006271 	.word	0x08006271
 8006218:	08006289 	.word	0x08006289
 800621c:	08006289 	.word	0x08006289
 8006220:	08006289 	.word	0x08006289
 8006224:	08006289 	.word	0x08006289
 8006228:	08006289 	.word	0x08006289
 800622c:	08006289 	.word	0x08006289
 8006230:	08006289 	.word	0x08006289
 8006234:	08006279 	.word	0x08006279
 8006238:	08006289 	.word	0x08006289
 800623c:	08006289 	.word	0x08006289
 8006240:	08006289 	.word	0x08006289
 8006244:	08006289 	.word	0x08006289
 8006248:	08006289 	.word	0x08006289
 800624c:	08006289 	.word	0x08006289
 8006250:	08006289 	.word	0x08006289
 8006254:	08006281 	.word	0x08006281
 8006258:	2301      	movs	r3, #1
 800625a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800625e:	e050      	b.n	8006302 <UART_SetConfig+0x7ae>
 8006260:	2304      	movs	r3, #4
 8006262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006266:	e04c      	b.n	8006302 <UART_SetConfig+0x7ae>
 8006268:	2308      	movs	r3, #8
 800626a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800626e:	e048      	b.n	8006302 <UART_SetConfig+0x7ae>
 8006270:	2310      	movs	r3, #16
 8006272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006276:	e044      	b.n	8006302 <UART_SetConfig+0x7ae>
 8006278:	2320      	movs	r3, #32
 800627a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800627e:	e040      	b.n	8006302 <UART_SetConfig+0x7ae>
 8006280:	2340      	movs	r3, #64	; 0x40
 8006282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006286:	e03c      	b.n	8006302 <UART_SetConfig+0x7ae>
 8006288:	2380      	movs	r3, #128	; 0x80
 800628a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800628e:	e038      	b.n	8006302 <UART_SetConfig+0x7ae>
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a71      	ldr	r2, [pc, #452]	; (800645c <UART_SetConfig+0x908>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d130      	bne.n	80062fc <UART_SetConfig+0x7a8>
 800629a:	4b6f      	ldr	r3, [pc, #444]	; (8006458 <UART_SetConfig+0x904>)
 800629c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800629e:	f003 0307 	and.w	r3, r3, #7
 80062a2:	2b05      	cmp	r3, #5
 80062a4:	d826      	bhi.n	80062f4 <UART_SetConfig+0x7a0>
 80062a6:	a201      	add	r2, pc, #4	; (adr r2, 80062ac <UART_SetConfig+0x758>)
 80062a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ac:	080062c5 	.word	0x080062c5
 80062b0:	080062cd 	.word	0x080062cd
 80062b4:	080062d5 	.word	0x080062d5
 80062b8:	080062dd 	.word	0x080062dd
 80062bc:	080062e5 	.word	0x080062e5
 80062c0:	080062ed 	.word	0x080062ed
 80062c4:	2302      	movs	r3, #2
 80062c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062ca:	e01a      	b.n	8006302 <UART_SetConfig+0x7ae>
 80062cc:	2304      	movs	r3, #4
 80062ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062d2:	e016      	b.n	8006302 <UART_SetConfig+0x7ae>
 80062d4:	2308      	movs	r3, #8
 80062d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062da:	e012      	b.n	8006302 <UART_SetConfig+0x7ae>
 80062dc:	2310      	movs	r3, #16
 80062de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062e2:	e00e      	b.n	8006302 <UART_SetConfig+0x7ae>
 80062e4:	2320      	movs	r3, #32
 80062e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062ea:	e00a      	b.n	8006302 <UART_SetConfig+0x7ae>
 80062ec:	2340      	movs	r3, #64	; 0x40
 80062ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062f2:	e006      	b.n	8006302 <UART_SetConfig+0x7ae>
 80062f4:	2380      	movs	r3, #128	; 0x80
 80062f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062fa:	e002      	b.n	8006302 <UART_SetConfig+0x7ae>
 80062fc:	2380      	movs	r3, #128	; 0x80
 80062fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a55      	ldr	r2, [pc, #340]	; (800645c <UART_SetConfig+0x908>)
 8006308:	4293      	cmp	r3, r2
 800630a:	f040 80f8 	bne.w	80064fe <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800630e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006312:	2b20      	cmp	r3, #32
 8006314:	dc46      	bgt.n	80063a4 <UART_SetConfig+0x850>
 8006316:	2b02      	cmp	r3, #2
 8006318:	db75      	blt.n	8006406 <UART_SetConfig+0x8b2>
 800631a:	3b02      	subs	r3, #2
 800631c:	2b1e      	cmp	r3, #30
 800631e:	d872      	bhi.n	8006406 <UART_SetConfig+0x8b2>
 8006320:	a201      	add	r2, pc, #4	; (adr r2, 8006328 <UART_SetConfig+0x7d4>)
 8006322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006326:	bf00      	nop
 8006328:	080063ab 	.word	0x080063ab
 800632c:	08006407 	.word	0x08006407
 8006330:	080063b3 	.word	0x080063b3
 8006334:	08006407 	.word	0x08006407
 8006338:	08006407 	.word	0x08006407
 800633c:	08006407 	.word	0x08006407
 8006340:	080063c3 	.word	0x080063c3
 8006344:	08006407 	.word	0x08006407
 8006348:	08006407 	.word	0x08006407
 800634c:	08006407 	.word	0x08006407
 8006350:	08006407 	.word	0x08006407
 8006354:	08006407 	.word	0x08006407
 8006358:	08006407 	.word	0x08006407
 800635c:	08006407 	.word	0x08006407
 8006360:	080063d3 	.word	0x080063d3
 8006364:	08006407 	.word	0x08006407
 8006368:	08006407 	.word	0x08006407
 800636c:	08006407 	.word	0x08006407
 8006370:	08006407 	.word	0x08006407
 8006374:	08006407 	.word	0x08006407
 8006378:	08006407 	.word	0x08006407
 800637c:	08006407 	.word	0x08006407
 8006380:	08006407 	.word	0x08006407
 8006384:	08006407 	.word	0x08006407
 8006388:	08006407 	.word	0x08006407
 800638c:	08006407 	.word	0x08006407
 8006390:	08006407 	.word	0x08006407
 8006394:	08006407 	.word	0x08006407
 8006398:	08006407 	.word	0x08006407
 800639c:	08006407 	.word	0x08006407
 80063a0:	080063f9 	.word	0x080063f9
 80063a4:	2b40      	cmp	r3, #64	; 0x40
 80063a6:	d02a      	beq.n	80063fe <UART_SetConfig+0x8aa>
 80063a8:	e02d      	b.n	8006406 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80063aa:	f7fe ff61 	bl	8005270 <HAL_RCCEx_GetD3PCLK1Freq>
 80063ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80063b0:	e02f      	b.n	8006412 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063b6:	4618      	mov	r0, r3
 80063b8:	f7fe ff70 	bl	800529c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80063bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063c0:	e027      	b.n	8006412 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063c2:	f107 0318 	add.w	r3, r7, #24
 80063c6:	4618      	mov	r0, r3
 80063c8:	f7ff f8bc 	bl	8005544 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063d0:	e01f      	b.n	8006412 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063d2:	4b21      	ldr	r3, [pc, #132]	; (8006458 <UART_SetConfig+0x904>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f003 0320 	and.w	r3, r3, #32
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d009      	beq.n	80063f2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80063de:	4b1e      	ldr	r3, [pc, #120]	; (8006458 <UART_SetConfig+0x904>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	08db      	lsrs	r3, r3, #3
 80063e4:	f003 0303 	and.w	r3, r3, #3
 80063e8:	4a1d      	ldr	r2, [pc, #116]	; (8006460 <UART_SetConfig+0x90c>)
 80063ea:	fa22 f303 	lsr.w	r3, r2, r3
 80063ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80063f0:	e00f      	b.n	8006412 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80063f2:	4b1b      	ldr	r3, [pc, #108]	; (8006460 <UART_SetConfig+0x90c>)
 80063f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063f6:	e00c      	b.n	8006412 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80063f8:	4b1a      	ldr	r3, [pc, #104]	; (8006464 <UART_SetConfig+0x910>)
 80063fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063fc:	e009      	b.n	8006412 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006402:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006404:	e005      	b.n	8006412 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006406:	2300      	movs	r3, #0
 8006408:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006410:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006414:	2b00      	cmp	r3, #0
 8006416:	f000 81ee 	beq.w	80067f6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641e:	4a12      	ldr	r2, [pc, #72]	; (8006468 <UART_SetConfig+0x914>)
 8006420:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006424:	461a      	mov	r2, r3
 8006426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006428:	fbb3 f3f2 	udiv	r3, r3, r2
 800642c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	685a      	ldr	r2, [r3, #4]
 8006432:	4613      	mov	r3, r2
 8006434:	005b      	lsls	r3, r3, #1
 8006436:	4413      	add	r3, r2
 8006438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800643a:	429a      	cmp	r2, r3
 800643c:	d305      	bcc.n	800644a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006446:	429a      	cmp	r2, r3
 8006448:	d910      	bls.n	800646c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006450:	e1d1      	b.n	80067f6 <UART_SetConfig+0xca2>
 8006452:	bf00      	nop
 8006454:	40011c00 	.word	0x40011c00
 8006458:	58024400 	.word	0x58024400
 800645c:	58000c00 	.word	0x58000c00
 8006460:	03d09000 	.word	0x03d09000
 8006464:	003d0900 	.word	0x003d0900
 8006468:	08006ef4 	.word	0x08006ef4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800646c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800646e:	2200      	movs	r2, #0
 8006470:	60bb      	str	r3, [r7, #8]
 8006472:	60fa      	str	r2, [r7, #12]
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006478:	4ac0      	ldr	r2, [pc, #768]	; (800677c <UART_SetConfig+0xc28>)
 800647a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800647e:	b29b      	uxth	r3, r3
 8006480:	2200      	movs	r2, #0
 8006482:	603b      	str	r3, [r7, #0]
 8006484:	607a      	str	r2, [r7, #4]
 8006486:	e9d7 2300 	ldrd	r2, r3, [r7]
 800648a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800648e:	f7f9 ff3f 	bl	8000310 <__aeabi_uldivmod>
 8006492:	4602      	mov	r2, r0
 8006494:	460b      	mov	r3, r1
 8006496:	4610      	mov	r0, r2
 8006498:	4619      	mov	r1, r3
 800649a:	f04f 0200 	mov.w	r2, #0
 800649e:	f04f 0300 	mov.w	r3, #0
 80064a2:	020b      	lsls	r3, r1, #8
 80064a4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80064a8:	0202      	lsls	r2, r0, #8
 80064aa:	6979      	ldr	r1, [r7, #20]
 80064ac:	6849      	ldr	r1, [r1, #4]
 80064ae:	0849      	lsrs	r1, r1, #1
 80064b0:	2000      	movs	r0, #0
 80064b2:	460c      	mov	r4, r1
 80064b4:	4605      	mov	r5, r0
 80064b6:	eb12 0804 	adds.w	r8, r2, r4
 80064ba:	eb43 0905 	adc.w	r9, r3, r5
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	469a      	mov	sl, r3
 80064c6:	4693      	mov	fp, r2
 80064c8:	4652      	mov	r2, sl
 80064ca:	465b      	mov	r3, fp
 80064cc:	4640      	mov	r0, r8
 80064ce:	4649      	mov	r1, r9
 80064d0:	f7f9 ff1e 	bl	8000310 <__aeabi_uldivmod>
 80064d4:	4602      	mov	r2, r0
 80064d6:	460b      	mov	r3, r1
 80064d8:	4613      	mov	r3, r2
 80064da:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80064dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064e2:	d308      	bcc.n	80064f6 <UART_SetConfig+0x9a2>
 80064e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064ea:	d204      	bcs.n	80064f6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064f2:	60da      	str	r2, [r3, #12]
 80064f4:	e17f      	b.n	80067f6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80064fc:	e17b      	b.n	80067f6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	69db      	ldr	r3, [r3, #28]
 8006502:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006506:	f040 80bd 	bne.w	8006684 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800650a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800650e:	2b20      	cmp	r3, #32
 8006510:	dc48      	bgt.n	80065a4 <UART_SetConfig+0xa50>
 8006512:	2b00      	cmp	r3, #0
 8006514:	db7b      	blt.n	800660e <UART_SetConfig+0xaba>
 8006516:	2b20      	cmp	r3, #32
 8006518:	d879      	bhi.n	800660e <UART_SetConfig+0xaba>
 800651a:	a201      	add	r2, pc, #4	; (adr r2, 8006520 <UART_SetConfig+0x9cc>)
 800651c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006520:	080065ab 	.word	0x080065ab
 8006524:	080065b3 	.word	0x080065b3
 8006528:	0800660f 	.word	0x0800660f
 800652c:	0800660f 	.word	0x0800660f
 8006530:	080065bb 	.word	0x080065bb
 8006534:	0800660f 	.word	0x0800660f
 8006538:	0800660f 	.word	0x0800660f
 800653c:	0800660f 	.word	0x0800660f
 8006540:	080065cb 	.word	0x080065cb
 8006544:	0800660f 	.word	0x0800660f
 8006548:	0800660f 	.word	0x0800660f
 800654c:	0800660f 	.word	0x0800660f
 8006550:	0800660f 	.word	0x0800660f
 8006554:	0800660f 	.word	0x0800660f
 8006558:	0800660f 	.word	0x0800660f
 800655c:	0800660f 	.word	0x0800660f
 8006560:	080065db 	.word	0x080065db
 8006564:	0800660f 	.word	0x0800660f
 8006568:	0800660f 	.word	0x0800660f
 800656c:	0800660f 	.word	0x0800660f
 8006570:	0800660f 	.word	0x0800660f
 8006574:	0800660f 	.word	0x0800660f
 8006578:	0800660f 	.word	0x0800660f
 800657c:	0800660f 	.word	0x0800660f
 8006580:	0800660f 	.word	0x0800660f
 8006584:	0800660f 	.word	0x0800660f
 8006588:	0800660f 	.word	0x0800660f
 800658c:	0800660f 	.word	0x0800660f
 8006590:	0800660f 	.word	0x0800660f
 8006594:	0800660f 	.word	0x0800660f
 8006598:	0800660f 	.word	0x0800660f
 800659c:	0800660f 	.word	0x0800660f
 80065a0:	08006601 	.word	0x08006601
 80065a4:	2b40      	cmp	r3, #64	; 0x40
 80065a6:	d02e      	beq.n	8006606 <UART_SetConfig+0xab2>
 80065a8:	e031      	b.n	800660e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065aa:	f7fd fc95 	bl	8003ed8 <HAL_RCC_GetPCLK1Freq>
 80065ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80065b0:	e033      	b.n	800661a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065b2:	f7fd fca7 	bl	8003f04 <HAL_RCC_GetPCLK2Freq>
 80065b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80065b8:	e02f      	b.n	800661a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065be:	4618      	mov	r0, r3
 80065c0:	f7fe fe6c 	bl	800529c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80065c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065c8:	e027      	b.n	800661a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065ca:	f107 0318 	add.w	r3, r7, #24
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7fe ffb8 	bl	8005544 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065d8:	e01f      	b.n	800661a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065da:	4b69      	ldr	r3, [pc, #420]	; (8006780 <UART_SetConfig+0xc2c>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f003 0320 	and.w	r3, r3, #32
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d009      	beq.n	80065fa <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80065e6:	4b66      	ldr	r3, [pc, #408]	; (8006780 <UART_SetConfig+0xc2c>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	08db      	lsrs	r3, r3, #3
 80065ec:	f003 0303 	and.w	r3, r3, #3
 80065f0:	4a64      	ldr	r2, [pc, #400]	; (8006784 <UART_SetConfig+0xc30>)
 80065f2:	fa22 f303 	lsr.w	r3, r2, r3
 80065f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80065f8:	e00f      	b.n	800661a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80065fa:	4b62      	ldr	r3, [pc, #392]	; (8006784 <UART_SetConfig+0xc30>)
 80065fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065fe:	e00c      	b.n	800661a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006600:	4b61      	ldr	r3, [pc, #388]	; (8006788 <UART_SetConfig+0xc34>)
 8006602:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006604:	e009      	b.n	800661a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006606:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800660a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800660c:	e005      	b.n	800661a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800660e:	2300      	movs	r3, #0
 8006610:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006618:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800661a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800661c:	2b00      	cmp	r3, #0
 800661e:	f000 80ea 	beq.w	80067f6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006626:	4a55      	ldr	r2, [pc, #340]	; (800677c <UART_SetConfig+0xc28>)
 8006628:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800662c:	461a      	mov	r2, r3
 800662e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006630:	fbb3 f3f2 	udiv	r3, r3, r2
 8006634:	005a      	lsls	r2, r3, #1
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	085b      	lsrs	r3, r3, #1
 800663c:	441a      	add	r2, r3
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	fbb2 f3f3 	udiv	r3, r2, r3
 8006646:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800664a:	2b0f      	cmp	r3, #15
 800664c:	d916      	bls.n	800667c <UART_SetConfig+0xb28>
 800664e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006654:	d212      	bcs.n	800667c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006658:	b29b      	uxth	r3, r3
 800665a:	f023 030f 	bic.w	r3, r3, #15
 800665e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006662:	085b      	lsrs	r3, r3, #1
 8006664:	b29b      	uxth	r3, r3
 8006666:	f003 0307 	and.w	r3, r3, #7
 800666a:	b29a      	uxth	r2, r3
 800666c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800666e:	4313      	orrs	r3, r2
 8006670:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006678:	60da      	str	r2, [r3, #12]
 800667a:	e0bc      	b.n	80067f6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006682:	e0b8      	b.n	80067f6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006684:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006688:	2b20      	cmp	r3, #32
 800668a:	dc4b      	bgt.n	8006724 <UART_SetConfig+0xbd0>
 800668c:	2b00      	cmp	r3, #0
 800668e:	f2c0 8087 	blt.w	80067a0 <UART_SetConfig+0xc4c>
 8006692:	2b20      	cmp	r3, #32
 8006694:	f200 8084 	bhi.w	80067a0 <UART_SetConfig+0xc4c>
 8006698:	a201      	add	r2, pc, #4	; (adr r2, 80066a0 <UART_SetConfig+0xb4c>)
 800669a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800669e:	bf00      	nop
 80066a0:	0800672b 	.word	0x0800672b
 80066a4:	08006733 	.word	0x08006733
 80066a8:	080067a1 	.word	0x080067a1
 80066ac:	080067a1 	.word	0x080067a1
 80066b0:	0800673b 	.word	0x0800673b
 80066b4:	080067a1 	.word	0x080067a1
 80066b8:	080067a1 	.word	0x080067a1
 80066bc:	080067a1 	.word	0x080067a1
 80066c0:	0800674b 	.word	0x0800674b
 80066c4:	080067a1 	.word	0x080067a1
 80066c8:	080067a1 	.word	0x080067a1
 80066cc:	080067a1 	.word	0x080067a1
 80066d0:	080067a1 	.word	0x080067a1
 80066d4:	080067a1 	.word	0x080067a1
 80066d8:	080067a1 	.word	0x080067a1
 80066dc:	080067a1 	.word	0x080067a1
 80066e0:	0800675b 	.word	0x0800675b
 80066e4:	080067a1 	.word	0x080067a1
 80066e8:	080067a1 	.word	0x080067a1
 80066ec:	080067a1 	.word	0x080067a1
 80066f0:	080067a1 	.word	0x080067a1
 80066f4:	080067a1 	.word	0x080067a1
 80066f8:	080067a1 	.word	0x080067a1
 80066fc:	080067a1 	.word	0x080067a1
 8006700:	080067a1 	.word	0x080067a1
 8006704:	080067a1 	.word	0x080067a1
 8006708:	080067a1 	.word	0x080067a1
 800670c:	080067a1 	.word	0x080067a1
 8006710:	080067a1 	.word	0x080067a1
 8006714:	080067a1 	.word	0x080067a1
 8006718:	080067a1 	.word	0x080067a1
 800671c:	080067a1 	.word	0x080067a1
 8006720:	08006793 	.word	0x08006793
 8006724:	2b40      	cmp	r3, #64	; 0x40
 8006726:	d037      	beq.n	8006798 <UART_SetConfig+0xc44>
 8006728:	e03a      	b.n	80067a0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800672a:	f7fd fbd5 	bl	8003ed8 <HAL_RCC_GetPCLK1Freq>
 800672e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006730:	e03c      	b.n	80067ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006732:	f7fd fbe7 	bl	8003f04 <HAL_RCC_GetPCLK2Freq>
 8006736:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006738:	e038      	b.n	80067ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800673a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800673e:	4618      	mov	r0, r3
 8006740:	f7fe fdac 	bl	800529c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006746:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006748:	e030      	b.n	80067ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800674a:	f107 0318 	add.w	r3, r7, #24
 800674e:	4618      	mov	r0, r3
 8006750:	f7fe fef8 	bl	8005544 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006758:	e028      	b.n	80067ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800675a:	4b09      	ldr	r3, [pc, #36]	; (8006780 <UART_SetConfig+0xc2c>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 0320 	and.w	r3, r3, #32
 8006762:	2b00      	cmp	r3, #0
 8006764:	d012      	beq.n	800678c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006766:	4b06      	ldr	r3, [pc, #24]	; (8006780 <UART_SetConfig+0xc2c>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	08db      	lsrs	r3, r3, #3
 800676c:	f003 0303 	and.w	r3, r3, #3
 8006770:	4a04      	ldr	r2, [pc, #16]	; (8006784 <UART_SetConfig+0xc30>)
 8006772:	fa22 f303 	lsr.w	r3, r2, r3
 8006776:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006778:	e018      	b.n	80067ac <UART_SetConfig+0xc58>
 800677a:	bf00      	nop
 800677c:	08006ef4 	.word	0x08006ef4
 8006780:	58024400 	.word	0x58024400
 8006784:	03d09000 	.word	0x03d09000
 8006788:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800678c:	4b24      	ldr	r3, [pc, #144]	; (8006820 <UART_SetConfig+0xccc>)
 800678e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006790:	e00c      	b.n	80067ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006792:	4b24      	ldr	r3, [pc, #144]	; (8006824 <UART_SetConfig+0xcd0>)
 8006794:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006796:	e009      	b.n	80067ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006798:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800679c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800679e:	e005      	b.n	80067ac <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80067a0:	2300      	movs	r3, #0
 80067a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80067aa:	bf00      	nop
    }

    if (pclk != 0U)
 80067ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d021      	beq.n	80067f6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b6:	4a1c      	ldr	r2, [pc, #112]	; (8006828 <UART_SetConfig+0xcd4>)
 80067b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067bc:	461a      	mov	r2, r3
 80067be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067c0:	fbb3 f2f2 	udiv	r2, r3, r2
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	085b      	lsrs	r3, r3, #1
 80067ca:	441a      	add	r2, r3
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80067d4:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d8:	2b0f      	cmp	r3, #15
 80067da:	d909      	bls.n	80067f0 <UART_SetConfig+0xc9c>
 80067dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067e2:	d205      	bcs.n	80067f0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80067e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e6:	b29a      	uxth	r2, r3
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	60da      	str	r2, [r3, #12]
 80067ee:	e002      	b.n	80067f6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	2201      	movs	r2, #1
 80067fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	2201      	movs	r2, #1
 8006802:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	2200      	movs	r2, #0
 800680a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	2200      	movs	r2, #0
 8006810:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006812:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006816:	4618      	mov	r0, r3
 8006818:	3748      	adds	r7, #72	; 0x48
 800681a:	46bd      	mov	sp, r7
 800681c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006820:	03d09000 	.word	0x03d09000
 8006824:	003d0900 	.word	0x003d0900
 8006828:	08006ef4 	.word	0x08006ef4

0800682c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006838:	f003 0308 	and.w	r3, r3, #8
 800683c:	2b00      	cmp	r3, #0
 800683e:	d00a      	beq.n	8006856 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	430a      	orrs	r2, r1
 8006854:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800685a:	f003 0301 	and.w	r3, r3, #1
 800685e:	2b00      	cmp	r3, #0
 8006860:	d00a      	beq.n	8006878 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	430a      	orrs	r2, r1
 8006876:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800687c:	f003 0302 	and.w	r3, r3, #2
 8006880:	2b00      	cmp	r3, #0
 8006882:	d00a      	beq.n	800689a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	430a      	orrs	r2, r1
 8006898:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800689e:	f003 0304 	and.w	r3, r3, #4
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00a      	beq.n	80068bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	430a      	orrs	r2, r1
 80068ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c0:	f003 0310 	and.w	r3, r3, #16
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d00a      	beq.n	80068de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	430a      	orrs	r2, r1
 80068dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e2:	f003 0320 	and.w	r3, r3, #32
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00a      	beq.n	8006900 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	430a      	orrs	r2, r1
 80068fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006908:	2b00      	cmp	r3, #0
 800690a:	d01a      	beq.n	8006942 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	430a      	orrs	r2, r1
 8006920:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006926:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800692a:	d10a      	bne.n	8006942 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	430a      	orrs	r2, r1
 8006940:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00a      	beq.n	8006964 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	430a      	orrs	r2, r1
 8006962:	605a      	str	r2, [r3, #4]
  }
}
 8006964:	bf00      	nop
 8006966:	370c      	adds	r7, #12
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b098      	sub	sp, #96	; 0x60
 8006974:	af02      	add	r7, sp, #8
 8006976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006980:	f7fa fe30 	bl	80015e4 <HAL_GetTick>
 8006984:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 0308 	and.w	r3, r3, #8
 8006990:	2b08      	cmp	r3, #8
 8006992:	d12f      	bne.n	80069f4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006994:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006998:	9300      	str	r3, [sp, #0]
 800699a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800699c:	2200      	movs	r2, #0
 800699e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 f88e 	bl	8006ac4 <UART_WaitOnFlagUntilTimeout>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d022      	beq.n	80069f4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b6:	e853 3f00 	ldrex	r3, [r3]
 80069ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80069bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069c2:	653b      	str	r3, [r7, #80]	; 0x50
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	461a      	mov	r2, r3
 80069ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069cc:	647b      	str	r3, [r7, #68]	; 0x44
 80069ce:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80069d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069d4:	e841 2300 	strex	r3, r2, [r1]
 80069d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80069da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d1e6      	bne.n	80069ae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2220      	movs	r2, #32
 80069e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069f0:	2303      	movs	r3, #3
 80069f2:	e063      	b.n	8006abc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 0304 	and.w	r3, r3, #4
 80069fe:	2b04      	cmp	r3, #4
 8006a00:	d149      	bne.n	8006a96 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a02:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a06:	9300      	str	r3, [sp, #0]
 8006a08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f000 f857 	bl	8006ac4 <UART_WaitOnFlagUntilTimeout>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d03c      	beq.n	8006a96 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a24:	e853 3f00 	ldrex	r3, [r3]
 8006a28:	623b      	str	r3, [r7, #32]
   return(result);
 8006a2a:	6a3b      	ldr	r3, [r7, #32]
 8006a2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	461a      	mov	r2, r3
 8006a38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a3a:	633b      	str	r3, [r7, #48]	; 0x30
 8006a3c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a42:	e841 2300 	strex	r3, r2, [r1]
 8006a46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d1e6      	bne.n	8006a1c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	3308      	adds	r3, #8
 8006a54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	e853 3f00 	ldrex	r3, [r3]
 8006a5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f023 0301 	bic.w	r3, r3, #1
 8006a64:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	3308      	adds	r3, #8
 8006a6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a6e:	61fa      	str	r2, [r7, #28]
 8006a70:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a72:	69b9      	ldr	r1, [r7, #24]
 8006a74:	69fa      	ldr	r2, [r7, #28]
 8006a76:	e841 2300 	strex	r3, r2, [r1]
 8006a7a:	617b      	str	r3, [r7, #20]
   return(result);
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d1e5      	bne.n	8006a4e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2220      	movs	r2, #32
 8006a86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a92:	2303      	movs	r3, #3
 8006a94:	e012      	b.n	8006abc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2220      	movs	r2, #32
 8006a9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2220      	movs	r2, #32
 8006aa2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3758      	adds	r7, #88	; 0x58
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b084      	sub	sp, #16
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	60b9      	str	r1, [r7, #8]
 8006ace:	603b      	str	r3, [r7, #0]
 8006ad0:	4613      	mov	r3, r2
 8006ad2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ad4:	e04f      	b.n	8006b76 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006adc:	d04b      	beq.n	8006b76 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ade:	f7fa fd81 	bl	80015e4 <HAL_GetTick>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	1ad3      	subs	r3, r2, r3
 8006ae8:	69ba      	ldr	r2, [r7, #24]
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d302      	bcc.n	8006af4 <UART_WaitOnFlagUntilTimeout+0x30>
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d101      	bne.n	8006af8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006af4:	2303      	movs	r3, #3
 8006af6:	e04e      	b.n	8006b96 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f003 0304 	and.w	r3, r3, #4
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d037      	beq.n	8006b76 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	2b80      	cmp	r3, #128	; 0x80
 8006b0a:	d034      	beq.n	8006b76 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	2b40      	cmp	r3, #64	; 0x40
 8006b10:	d031      	beq.n	8006b76 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	69db      	ldr	r3, [r3, #28]
 8006b18:	f003 0308 	and.w	r3, r3, #8
 8006b1c:	2b08      	cmp	r3, #8
 8006b1e:	d110      	bne.n	8006b42 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	2208      	movs	r2, #8
 8006b26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b28:	68f8      	ldr	r0, [r7, #12]
 8006b2a:	f000 f839 	bl	8006ba0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2208      	movs	r2, #8
 8006b32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e029      	b.n	8006b96 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	69db      	ldr	r3, [r3, #28]
 8006b48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b50:	d111      	bne.n	8006b76 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b5c:	68f8      	ldr	r0, [r7, #12]
 8006b5e:	f000 f81f 	bl	8006ba0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2220      	movs	r2, #32
 8006b66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006b72:	2303      	movs	r3, #3
 8006b74:	e00f      	b.n	8006b96 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	69da      	ldr	r2, [r3, #28]
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	4013      	ands	r3, r2
 8006b80:	68ba      	ldr	r2, [r7, #8]
 8006b82:	429a      	cmp	r2, r3
 8006b84:	bf0c      	ite	eq
 8006b86:	2301      	moveq	r3, #1
 8006b88:	2300      	movne	r3, #0
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	79fb      	ldrb	r3, [r7, #7]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d0a0      	beq.n	8006ad6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3710      	adds	r7, #16
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
	...

08006ba0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b095      	sub	sp, #84	; 0x54
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bb0:	e853 3f00 	ldrex	r3, [r3]
 8006bb4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006bbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bc6:	643b      	str	r3, [r7, #64]	; 0x40
 8006bc8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006bcc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006bce:	e841 2300 	strex	r3, r2, [r1]
 8006bd2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d1e6      	bne.n	8006ba8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	3308      	adds	r3, #8
 8006be0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be2:	6a3b      	ldr	r3, [r7, #32]
 8006be4:	e853 3f00 	ldrex	r3, [r3]
 8006be8:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bea:	69fa      	ldr	r2, [r7, #28]
 8006bec:	4b1e      	ldr	r3, [pc, #120]	; (8006c68 <UART_EndRxTransfer+0xc8>)
 8006bee:	4013      	ands	r3, r2
 8006bf0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	3308      	adds	r3, #8
 8006bf8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bfa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006bfc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bfe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c02:	e841 2300 	strex	r3, r2, [r1]
 8006c06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d1e5      	bne.n	8006bda <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d118      	bne.n	8006c48 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	e853 3f00 	ldrex	r3, [r3]
 8006c22:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	f023 0310 	bic.w	r3, r3, #16
 8006c2a:	647b      	str	r3, [r7, #68]	; 0x44
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	461a      	mov	r2, r3
 8006c32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c34:	61bb      	str	r3, [r7, #24]
 8006c36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c38:	6979      	ldr	r1, [r7, #20]
 8006c3a:	69ba      	ldr	r2, [r7, #24]
 8006c3c:	e841 2300 	strex	r3, r2, [r1]
 8006c40:	613b      	str	r3, [r7, #16]
   return(result);
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d1e6      	bne.n	8006c16 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2220      	movs	r2, #32
 8006c4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006c5c:	bf00      	nop
 8006c5e:	3754      	adds	r7, #84	; 0x54
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr
 8006c68:	effffffe 	.word	0xeffffffe

08006c6c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b085      	sub	sp, #20
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d101      	bne.n	8006c82 <HAL_UARTEx_DisableFifoMode+0x16>
 8006c7e:	2302      	movs	r3, #2
 8006c80:	e027      	b.n	8006cd2 <HAL_UARTEx_DisableFifoMode+0x66>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2201      	movs	r2, #1
 8006c86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2224      	movs	r2, #36	; 0x24
 8006c8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f022 0201 	bic.w	r2, r2, #1
 8006ca8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006cb0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2220      	movs	r2, #32
 8006cc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006cd0:	2300      	movs	r3, #0
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3714      	adds	r7, #20
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr

08006cde <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006cde:	b580      	push	{r7, lr}
 8006ce0:	b084      	sub	sp, #16
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
 8006ce6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d101      	bne.n	8006cf6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006cf2:	2302      	movs	r3, #2
 8006cf4:	e02d      	b.n	8006d52 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2224      	movs	r2, #36	; 0x24
 8006d02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f022 0201 	bic.w	r2, r2, #1
 8006d1c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	683a      	ldr	r2, [r7, #0]
 8006d2e:	430a      	orrs	r2, r1
 8006d30:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 f850 	bl	8006dd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	68fa      	ldr	r2, [r7, #12]
 8006d3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2220      	movs	r2, #32
 8006d44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3710      	adds	r7, #16
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}

08006d5a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b084      	sub	sp, #16
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
 8006d62:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d101      	bne.n	8006d72 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006d6e:	2302      	movs	r3, #2
 8006d70:	e02d      	b.n	8006dce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2201      	movs	r2, #1
 8006d76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2224      	movs	r2, #36	; 0x24
 8006d7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f022 0201 	bic.w	r2, r2, #1
 8006d98:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	683a      	ldr	r2, [r7, #0]
 8006daa:	430a      	orrs	r2, r1
 8006dac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 f812 	bl	8006dd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2220      	movs	r2, #32
 8006dc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006dcc:	2300      	movs	r3, #0
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3710      	adds	r7, #16
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
	...

08006dd8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b085      	sub	sp, #20
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d108      	bne.n	8006dfa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2201      	movs	r2, #1
 8006df4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006df8:	e031      	b.n	8006e5e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006dfa:	2310      	movs	r3, #16
 8006dfc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006dfe:	2310      	movs	r3, #16
 8006e00:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	0e5b      	lsrs	r3, r3, #25
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	f003 0307 	and.w	r3, r3, #7
 8006e10:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	0f5b      	lsrs	r3, r3, #29
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	f003 0307 	and.w	r3, r3, #7
 8006e20:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e22:	7bbb      	ldrb	r3, [r7, #14]
 8006e24:	7b3a      	ldrb	r2, [r7, #12]
 8006e26:	4911      	ldr	r1, [pc, #68]	; (8006e6c <UARTEx_SetNbDataToProcess+0x94>)
 8006e28:	5c8a      	ldrb	r2, [r1, r2]
 8006e2a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006e2e:	7b3a      	ldrb	r2, [r7, #12]
 8006e30:	490f      	ldr	r1, [pc, #60]	; (8006e70 <UARTEx_SetNbDataToProcess+0x98>)
 8006e32:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e34:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e38:	b29a      	uxth	r2, r3
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e40:	7bfb      	ldrb	r3, [r7, #15]
 8006e42:	7b7a      	ldrb	r2, [r7, #13]
 8006e44:	4909      	ldr	r1, [pc, #36]	; (8006e6c <UARTEx_SetNbDataToProcess+0x94>)
 8006e46:	5c8a      	ldrb	r2, [r1, r2]
 8006e48:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006e4c:	7b7a      	ldrb	r2, [r7, #13]
 8006e4e:	4908      	ldr	r1, [pc, #32]	; (8006e70 <UARTEx_SetNbDataToProcess+0x98>)
 8006e50:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e52:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e56:	b29a      	uxth	r2, r3
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006e5e:	bf00      	nop
 8006e60:	3714      	adds	r7, #20
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr
 8006e6a:	bf00      	nop
 8006e6c:	08006f0c 	.word	0x08006f0c
 8006e70:	08006f14 	.word	0x08006f14

08006e74 <memset>:
 8006e74:	4402      	add	r2, r0
 8006e76:	4603      	mov	r3, r0
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d100      	bne.n	8006e7e <memset+0xa>
 8006e7c:	4770      	bx	lr
 8006e7e:	f803 1b01 	strb.w	r1, [r3], #1
 8006e82:	e7f9      	b.n	8006e78 <memset+0x4>

08006e84 <__libc_init_array>:
 8006e84:	b570      	push	{r4, r5, r6, lr}
 8006e86:	4d0d      	ldr	r5, [pc, #52]	; (8006ebc <__libc_init_array+0x38>)
 8006e88:	4c0d      	ldr	r4, [pc, #52]	; (8006ec0 <__libc_init_array+0x3c>)
 8006e8a:	1b64      	subs	r4, r4, r5
 8006e8c:	10a4      	asrs	r4, r4, #2
 8006e8e:	2600      	movs	r6, #0
 8006e90:	42a6      	cmp	r6, r4
 8006e92:	d109      	bne.n	8006ea8 <__libc_init_array+0x24>
 8006e94:	4d0b      	ldr	r5, [pc, #44]	; (8006ec4 <__libc_init_array+0x40>)
 8006e96:	4c0c      	ldr	r4, [pc, #48]	; (8006ec8 <__libc_init_array+0x44>)
 8006e98:	f000 f818 	bl	8006ecc <_init>
 8006e9c:	1b64      	subs	r4, r4, r5
 8006e9e:	10a4      	asrs	r4, r4, #2
 8006ea0:	2600      	movs	r6, #0
 8006ea2:	42a6      	cmp	r6, r4
 8006ea4:	d105      	bne.n	8006eb2 <__libc_init_array+0x2e>
 8006ea6:	bd70      	pop	{r4, r5, r6, pc}
 8006ea8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eac:	4798      	blx	r3
 8006eae:	3601      	adds	r6, #1
 8006eb0:	e7ee      	b.n	8006e90 <__libc_init_array+0xc>
 8006eb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eb6:	4798      	blx	r3
 8006eb8:	3601      	adds	r6, #1
 8006eba:	e7f2      	b.n	8006ea2 <__libc_init_array+0x1e>
 8006ebc:	08006f24 	.word	0x08006f24
 8006ec0:	08006f24 	.word	0x08006f24
 8006ec4:	08006f24 	.word	0x08006f24
 8006ec8:	08006f28 	.word	0x08006f28

08006ecc <_init>:
 8006ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ece:	bf00      	nop
 8006ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ed2:	bc08      	pop	{r3}
 8006ed4:	469e      	mov	lr, r3
 8006ed6:	4770      	bx	lr

08006ed8 <_fini>:
 8006ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eda:	bf00      	nop
 8006edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ede:	bc08      	pop	{r3}
 8006ee0:	469e      	mov	lr, r3
 8006ee2:	4770      	bx	lr
